/******************************************************************************
 * Copyright 2017 RoboSense All rights reserved.
 * Suteng Innovation Technology Co., Ltd. www.robosense.ai

 * This software is provided to you directly by RoboSense and might
 * only be used to access RoboSense LiDAR. Any compilation,
 * modification, exploration, reproduction and redistribution are
 * restricted without RoboSense's prior consent.

 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOSENSE BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

#include "rs_perception/custom/robosense_websocket/websocket_color_mapper.h"

#include <cmath>
#include <iostream>
#include <limits>
#include <memory>

namespace robosense {

namespace perception {

// colormap: autum
static float autum_r[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

static float autum_g[] = {0,
                          0.01587301587301587f,
                          0.03174603174603174f,
                          0.04761904761904762f,
                          0.06349206349206349f,
                          0.07936507936507936f,
                          0.09523809523809523f,
                          0.1111111111111111f,
                          0.126984126984127f,
                          0.1428571428571428f,
                          0.1587301587301587f,
                          0.1746031746031746f,
                          0.1904761904761905f,
                          0.2063492063492063f,
                          0.2222222222222222f,
                          0.2380952380952381f,
                          0.253968253968254f,
                          0.2698412698412698f,
                          0.2857142857142857f,
                          0.3015873015873016f,
                          0.3174603174603174f,
                          0.3333333333333333f,
                          0.3492063492063492f,
                          0.3650793650793651f,
                          0.3809523809523809f,
                          0.3968253968253968f,
                          0.4126984126984127f,
                          0.4285714285714285f,
                          0.4444444444444444f,
                          0.4603174603174603f,
                          0.4761904761904762f,
                          0.492063492063492f,
                          0.5079365079365079f,
                          0.5238095238095238f,
                          0.5396825396825397f,
                          0.5555555555555556f,
                          0.5714285714285714f,
                          0.5873015873015873f,
                          0.6031746031746031f,
                          0.6190476190476191f,
                          0.6349206349206349f,
                          0.6507936507936508f,
                          0.6666666666666666f,
                          0.6825396825396826f,
                          0.6984126984126984f,
                          0.7142857142857143f,
                          0.7301587301587301f,
                          0.746031746031746f,
                          0.7619047619047619f,
                          0.7777777777777778f,
                          0.7936507936507936f,
                          0.8095238095238095f,
                          0.8253968253968254f,
                          0.8412698412698413f,
                          0.8571428571428571f,
                          0.873015873015873f,
                          0.8888888888888888f,
                          0.9047619047619048f,
                          0.9206349206349206f,
                          0.9365079365079365f,
                          0.9523809523809523f,
                          0.9682539682539683f,
                          0.9841269841269841f,
                          1};

static float autum_b[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// colormap: Bone
static float bone_r[] = {0,
                         0.01388888888888889f,
                         0.02777777777777778f,
                         0.04166666666666666f,
                         0.05555555555555555f,
                         0.06944444444444445f,
                         0.08333333333333333f,
                         0.09722222222222221f,
                         0.1111111111111111f,
                         0.125f,
                         0.1388888888888889f,
                         0.1527777777777778f,
                         0.1666666666666667f,
                         0.1805555555555556f,
                         0.1944444444444444f,
                         0.2083333333333333f,
                         0.2222222222222222f,
                         0.2361111111111111f,
                         0.25f,
                         0.2638888888888889f,
                         0.2777777777777778f,
                         0.2916666666666666f,
                         0.3055555555555555f,
                         0.3194444444444444f,
                         0.3333333333333333f,
                         0.3472222222222222f,
                         0.3611111111111111f,
                         0.375f,
                         0.3888888888888888f,
                         0.4027777777777777f,
                         0.4166666666666666f,
                         0.4305555555555555f,
                         0.4444444444444444f,
                         0.4583333333333333f,
                         0.4722222222222222f,
                         0.4861111111111112f,
                         0.5f,
                         0.5138888888888888f,
                         0.5277777777777778f,
                         0.5416666666666667f,
                         0.5555555555555556f,
                         0.5694444444444444f,
                         0.5833333333333333f,
                         0.5972222222222222f,
                         0.611111111111111f,
                         0.6249999999999999f,
                         0.6388888888888888f,
                         0.6527777777777778f,
                         0.6726190476190474f,
                         0.6944444444444442f,
                         0.7162698412698412f,
                         0.7380952380952381f,
                         0.7599206349206349f,
                         0.7817460317460316f,
                         0.8035714285714286f,
                         0.8253968253968254f,
                         0.8472222222222221f,
                         0.8690476190476188f,
                         0.8908730158730158f,
                         0.9126984126984128f,
                         0.9345238095238095f,
                         0.9563492063492063f,
                         0.978174603174603f,
                         1};

static float bone_g[] = {0,
                         0.01388888888888889f,
                         0.02777777777777778f,
                         0.04166666666666666f,
                         0.05555555555555555f,
                         0.06944444444444445f,
                         0.08333333333333333f,
                         0.09722222222222221f,
                         0.1111111111111111f,
                         0.125f,
                         0.1388888888888889f,
                         0.1527777777777778f,
                         0.1666666666666667f,
                         0.1805555555555556f,
                         0.1944444444444444f,
                         0.2083333333333333f,
                         0.2222222222222222f,
                         0.2361111111111111f,
                         0.25f,
                         0.2638888888888889f,
                         0.2777777777777778f,
                         0.2916666666666666f,
                         0.3055555555555555f,
                         0.3194444444444444f,
                         0.3353174603174602f,
                         0.3544973544973544f,
                         0.3736772486772486f,
                         0.3928571428571428f,
                         0.412037037037037f,
                         0.4312169312169312f,
                         0.4503968253968254f,
                         0.4695767195767195f,
                         0.4887566137566137f,
                         0.5079365079365078f,
                         0.5271164021164021f,
                         0.5462962962962963f,
                         0.5654761904761904f,
                         0.5846560846560845f,
                         0.6038359788359787f,
                         0.623015873015873f,
                         0.6421957671957671f,
                         0.6613756613756612f,
                         0.6805555555555555f,
                         0.6997354497354497f,
                         0.7189153439153438f,
                         0.7380952380952379f,
                         0.7572751322751322f,
                         0.7764550264550264f,
                         0.7916666666666666f,
                         0.8055555555555555f,
                         0.8194444444444444f,
                         0.8333333333333334f,
                         0.8472222222222222f,
                         0.861111111111111f,
                         0.875f,
                         0.8888888888888888f,
                         0.9027777777777777f,
                         0.9166666666666665f,
                         0.9305555555555555f,
                         0.9444444444444444f,
                         0.9583333333333333f,
                         0.9722222222222221f,
                         0.986111111111111f,
                         1};

static float bone_b[] = {0,
                         0.01917989417989418f,
                         0.03835978835978836f,
                         0.05753968253968253f,
                         0.07671957671957672f,
                         0.09589947089947089f,
                         0.1150793650793651f,
                         0.1342592592592592f,
                         0.1534391534391534f,
                         0.1726190476190476f,
                         0.1917989417989418f,
                         0.210978835978836f,
                         0.2301587301587301f,
                         0.2493386243386243f,
                         0.2685185185185185f,
                         0.2876984126984127f,
                         0.3068783068783069f,
                         0.326058201058201f,
                         0.3452380952380952f,
                         0.3644179894179894f,
                         0.3835978835978835f,
                         0.4027777777777777f,
                         0.4219576719576719f,
                         0.4411375661375661f,
                         0.4583333333333333f,
                         0.4722222222222222f,
                         0.4861111111111111f,
                         0.5f,
                         0.5138888888888888f,
                         0.5277777777777777f,
                         0.5416666666666666f,
                         0.5555555555555556f,
                         0.5694444444444444f,
                         0.5833333333333333f,
                         0.5972222222222222f,
                         0.6111111111111112f,
                         0.625f,
                         0.6388888888888888f,
                         0.6527777777777778f,
                         0.6666666666666667f,
                         0.6805555555555556f,
                         0.6944444444444444f,
                         0.7083333333333333f,
                         0.7222222222222222f,
                         0.736111111111111f,
                         0.7499999999999999f,
                         0.7638888888888888f,
                         0.7777777777777778f,
                         0.7916666666666666f,
                         0.8055555555555555f,
                         0.8194444444444444f,
                         0.8333333333333334f,
                         0.8472222222222222f,
                         0.861111111111111f,
                         0.875f,
                         0.8888888888888888f,
                         0.9027777777777777f,
                         0.9166666666666665f,
                         0.9305555555555555f,
                         0.9444444444444444f,
                         0.9583333333333333f,
                         0.9722222222222221f,
                         0.986111111111111f,
                         1};

// colormap: Jet
static float jet_r[] = {0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.00588235294117645f,
                        0.02156862745098032f,
                        0.03725490196078418f,
                        0.05294117647058827f,
                        0.06862745098039214f,
                        0.084313725490196f,
                        0.1000000000000001f,
                        0.115686274509804f,
                        0.1313725490196078f,
                        0.1470588235294117f,
                        0.1627450980392156f,
                        0.1784313725490196f,
                        0.1941176470588235f,
                        0.2098039215686274f,
                        0.2254901960784315f,
                        0.2411764705882353f,
                        0.2568627450980392f,
                        0.2725490196078431f,
                        0.2882352941176469f,
                        0.303921568627451f,
                        0.3196078431372549f,
                        0.3352941176470587f,
                        0.3509803921568628f,
                        0.3666666666666667f,
                        0.3823529411764706f,
                        0.3980392156862744f,
                        0.4137254901960783f,
                        0.4294117647058824f,
                        0.4450980392156862f,
                        0.4607843137254901f,
                        0.4764705882352942f,
                        0.4921568627450981f,
                        0.5078431372549019f,
                        0.5235294117647058f,
                        0.5392156862745097f,
                        0.5549019607843135f,
                        0.5705882352941174f,
                        0.5862745098039217f,
                        0.6019607843137256f,
                        0.6176470588235294f,
                        0.6333333333333333f,
                        0.6490196078431372f,
                        0.664705882352941f,
                        0.6803921568627449f,
                        0.6960784313725492f,
                        0.7117647058823531f,
                        0.7274509803921569f,
                        0.7431372549019608f,
                        0.7588235294117647f,
                        0.7745098039215685f,
                        0.7901960784313724f,
                        0.8058823529411763f,
                        0.8215686274509801f,
                        0.8372549019607844f,
                        0.8529411764705883f,
                        0.8686274509803922f,
                        0.884313725490196f,
                        0.8999999999999999f,
                        0.9156862745098038f,
                        0.9313725490196076f,
                        0.947058823529412f,
                        0.9627450980392158f,
                        0.9784313725490197f,
                        0.9941176470588236f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9862745098039216f,
                        0.9705882352941178f,
                        0.9549019607843139f,
                        0.93921568627451f,
                        0.9235294117647062f,
                        0.9078431372549018f,
                        0.892156862745098f,
                        0.8764705882352941f,
                        0.8607843137254902f,
                        0.8450980392156864f,
                        0.8294117647058825f,
                        0.8137254901960786f,
                        0.7980392156862743f,
                        0.7823529411764705f,
                        0.7666666666666666f,
                        0.7509803921568627f,
                        0.7352941176470589f,
                        0.719607843137255f,
                        0.7039215686274511f,
                        0.6882352941176473f,
                        0.6725490196078434f,
                        0.6568627450980391f,
                        0.6411764705882352f,
                        0.6254901960784314f,
                        0.6098039215686275f,
                        0.5941176470588236f,
                        0.5784313725490198f,
                        0.5627450980392159f,
                        0.5470588235294116f,
                        0.5313725490196077f,
                        0.5156862745098039f,
                        0.5f};

static float jet_g[] = {0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.001960784313725483f,
                        0.01764705882352935f,
                        0.03333333333333333f,
                        0.0490196078431373f,
                        0.06470588235294117f,
                        0.08039215686274503f,
                        0.09607843137254901f,
                        0.111764705882353f,
                        0.1274509803921569f,
                        0.1431372549019607f,
                        0.1588235294117647f,
                        0.1745098039215687f,
                        0.1901960784313725f,
                        0.2058823529411764f,
                        0.2215686274509804f,
                        0.2372549019607844f,
                        0.2529411764705882f,
                        0.2686274509803921f,
                        0.2843137254901961f,
                        0.3f,
                        0.3156862745098039f,
                        0.3313725490196078f,
                        0.3470588235294118f,
                        0.3627450980392157f,
                        0.3784313725490196f,
                        0.3941176470588235f,
                        0.4098039215686274f,
                        0.4254901960784314f,
                        0.4411764705882353f,
                        0.4568627450980391f,
                        0.4725490196078431f,
                        0.4882352941176471f,
                        0.503921568627451f,
                        0.5196078431372548f,
                        0.5352941176470587f,
                        0.5509803921568628f,
                        0.5666666666666667f,
                        0.5823529411764705f,
                        0.5980392156862746f,
                        0.6137254901960785f,
                        0.6294117647058823f,
                        0.6450980392156862f,
                        0.6607843137254901f,
                        0.6764705882352942f,
                        0.692156862745098f,
                        0.7078431372549019f,
                        0.723529411764706f,
                        0.7392156862745098f,
                        0.7549019607843137f,
                        0.7705882352941176f,
                        0.7862745098039214f,
                        0.8019607843137255f,
                        0.8176470588235294f,
                        0.8333333333333333f,
                        0.8490196078431373f,
                        0.8647058823529412f,
                        0.8803921568627451f,
                        0.8960784313725489f,
                        0.9117647058823528f,
                        0.9274509803921569f,
                        0.9431372549019608f,
                        0.9588235294117646f,
                        0.9745098039215687f,
                        0.9901960784313726f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9901960784313726f,
                        0.9745098039215687f,
                        0.9588235294117649f,
                        0.943137254901961f,
                        0.9274509803921571f,
                        0.9117647058823528f,
                        0.8960784313725489f,
                        0.8803921568627451f,
                        0.8647058823529412f,
                        0.8490196078431373f,
                        0.8333333333333335f,
                        0.8176470588235296f,
                        0.8019607843137253f,
                        0.7862745098039214f,
                        0.7705882352941176f,
                        0.7549019607843137f,
                        0.7392156862745098f,
                        0.723529411764706f,
                        0.7078431372549021f,
                        0.6921568627450982f,
                        0.6764705882352944f,
                        0.6607843137254901f,
                        0.6450980392156862f,
                        0.6294117647058823f,
                        0.6137254901960785f,
                        0.5980392156862746f,
                        0.5823529411764707f,
                        0.5666666666666669f,
                        0.5509803921568626f,
                        0.5352941176470587f,
                        0.5196078431372548f,
                        0.503921568627451f,
                        0.4882352941176471f,
                        0.4725490196078432f,
                        0.4568627450980394f,
                        0.4411764705882355f,
                        0.4254901960784316f,
                        0.4098039215686273f,
                        0.3941176470588235f,
                        0.3784313725490196f,
                        0.3627450980392157f,
                        0.3470588235294119f,
                        0.331372549019608f,
                        0.3156862745098041f,
                        0.2999999999999998f,
                        0.284313725490196f,
                        0.2686274509803921f,
                        0.2529411764705882f,
                        0.2372549019607844f,
                        0.2215686274509805f,
                        0.2058823529411766f,
                        0.1901960784313728f,
                        0.1745098039215689f,
                        0.1588235294117646f,
                        0.1431372549019607f,
                        0.1274509803921569f,
                        0.111764705882353f,
                        0.09607843137254912f,
                        0.08039215686274526f,
                        0.06470588235294139f,
                        0.04901960784313708f,
                        0.03333333333333321f,
                        0.01764705882352935f,
                        0.001960784313725483f,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0};

static float jet_b[] = {0.5f,
                        0.5156862745098039f,
                        0.5313725490196078f,
                        0.5470588235294118f,
                        0.5627450980392157f,
                        0.5784313725490196f,
                        0.5941176470588235f,
                        0.6098039215686275f,
                        0.6254901960784314f,
                        0.6411764705882352f,
                        0.6568627450980392f,
                        0.6725490196078432f,
                        0.6882352941176471f,
                        0.7039215686274509f,
                        0.7196078431372549f,
                        0.7352941176470589f,
                        0.7509803921568627f,
                        0.7666666666666666f,
                        0.7823529411764706f,
                        0.7980392156862746f,
                        0.8137254901960784f,
                        0.8294117647058823f,
                        0.8450980392156863f,
                        0.8607843137254902f,
                        0.8764705882352941f,
                        0.892156862745098f,
                        0.907843137254902f,
                        0.9235294117647059f,
                        0.9392156862745098f,
                        0.9549019607843137f,
                        0.9705882352941176f,
                        0.9862745098039216f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9941176470588236f,
                        0.9784313725490197f,
                        0.9627450980392158f,
                        0.9470588235294117f,
                        0.9313725490196079f,
                        0.915686274509804f,
                        0.8999999999999999f,
                        0.884313725490196f,
                        0.8686274509803922f,
                        0.8529411764705883f,
                        0.8372549019607844f,
                        0.8215686274509804f,
                        0.8058823529411765f,
                        0.7901960784313726f,
                        0.7745098039215685f,
                        0.7588235294117647f,
                        0.7431372549019608f,
                        0.7274509803921569f,
                        0.7117647058823531f,
                        0.696078431372549f,
                        0.6803921568627451f,
                        0.6647058823529413f,
                        0.6490196078431372f,
                        0.6333333333333333f,
                        0.6176470588235294f,
                        0.6019607843137256f,
                        0.5862745098039217f,
                        0.5705882352941176f,
                        0.5549019607843138f,
                        0.5392156862745099f,
                        0.5235294117647058f,
                        0.5078431372549019f,
                        0.4921568627450981f,
                        0.4764705882352942f,
                        0.4607843137254903f,
                        0.4450980392156865f,
                        0.4294117647058826f,
                        0.4137254901960783f,
                        0.3980392156862744f,
                        0.3823529411764706f,
                        0.3666666666666667f,
                        0.3509803921568628f,
                        0.335294117647059f,
                        0.3196078431372551f,
                        0.3039215686274508f,
                        0.2882352941176469f,
                        0.2725490196078431f,
                        0.2568627450980392f,
                        0.2411764705882353f,
                        0.2254901960784315f,
                        0.2098039215686276f,
                        0.1941176470588237f,
                        0.1784313725490199f,
                        0.1627450980392156f,
                        0.1470588235294117f,
                        0.1313725490196078f,
                        0.115686274509804f,
                        0.1000000000000001f,
                        0.08431372549019622f,
                        0.06862745098039236f,
                        0.05294117647058805f,
                        0.03725490196078418f,
                        0.02156862745098032f,
                        0.00588235294117645f,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0};

// colormap: winter
static float winter_r[] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                           0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
static float winter_g[] = {0.0f, 0.1f, 0.2f, 0.3f, 0.4f, 0.5f,
                           0.6f, 0.7f, 0.8f, 0.9f, 1.0f,};
static float winter_b[] = {1.0,  0.95f, 0.9f, 0.85f, 0.8f, 0.75f,
                           0.7f, 0.65f, 0.6f, 0.55f, 0.5f};

// colormap: rainbow
static float rainbow_r[] = {1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            0.9365079365079367f,
                            0.8571428571428572f,
                            0.7777777777777777f,
                            0.6984126984126986f,
                            0.6190476190476191f,
                            0.53968253968254f,
                            0.4603174603174605f,
                            0.3809523809523814f,
                            0.3015873015873018f,
                            0.2222222222222223f,
                            0.1428571428571432f,
                            0.06349206349206415f,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0.03174603174603208f,
                            0.08465608465608465f,
                            0.1375661375661377f,
                            0.1904761904761907f,
                            0.2433862433862437f,
                            0.2962962962962963f,
                            0.3492063492063493f,
                            0.4021164021164023f,
                            0.4550264550264553f,
                            0.5079365079365079f,
                            0.5608465608465609f,
                            0.6137566137566139f,
                            0.666666666666667f};

static float rainbow_g[] = {0,
                            0.03968253968253968f,
                            0.07936507936507936f,
                            0.119047619047619f,
                            0.1587301587301587f,
                            0.1984126984126984f,
                            0.2380952380952381f,
                            0.2777777777777778f,
                            0.3174603174603174f,
                            0.3571428571428571f,
                            0.3968253968253968f,
                            0.4365079365079365f,
                            0.4761904761904762f,
                            0.5158730158730158f,
                            0.5555555555555556f,
                            0.5952380952380952f,
                            0.6349206349206349f,
                            0.6746031746031745f,
                            0.7142857142857142f,
                            0.753968253968254f,
                            0.7936507936507936f,
                            0.8333333333333333f,
                            0.873015873015873f,
                            0.9126984126984127f,
                            0.9523809523809523f,
                            0.992063492063492f,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            0.9841269841269842f,
                            0.9047619047619047f,
                            0.8253968253968256f,
                            0.7460317460317465f,
                            0.666666666666667f,
                            0.587301587301587f,
                            0.5079365079365079f,
                            0.4285714285714288f,
                            0.3492063492063493f,
                            0.2698412698412698f,
                            0.1904761904761907f,
                            0.1111111111111116f,
                            0.03174603174603208f,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0};

static float rainbow_b[] = {0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0.01587301587301582f,
                            0.09523809523809534f,
                            0.1746031746031744f,
                            0.2539682539682535f,
                            0.333333333333333f,
                            0.412698412698413f,
                            0.4920634920634921f,
                            0.5714285714285712f,
                            0.6507936507936507f,
                            0.7301587301587302f,
                            0.8095238095238093f,
                            0.8888888888888884f,
                            0.9682539682539679f,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1,
                            1};
// colormap: ocean
static float ocean_r[] = {0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0.04761904761904762f,
                          0.09523809523809523f,
                          0.1428571428571428f,
                          0.1904761904761905f,
                          0.2380952380952381f,
                          0.2857142857142857f,
                          0.3333333333333333f,
                          0.3809523809523809f,
                          0.4285714285714285f,
                          0.4761904761904762f,
                          0.5238095238095238f,
                          0.5714285714285714f,
                          0.6190476190476191f,
                          0.6666666666666666f,
                          0.7142857142857143f,
                          0.7619047619047619f,
                          0.8095238095238095f,
                          0.8571428571428571f,
                          0.9047619047619048f,
                          0.9523809523809523f,
                          1};

static float ocean_g[] = {0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0.02380952380952381f,
                          0.04761904761904762f,
                          0.07142857142857142f,
                          0.09523809523809523f,
                          0.119047619047619f,
                          0.1428571428571428f,
                          0.1666666666666667f,
                          0.1904761904761905f,
                          0.2142857142857143f,
                          0.2380952380952381f,
                          0.2619047619047619f,
                          0.2857142857142857f,
                          0.3095238095238095f,
                          0.3333333333333333f,
                          0.3571428571428572f,
                          0.3809523809523809f,
                          0.4047619047619048f,
                          0.4285714285714285f,
                          0.4523809523809524f,
                          0.4761904761904762f,
                          0.5f,
                          0.5238095238095238f,
                          0.5476190476190477f,
                          0.5714285714285714f,
                          0.5952380952380952f,
                          0.6190476190476191f,
                          0.6428571428571429f,
                          0.6666666666666666f,
                          0.6904761904761905f,
                          0.7142857142857143f,
                          0.7380952380952381f,
                          0.7619047619047619f,
                          0.7857142857142857f,
                          0.8095238095238095f,
                          0.8333333333333334f,
                          0.8571428571428571f,
                          0.8809523809523809f,
                          0.9047619047619048f,
                          0.9285714285714286f,
                          0.9523809523809523f,
                          0.9761904761904762f,
                          1};

static float ocean_b[] = {0,
                          0.01587301587301587f,
                          0.03174603174603174f,
                          0.04761904761904762f,
                          0.06349206349206349f,
                          0.07936507936507936f,
                          0.09523809523809523f,
                          0.1111111111111111f,
                          0.126984126984127f,
                          0.1428571428571428f,
                          0.1587301587301587f,
                          0.1746031746031746f,
                          0.1904761904761905f,
                          0.2063492063492063f,
                          0.2222222222222222f,
                          0.2380952380952381f,
                          0.253968253968254f,
                          0.2698412698412698f,
                          0.2857142857142857f,
                          0.3015873015873016f,
                          0.3174603174603174f,
                          0.3333333333333333f,
                          0.3492063492063492f,
                          0.3650793650793651f,
                          0.3809523809523809f,
                          0.3968253968253968f,
                          0.4126984126984127f,
                          0.4285714285714285f,
                          0.4444444444444444f,
                          0.4603174603174603f,
                          0.4761904761904762f,
                          0.492063492063492f,
                          0.5079365079365079f,
                          0.5238095238095238f,
                          0.5396825396825397f,
                          0.5555555555555556f,
                          0.5714285714285714f,
                          0.5873015873015873f,
                          0.6031746031746031f,
                          0.6190476190476191f,
                          0.6349206349206349f,
                          0.6507936507936508f,
                          0.6666666666666666f,
                          0.6825396825396826f,
                          0.6984126984126984f,
                          0.7142857142857143f,
                          0.7301587301587301f,
                          0.746031746031746f,
                          0.7619047619047619f,
                          0.7777777777777778f,
                          0.7936507936507936f,
                          0.8095238095238095f,
                          0.8253968253968254f,
                          0.8412698412698413f,
                          0.8571428571428571f,
                          0.873015873015873f,
                          0.8888888888888888f,
                          0.9047619047619048f,
                          0.9206349206349206f,
                          0.9365079365079365f,
                          0.9523809523809523f,
                          0.9682539682539683f,
                          0.9841269841269841f,
                          1};

// colormap: summer
static float summer_r[] = {0,
                           0.01587301587301587f,
                           0.03174603174603174f,
                           0.04761904761904762f,
                           0.06349206349206349f,
                           0.07936507936507936f,
                           0.09523809523809523f,
                           0.1111111111111111f,
                           0.126984126984127f,
                           0.1428571428571428f,
                           0.1587301587301587f,
                           0.1746031746031746f,
                           0.1904761904761905f,
                           0.2063492063492063f,
                           0.2222222222222222f,
                           0.2380952380952381f,
                           0.253968253968254f,
                           0.2698412698412698f,
                           0.2857142857142857f,
                           0.3015873015873016f,
                           0.3174603174603174f,
                           0.3333333333333333f,
                           0.3492063492063492f,
                           0.3650793650793651f,
                           0.3809523809523809f,
                           0.3968253968253968f,
                           0.4126984126984127f,
                           0.4285714285714285f,
                           0.4444444444444444f,
                           0.4603174603174603f,
                           0.4761904761904762f,
                           0.492063492063492f,
                           0.5079365079365079f,
                           0.5238095238095238f,
                           0.5396825396825397f,
                           0.5555555555555556f,
                           0.5714285714285714f,
                           0.5873015873015873f,
                           0.6031746031746031f,
                           0.6190476190476191f,
                           0.6349206349206349f,
                           0.6507936507936508f,
                           0.6666666666666666f,
                           0.6825396825396826f,
                           0.6984126984126984f,
                           0.7142857142857143f,
                           0.7301587301587301f,
                           0.746031746031746f,
                           0.7619047619047619f,
                           0.7777777777777778f,
                           0.7936507936507936f,
                           0.8095238095238095f,
                           0.8253968253968254f,
                           0.8412698412698413f,
                           0.8571428571428571f,
                           0.873015873015873f,
                           0.8888888888888888f,
                           0.9047619047619048f,
                           0.9206349206349206f,
                           0.9365079365079365f,
                           0.9523809523809523f,
                           0.9682539682539683f,
                           0.9841269841269841f,
                           1};

static float summer_g[] = {0.5f,
                           0.5079365079365079f,
                           0.5158730158730158f,
                           0.5238095238095238f,
                           0.5317460317460317f,
                           0.5396825396825397f,
                           0.5476190476190477f,
                           0.5555555555555556f,
                           0.5634920634920635f,
                           0.5714285714285714f,
                           0.5793650793650793f,
                           0.5873015873015873f,
                           0.5952380952380952f,
                           0.6031746031746031f,
                           0.6111111111111112f,
                           0.6190476190476191f,
                           0.626984126984127f,
                           0.6349206349206349f,
                           0.6428571428571428f,
                           0.6507936507936508f,
                           0.6587301587301587f,
                           0.6666666666666666f,
                           0.6746031746031746f,
                           0.6825396825396826f,
                           0.6904761904761905f,
                           0.6984126984126984f,
                           0.7063492063492063f,
                           0.7142857142857143f,
                           0.7222222222222222f,
                           0.7301587301587301f,
                           0.7380952380952381f,
                           0.746031746031746f,
                           0.753968253968254f,
                           0.7619047619047619f,
                           0.7698412698412698f,
                           0.7777777777777778f,
                           0.7857142857142857f,
                           0.7936507936507937f,
                           0.8015873015873016f,
                           0.8095238095238095f,
                           0.8174603174603174f,
                           0.8253968253968254f,
                           0.8333333333333333f,
                           0.8412698412698413f,
                           0.8492063492063492f,
                           0.8571428571428572f,
                           0.8650793650793651f,
                           0.873015873015873f,
                           0.8809523809523809f,
                           0.8888888888888888f,
                           0.8968253968253967f,
                           0.9047619047619048f,
                           0.9126984126984127f,
                           0.9206349206349207f,
                           0.9285714285714286f,
                           0.9365079365079365f,
                           0.9444444444444444f,
                           0.9523809523809523f,
                           0.9603174603174602f,
                           0.9682539682539683f,
                           0.9761904761904762f,
                           0.9841269841269842f,
                           0.9920634920634921f,
                           1};

static float summer_b[] = {
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f,
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f,
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f,
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f,
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f,
    0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f, 0.4f};

// colormap: spring
static float spring_r[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

static float spring_g[] = {0,
                           0.01587301587301587f,
                           0.03174603174603174f,
                           0.04761904761904762f,
                           0.06349206349206349f,
                           0.07936507936507936f,
                           0.09523809523809523f,
                           0.1111111111111111f,
                           0.126984126984127f,
                           0.1428571428571428f,
                           0.1587301587301587f,
                           0.1746031746031746f,
                           0.1904761904761905f,
                           0.2063492063492063f,
                           0.2222222222222222f,
                           0.2380952380952381f,
                           0.253968253968254f,
                           0.2698412698412698f,
                           0.2857142857142857f,
                           0.3015873015873016f,
                           0.3174603174603174f,
                           0.3333333333333333f,
                           0.3492063492063492f,
                           0.3650793650793651f,
                           0.3809523809523809f,
                           0.3968253968253968f,
                           0.4126984126984127f,
                           0.4285714285714285f,
                           0.4444444444444444f,
                           0.4603174603174603f,
                           0.4761904761904762f,
                           0.492063492063492f,
                           0.5079365079365079f,
                           0.5238095238095238f,
                           0.5396825396825397f,
                           0.5555555555555556f,
                           0.5714285714285714f,
                           0.5873015873015873f,
                           0.6031746031746031f,
                           0.6190476190476191f,
                           0.6349206349206349f,
                           0.6507936507936508f,
                           0.6666666666666666f,
                           0.6825396825396826f,
                           0.6984126984126984f,
                           0.7142857142857143f,
                           0.7301587301587301f,
                           0.746031746031746f,
                           0.7619047619047619f,
                           0.7777777777777778f,
                           0.7936507936507936f,
                           0.8095238095238095f,
                           0.8253968253968254f,
                           0.8412698412698413f,
                           0.8571428571428571f,
                           0.873015873015873f,
                           0.8888888888888888f,
                           0.9047619047619048f,
                           0.9206349206349206f,
                           0.9365079365079365f,
                           0.9523809523809523f,
                           0.9682539682539683f,
                           0.9841269841269841f,
                           1};

static float spring_b[] = {1,
                           0.9841269841269842f,
                           0.9682539682539683f,
                           0.9523809523809523f,
                           0.9365079365079365f,
                           0.9206349206349207f,
                           0.9047619047619048f,
                           0.8888888888888888f,
                           0.873015873015873f,
                           0.8571428571428572f,
                           0.8412698412698413f,
                           0.8253968253968254f,
                           0.8095238095238095f,
                           0.7936507936507937f,
                           0.7777777777777778f,
                           0.7619047619047619f,
                           0.746031746031746f,
                           0.7301587301587302f,
                           0.7142857142857143f,
                           0.6984126984126984f,
                           0.6825396825396826f,
                           0.6666666666666667f,
                           0.6507936507936508f,
                           0.6349206349206349f,
                           0.6190476190476191f,
                           0.6031746031746033f,
                           0.5873015873015873f,
                           0.5714285714285714f,
                           0.5555555555555556f,
                           0.5396825396825398f,
                           0.5238095238095238f,
                           0.5079365079365079f,
                           0.4920634920634921f,
                           0.4761904761904762f,
                           0.4603174603174603f,
                           0.4444444444444444f,
                           0.4285714285714286f,
                           0.4126984126984127f,
                           0.3968253968253969f,
                           0.3809523809523809f,
                           0.3650793650793651f,
                           0.3492063492063492f,
                           0.3333333333333334f,
                           0.3174603174603174f,
                           0.3015873015873016f,
                           0.2857142857142857f,
                           0.2698412698412699f,
                           0.253968253968254f,
                           0.2380952380952381f,
                           0.2222222222222222f,
                           0.2063492063492064f,
                           0.1904761904761905f,
                           0.1746031746031746f,
                           0.1587301587301587f,
                           0.1428571428571429f,
                           0.126984126984127f,
                           0.1111111111111112f,
                           0.09523809523809523f,
                           0.07936507936507942f,
                           0.06349206349206349f,
                           0.04761904761904767f,
                           0.03174603174603174f,
                           0.01587301587301593f,
                           0};

// colormap: cool

static float cool_r[] = {0,
                         0.01587301587301587f,
                         0.03174603174603174f,
                         0.04761904761904762f,
                         0.06349206349206349f,
                         0.07936507936507936f,
                         0.09523809523809523f,
                         0.1111111111111111f,
                         0.126984126984127f,
                         0.1428571428571428f,
                         0.1587301587301587f,
                         0.1746031746031746f,
                         0.1904761904761905f,
                         0.2063492063492063f,
                         0.2222222222222222f,
                         0.2380952380952381f,
                         0.253968253968254f,
                         0.2698412698412698f,
                         0.2857142857142857f,
                         0.3015873015873016f,
                         0.3174603174603174f,
                         0.3333333333333333f,
                         0.3492063492063492f,
                         0.3650793650793651f,
                         0.3809523809523809f,
                         0.3968253968253968f,
                         0.4126984126984127f,
                         0.4285714285714285f,
                         0.4444444444444444f,
                         0.4603174603174603f,
                         0.4761904761904762f,
                         0.492063492063492f,
                         0.5079365079365079f,
                         0.5238095238095238f,
                         0.5396825396825397f,
                         0.5555555555555556f,
                         0.5714285714285714f,
                         0.5873015873015873f,
                         0.6031746031746031f,
                         0.6190476190476191f,
                         0.6349206349206349f,
                         0.6507936507936508f,
                         0.6666666666666666f,
                         0.6825396825396826f,
                         0.6984126984126984f,
                         0.7142857142857143f,
                         0.7301587301587301f,
                         0.746031746031746f,
                         0.7619047619047619f,
                         0.7777777777777778f,
                         0.7936507936507936f,
                         0.8095238095238095f,
                         0.8253968253968254f,
                         0.8412698412698413f,
                         0.8571428571428571f,
                         0.873015873015873f,
                         0.8888888888888888f,
                         0.9047619047619048f,
                         0.9206349206349206f,
                         0.9365079365079365f,
                         0.9523809523809523f,
                         0.9682539682539683f,
                         0.9841269841269841f,
                         1};

static float cool_g[] = {1,
                         0.9841269841269842f,
                         0.9682539682539683f,
                         0.9523809523809523f,
                         0.9365079365079365f,
                         0.9206349206349207f,
                         0.9047619047619048f,
                         0.8888888888888888f,
                         0.873015873015873f,
                         0.8571428571428572f,
                         0.8412698412698413f,
                         0.8253968253968254f,
                         0.8095238095238095f,
                         0.7936507936507937f,
                         0.7777777777777778f,
                         0.7619047619047619f,
                         0.746031746031746f,
                         0.7301587301587302f,
                         0.7142857142857143f,
                         0.6984126984126984f,
                         0.6825396825396826f,
                         0.6666666666666667f,
                         0.6507936507936508f,
                         0.6349206349206349f,
                         0.6190476190476191f,
                         0.6031746031746033f,
                         0.5873015873015873f,
                         0.5714285714285714f,
                         0.5555555555555556f,
                         0.5396825396825398f,
                         0.5238095238095238f,
                         0.5079365079365079f,
                         0.4920634920634921f,
                         0.4761904761904762f,
                         0.4603174603174603f,
                         0.4444444444444444f,
                         0.4285714285714286f,
                         0.4126984126984127f,
                         0.3968253968253969f,
                         0.3809523809523809f,
                         0.3650793650793651f,
                         0.3492063492063492f,
                         0.3333333333333334f,
                         0.3174603174603174f,
                         0.3015873015873016f,
                         0.2857142857142857f,
                         0.2698412698412699f,
                         0.253968253968254f,
                         0.2380952380952381f,
                         0.2222222222222222f,
                         0.2063492063492064f,
                         0.1904761904761905f,
                         0.1746031746031746f,
                         0.1587301587301587f,
                         0.1428571428571429f,
                         0.126984126984127f,
                         0.1111111111111112f,
                         0.09523809523809523f,
                         0.07936507936507942f,
                         0.06349206349206349f,
                         0.04761904761904767f,
                         0.03174603174603174f,
                         0.01587301587301593f,
                         0};

static float cool_b[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

// colormap: hsv
static float hsv_r[] = {1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9523809523809526f,
                        0.8571428571428568f,
                        0.7619047619047614f,
                        0.6666666666666665f,
                        0.5714285714285716f,
                        0.4761904761904763f,
                        0.3809523809523805f,
                        0.2857142857142856f,
                        0.1904761904761907f,
                        0.0952380952380949f,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.09523809523809557f,
                        0.1904761904761905f,
                        0.2857142857142854f,
                        0.3809523809523809f,
                        0.4761904761904765f,
                        0.5714285714285714f,
                        0.6666666666666663f,
                        0.7619047619047619f,
                        0.8571428571428574f,
                        0.9523809523809523f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1};

static float hsv_g[] = {0,
                        0.09523809523809523f,
                        0.1904761904761905f,
                        0.2857142857142857f,
                        0.3809523809523809f,
                        0.4761904761904762f,
                        0.5714285714285714f,
                        0.6666666666666666f,
                        0.7619047619047619f,
                        0.8571428571428571f,
                        0.9523809523809523f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9523809523809526f,
                        0.8571428571428577f,
                        0.7619047619047619f,
                        0.6666666666666665f,
                        0.5714285714285716f,
                        0.4761904761904767f,
                        0.3809523809523814f,
                        0.2857142857142856f,
                        0.1904761904761907f,
                        0.09523809523809579f,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0};

static float hsv_b[] = {0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.09523809523809523f,
                        0.1904761904761905f,
                        0.2857142857142857f,
                        0.3809523809523809f,
                        0.4761904761904762f,
                        0.5714285714285714f,
                        0.6666666666666666f,
                        0.7619047619047619f,
                        0.8571428571428571f,
                        0.9523809523809523f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        0.9523809523809526f,
                        0.8571428571428577f,
                        0.7619047619047614f,
                        0.6666666666666665f,
                        0.5714285714285716f,
                        0.4761904761904767f,
                        0.3809523809523805f,
                        0.2857142857142856f,
                        0.1904761904761907f,
                        0.09523809523809579f,
                        0};

// colormap: pink
static float pink_r[] = {0,
                         0.1571348402636772f,
                         0.2222222222222222f,
                         0.2721655269759087f,
                         0.3142696805273544f,
                         0.3513641844631533f,
                         0.3849001794597505f,
                         0.415739709641549f,
                         0.4444444444444444f,
                         0.4714045207910317f,
                         0.4969039949999532f,
                         0.5211573066470477f,
                         0.5443310539518174f,
                         0.5665577237325317f,
                         0.5879447357921312f,
                         0.6085806194501846f,
                         0.6285393610547089f,
                         0.6478835438717f,
                         0.6666666666666666f,
                         0.6849348892187751f,
                         0.7027283689263065f,
                         0.7200822998230956f,
                         0.7370277311900888f,
                         0.753592220347252f,
                         0.7663560447348133f,
                         0.7732293307186413f,
                         0.7800420555749596f,
                         0.7867957924694432f,
                         0.7934920476158722f,
                         0.8001322641986387f,
                         0.8067178260046388f,
                         0.8132500607904444f,
                         0.8197302434079591f,
                         0.8261595987094034f,
                         0.8325393042503717f,
                         0.8388704928078611f,
                         0.8451542547285166f,
                         0.8513916401208816f,
                         0.8575836609041332f,
                         0.8637312927246217f,
                         0.8698354767504924f,
                         0.8758971213537393f,
                         0.8819171036881968f,
                         0.8878962711712378f,
                         0.8938354428762595f,
                         0.8997354108424372f,
                         0.9055969413076769f,
                         0.9114207758701963f,
                         0.9172076325837248f,
                         0.9229582069908971f,
                         0.9286731730990523f,
                         0.9343531843023135f,
                         0.9399988742535192f,
                         0.9456108576893002f,
                         0.9511897312113418f,
                         0.9567360740266436f,
                         0.9622504486493763f,
                         0.9677334015667416f,
                         0.9731854638710686f,
                         0.9786071518602129f,
                         0.9839989676081821f,
                         0.9893613995077727f,
                         0.9946949227868761f,
                         1};

static float pink_g[] = {0,
                         0.1028688999747279f,
                         0.1454785934906616f,
                         0.1781741612749496f,
                         0.2057377999494559f,
                         0.2300218531141181f,
                         0.2519763153394848f,
                         0.2721655269759087f,
                         0.2909571869813232f,
                         0.3086066999241838f,
                         0.3253000243161777f,
                         0.3411775438127727f,
                         0.3563483225498992f,
                         0.3708990935094579f,
                         0.3849001794597505f,
                         0.3984095364447979f,
                         0.4114755998989117f,
                         0.4241393401869012f,
                         0.4364357804719847f,
                         0.4483951394230328f,
                         0.4600437062282361f,
                         0.4714045207910317f,
                         0.4824979096371639f,
                         0.4933419132673033f,
                         0.5091750772173156f,
                         0.5328701692569688f,
                         0.5555555555555556f,
                         0.5773502691896257f,
                         0.5983516452371671f,
                         0.6186404847588913f,
                         0.6382847385042254f,
                         0.6573421981221795f,
                         0.6758625033664688f,
                         0.6938886664887108f,
                         0.7114582486036499f,
                         0.7286042804780002f,
                         0.7453559924999299f,
                         0.7617394000445604f,
                         0.7777777777777778f,
                         0.7934920476158723f,
                         0.8089010988089465f,
                         0.8240220541217402f,
                         0.8388704928078611f,
                         0.8534606386520677f,
                         0.8678055195451838f,
                         0.8819171036881968f,
                         0.8958064164776166f,
                         0.9094836413191612f,
                         0.9172076325837248f,
                         0.9229582069908971f,
                         0.9286731730990523f,
                         0.9343531843023135f,
                         0.9399988742535192f,
                         0.9456108576893002f,
                         0.9511897312113418f,
                         0.9567360740266436f,
                         0.9622504486493763f,
                         0.9677334015667416f,
                         0.9731854638710686f,
                         0.9786071518602129f,
                         0.9839989676081821f,
                         0.9893613995077727f,
                         0.9946949227868761f,
                         1};

static float pink_b[] = {0,
                         0.1028688999747279f,
                         0.1454785934906616f,
                         0.1781741612749496f,
                         0.2057377999494559f,
                         0.2300218531141181f,
                         0.2519763153394848f,
                         0.2721655269759087f,
                         0.2909571869813232f,
                         0.3086066999241838f,
                         0.3253000243161777f,
                         0.3411775438127727f,
                         0.3563483225498992f,
                         0.3708990935094579f,
                         0.3849001794597505f,
                         0.3984095364447979f,
                         0.4114755998989117f,
                         0.4241393401869012f,
                         0.4364357804719847f,
                         0.4483951394230328f,
                         0.4600437062282361f,
                         0.4714045207910317f,
                         0.4824979096371639f,
                         0.4933419132673033f,
                         0.5039526306789697f,
                         0.5143444998736397f,
                         0.5245305283129621f,
                         0.5345224838248488f,
                         0.5443310539518174f,
                         0.5539659798925444f,
                         0.563436169819011f,
                         0.5727497953228163f,
                         0.5819143739626463f,
                         0.5909368402852788f,
                         0.5998236072282915f,
                         0.6085806194501846f,
                         0.6172133998483676f,
                         0.6257270902992705f,
                         0.6341264874742278f,
                         0.642416074439621f,
                         0.6506000486323554f,
                         0.6586823467062358f,
                         0.6666666666666666f,
                         0.6745564876468501f,
                         0.6823550876255453f,
                         0.6900655593423541f,
                         0.6976908246297114f,
                         0.7052336473499384f,
                         0.7237468644557459f,
                         0.7453559924999298f,
                         0.7663560447348133f,
                         0.7867957924694432f,
                         0.8067178260046388f,
                         0.8261595987094034f,
                         0.8451542547285166f,
                         0.8637312927246217f,
                         0.8819171036881968f,
                         0.8997354108424372f,
                         0.9172076325837248f,
                         0.9343531843023135f,
                         0.9511897312113418f,
                         0.9677334015667416f,
                         0.9839989676081821f,
                         1};

// colormap: hot
static float hot_r[] = {0,
                        0.03968253968253968f,
                        0.07936507936507936f,
                        0.119047619047619f,
                        0.1587301587301587f,
                        0.1984126984126984f,
                        0.2380952380952381f,
                        0.2777777777777778f,
                        0.3174603174603174f,
                        0.3571428571428571f,
                        0.3968253968253968f,
                        0.4365079365079365f,
                        0.4761904761904762f,
                        0.5158730158730158f,
                        0.5555555555555556f,
                        0.5952380952380952f,
                        0.6349206349206349f,
                        0.6746031746031745f,
                        0.7142857142857142f,
                        0.753968253968254f,
                        0.7936507936507936f,
                        0.8333333333333333f,
                        0.873015873015873f,
                        0.9126984126984127f,
                        0.9523809523809523f,
                        0.992063492063492f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1};

static float hot_g[] = {0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.03174603174603163f,
                        0.0714285714285714f,
                        0.1111111111111112f,
                        0.1507936507936507f,
                        0.1904761904761905f,
                        0.23015873015873f,
                        0.2698412698412698f,
                        0.3095238095238093f,
                        0.3492063492063491f,
                        0.3888888888888888f,
                        0.4285714285714284f,
                        0.4682539682539679f,
                        0.5079365079365079f,
                        0.5476190476190477f,
                        0.5873015873015872f,
                        0.6269841269841268f,
                        0.6666666666666665f,
                        0.7063492063492065f,
                        0.746031746031746f,
                        0.7857142857142856f,
                        0.8253968253968254f,
                        0.8650793650793651f,
                        0.9047619047619047f,
                        0.9444444444444442f,
                        0.984126984126984f,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1};

static float hot_b[] = {0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0.04761904761904745f,
                        0.1269841269841265f,
                        0.2063492063492056f,
                        0.2857142857142856f,
                        0.3650793650793656f,
                        0.4444444444444446f,
                        0.5238095238095237f,
                        0.6031746031746028f,
                        0.6825396825396828f,
                        0.7619047619047619f,
                        0.8412698412698409f,
                        0.92063492063492f,
                        1};
// colormap: parula
static float parula_r[] = {0.2078f, 0.0118f, 0.0784f, 0.0235f, 0.2196f,
                           0.5725f, 0.8510f, 0.9882f, 0.9765f};
static float parula_g[] = {0.1647f, 0.3882f, 0.5216f, 0.6549f, 0.7255f,
                           0.7490f, 0.7294f, 0.8078f, 0.9843f};
static float parula_b[] = {0.5294f, 0.8824f, 0.8314f, 0.7765f, 0.6196f,
                           0.4510f, 0.3373f, 0.1804f, 0.0549f};

RSColorMapper::RSColorMapper(RS_COLOR_MAP_TYPE colormapType, float scale, bool isHigh) {
    m_colormapType = colormapType;
    m_scale = scale;
    m_isHigh = isHigh;
}

int RSColorMapper::m_applyColorMap(
    std::vector<float> &srcArray, const float rangeMin, const float rangeMax,
    std::vector<st_ColorMapRGB_UCHAR> &dstColorArray,
    st_ColorMapRGB_UCHAR &bottomColor) {
    dstColorArray.clear();
    if (srcArray.size() == 0) {
        return 0;
    }

    // 将范围外的数值改为边界值
    int iterSrcArray;
    // for (iterSrcArray = 0; iterSrcArray < srcArray.size(); ++iterSrcArray)
    int totalSrcArraySize = srcArray.size();
    for (iterSrcArray = 0; iterSrcArray < totalSrcArraySize; ++iterSrcArray) {
        if (srcArray[iterSrcArray] < rangeMin) {
            srcArray[iterSrcArray] = rangeMin;
        }
        else if (srcArray[iterSrcArray] > rangeMax) {
            srcArray[iterSrcArray] = rangeMax;
        }
    }

    int ret = 0;
    switch (m_colormapType) {
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_AUTUMN_TYPE: {
            int interpCnt = sizeof(autum_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, autum_r, autum_g, autum_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_BONE_TYPE: {
            int interpCnt = sizeof(bone_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, bone_r, bone_g, bone_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_JET_TYPE: {
            int interpCnt = sizeof(jet_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, jet_r, jet_g, jet_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_WINTER_TYPE: {
            int interpCnt = sizeof(winter_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, winter_r, winter_g, winter_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_RAINBOW_TYPE: {
            int interpCnt = sizeof(rainbow_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, rainbow_r, rainbow_g, rainbow_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_OCEAN_TYPE: {
            int interpCnt = sizeof(ocean_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, ocean_r, ocean_g, ocean_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_SUMMER_TYPE: {
            int interpCnt = sizeof(summer_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, summer_r, summer_g, summer_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_SPRING_TYPE: {
            int interpCnt = sizeof(spring_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, spring_r, spring_g, spring_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_COOL_TYPE: {
            int interpCnt = sizeof(cool_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, cool_r, cool_g, cool_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_HSV_TYPE: {
            int interpCnt = sizeof(hsv_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, hsv_r, hsv_g, hsv_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_PINK_TYPE: {
            int interpCnt = sizeof(pink_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, pink_r, pink_g, pink_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_HOT_TYPE: {
            int interpCnt = sizeof(hot_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, hot_r, hot_g, hot_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_PARULA_TYPE: {
            int interpCnt = sizeof(parula_r) / sizeof(float);

            ret = m_colorMap(srcArray, dstColorArray, bottomColor, interpCnt, parula_r, parula_g, parula_b);

            break;
        }
        default: {
            std::cout << "Not Support Color Map Type !" << std::endl;
            break;
        }
    }  // switch

    return ret;
}

int RSColorMapper::m_applyColorMap(
    std::vector<std::vector<float>> &srcArray, const std::vector<float> &aplhas,
    const std::vector<float> &rangeMins, const std::vector<float> &rangeMaxs,
    std::vector<st_ColorMapRGB_UCHAR> &dstColorArray,
    st_ColorMapRGB_UCHAR &bottomColor) {
    dstColorArray.clear();
    if (srcArray.size() == 0) {
        return 0;
    }

    int iterMapperDims, iterSrcArray;
    int totalSrcArraySize1 = srcArray[0].size();
    int totalSrcArraySize2 = srcArray.size();
    for (iterSrcArray = 0; iterSrcArray < totalSrcArraySize1; ++iterSrcArray) {
        for (iterMapperDims = 0; iterMapperDims < totalSrcArraySize2; ++iterMapperDims) {
            if (srcArray[iterMapperDims][iterSrcArray] < rangeMins[iterMapperDims]) {
                srcArray[iterMapperDims][iterSrcArray] = rangeMins[iterMapperDims];
            }
            else if (srcArray[iterMapperDims][iterSrcArray] > rangeMaxs[iterMapperDims]) {
                srcArray[iterMapperDims][iterSrcArray] = rangeMaxs[iterMapperDims];
            }
        }
    }

    int ret = 0;
    switch (m_colormapType) {
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_AUTUMN_TYPE: {
            int interpCnt = sizeof(autum_r) / sizeof(float);
            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, autum_r, autum_g, autum_b);
            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_BONE_TYPE: {
            int interpCnt = sizeof(bone_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, bone_r, bone_g, bone_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_JET_TYPE: {
            int interpCnt = sizeof(jet_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, jet_r, jet_g, jet_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_WINTER_TYPE: {
            int interpCnt = sizeof(winter_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                             winter_r, winter_g, winter_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_RAINBOW_TYPE: {
            int interpCnt = sizeof(rainbow_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                             rainbow_r, rainbow_g, rainbow_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_OCEAN_TYPE: {
            int interpCnt = sizeof(ocean_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                       ocean_r, ocean_g, ocean_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_SUMMER_TYPE: {
            int interpCnt = sizeof(summer_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                             summer_r, summer_g, summer_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_SPRING_TYPE: {
            int interpCnt = sizeof(spring_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                             spring_r, spring_g, spring_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_COOL_TYPE: {
            int interpCnt = sizeof(cool_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, cool_r, cool_g, cool_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_HSV_TYPE: {
            int interpCnt = sizeof(hsv_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, hsv_r, hsv_g, hsv_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_PINK_TYPE: {
            int interpCnt = sizeof(pink_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, pink_r, pink_g, pink_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_HOT_TYPE: {
            int interpCnt = sizeof(hot_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt, hot_r, hot_g, hot_b);

            break;
        }
        case RS_COLOR_MAP_TYPE::RS_POINTCLOUD_COLOR_MAP_PARULA_TYPE: {
            int interpCnt = sizeof(parula_r) / sizeof(float);

            ret = m_colorMap(srcArray, aplhas, dstColorArray, bottomColor, interpCnt,
                             parula_r, parula_g, parula_b);

            break;
        }
        default: {
            std::cout << "Not Support Color Map Type !" << std::endl;
            break;
        }
    }  // switch

    return ret;
}

int RSColorMapper::m_linerInterp(int lowIndex, int highIndex, float index,
                                 float *pColorR, float *pColorG, float *pColorB,
                                 float &r, float &g, float &b) {
    // std::cout << "lowIndex = " << lowIndex << ", highIndex = " << highIndex <<
    // ", index = " << index << std::endl;

    r = (index - lowIndex) * (pColorR[highIndex] - pColorR[lowIndex]) +
      pColorR[lowIndex];
    g = (index - lowIndex) * (pColorG[highIndex] - pColorG[lowIndex]) +
      pColorG[lowIndex];
    b = (index - lowIndex) * (pColorB[highIndex] - pColorB[lowIndex]) +
      pColorB[lowIndex];

    return 0;
}

int RSColorMapper::m_colorMap(const std::vector<float> &srcArray,
                              std::vector<st_ColorMapRGB_UCHAR> &dstColorArray,
                              st_ColorMapRGB_UCHAR &bottomColor, int interpCnt,
                              float *pColorR, float *pColorG, float *pColorB) {
    dstColorArray.resize(srcArray.size());

    float minVal = std::numeric_limits<float>::max();
    float maxVal = std::numeric_limits<float>::min();
    int iter;
    int srcArraySize = srcArray.size();
    // for (iter = 0; iter < srcArray.size(); ++iter)
    for (iter = 0; iter < srcArraySize; ++iter) {
        if (srcArray[iter] < minVal) {
            minVal = srcArray[iter];
        }

        if (srcArray[iter] > maxVal) {
            maxVal = srcArray[iter];
        }
    }

    bool isFixedSingleColor = (maxVal - minVal < m_scale * std::numeric_limits<float>::epsilon()) ? true : false;

    float r, g, b;
    // Bottom Color
    if (m_isHigh == false) {
        r = pColorR[interpCnt - 1];
        g = pColorG[interpCnt - 1];
        b = pColorB[interpCnt - 1];
    }
    else {
        r = pColorR[0];
        g = pColorG[0];
        b = pColorB[0];
    }

    r = std::floor(r * std::numeric_limits<unsigned char>::max());
    g = std::floor(g * std::numeric_limits<unsigned char>::max());
    b = std::floor(b * std::numeric_limits<unsigned char>::max());

    bottomColor = st_ColorMapRGB_UCHAR(r, g, b);

    if (isFixedSingleColor) {
        if (m_isHigh) {
            r = pColorR[interpCnt - 1];
            g = pColorG[interpCnt - 1];
            b = pColorB[interpCnt - 1];
        }
        else {
            r = pColorR[0];
            g = pColorG[0];
            b = pColorB[0];
        }

        r = std::floor(r * std::numeric_limits<unsigned char>::max());
        g = std::floor(g * std::numeric_limits<unsigned char>::max());
        b = std::floor(b * std::numeric_limits<unsigned char>::max());

        st_ColorMapRGB_UCHAR colorMapRGB(r, g, b);

        dstColorArray.resize(srcArray.size(), colorMapRGB);
    }
    else {
        // 归一化到[0, 1]
        int srcArraySize = srcArray.size();
        // for (iter = 0; iter < srcArray.size(); ++iter)
        for (iter = 0; iter < srcArraySize; ++iter) {
            float normal;
            if (m_isHigh) {
                normal = (srcArray[iter] - minVal) / (maxVal - minVal);
            }
            else {
                normal = 1.0 - (srcArray[iter] - minVal) / (maxVal - minVal);
            }

            float index = normal * (interpCnt - 1);
            int lowIndex = std::floor(index);
            int highIndex = std::ceil(index);

            m_linerInterp(lowIndex, highIndex, index, pColorR, pColorG, pColorB, r, g,b);

            // std::cout << "numberic_limits<unsigned char>::max() = " <<
            // (int)std::numeric_limits<unsigned char>::max() << std::endl;

            r = std::floor(r * std::numeric_limits<unsigned char>::max());
            g = std::floor(g * std::numeric_limits<unsigned char>::max());
            b = std::floor(b * std::numeric_limits<unsigned char>::max());

            st_ColorMapRGB_UCHAR colorMapRGB(r, g, b);

            dstColorArray[iter] = colorMapRGB;
        }
    }

    return 0;
}

int RSColorMapper::m_colorMap(const std::vector<std::vector<float>> &srcArray,
                              const std::vector<float> &alphas,
                              std::vector<st_ColorMapRGB_UCHAR> &dstColorArray,
                              st_ColorMapRGB_UCHAR &bottomColor, int interpCnt,
                              float *pColorR, float *pColorG, float *pColorB) {
    if (srcArray.size() != alphas.size()) {
        return -1;
    }

    int iter, index;

    int minDims = std::numeric_limits<int>::max();
    int maxDims = std::numeric_limits<int>::min();

    int srcArraySize = srcArray.size();

    for (int iter = 0; iter < srcArraySize; ++iter) {
        int dims = srcArray[iter].size();

        if (minDims > dims) {
            minDims = dims;
        }

        if (maxDims < dims) {
            maxDims = dims;
        }
    }

    if (minDims != maxDims) {
        return -2;
    }

    std::shared_ptr<std::vector<float>> pAggressedVals;

    pAggressedVals.reset(new std::vector<float>);

    pAggressedVals->resize(maxDims, 0);

    float minVal = std::numeric_limits<float>::max();
    float maxVal = std::numeric_limits<float>::min();

    for (index = 0; index < maxDims; ++index) {
        float value = 0;

        for (int iter = 0; iter < srcArraySize; ++iter) {
            value += srcArray[iter][index] * alphas[iter];
        }

        if (value < minVal) {
            minVal = value;
        }

        if (value > maxVal) {
            maxVal = value;
        }

        (*pAggressedVals)[index] = value;
    }

    bool isFixedSingleColor =(maxVal - minVal < m_scale * std::numeric_limits<float>::epsilon()) ? true : false;

    float r, g, b;

    // Bottom Color
    if (!m_isHigh) {
        r = pColorR[interpCnt - 1];
        g = pColorG[interpCnt - 1];
        b = pColorB[interpCnt - 1];
    }
    else {
        r = pColorR[0];
        g = pColorG[0];
        b = pColorB[0];
    }

    r = std::floor(r * std::numeric_limits<unsigned char>::max());
    g = std::floor(g * std::numeric_limits<unsigned char>::max());
    b = std::floor(b * std::numeric_limits<unsigned char>::max());

    bottomColor = st_ColorMapRGB_UCHAR(r, g, b);

    if (isFixedSingleColor) {
        if (m_isHigh) {
            r = pColorR[interpCnt - 1];
            g = pColorG[interpCnt - 1];
            b = pColorB[interpCnt - 1];
        }
        else {
            r = pColorR[0];
            g = pColorG[0];
            b = pColorB[0];
        }

        r = std::floor(r * std::numeric_limits<unsigned char>::max());
        g = std::floor(g * std::numeric_limits<unsigned char>::max());
        b = std::floor(b * std::numeric_limits<unsigned char>::max());

        st_ColorMapRGB_UCHAR colorMapRGB(r, g, b);

        dstColorArray.resize(maxDims, colorMapRGB);
    }
    else {
        dstColorArray.resize(maxDims);

        // 归一化到[0, 1]
        for (iter = 0; iter < maxDims; ++iter) {
            float normal;
            if (m_isHigh) {
                normal = (pAggressedVals->at(iter) - minVal) / (maxVal - minVal);
            }
            else {
                normal = 1.0 - (pAggressedVals->at(iter) - minVal) / (maxVal - minVal);
            }

            float index = normal * (interpCnt - 1);
            int lowIndex = std::floor(index);
            int highIndex = std::ceil(index);

            m_linerInterp(lowIndex, highIndex, index, pColorR, pColorG, pColorB, r, g,b);

            r = std::floor(r * std::numeric_limits<unsigned char>::max());
            g = std::floor(g * std::numeric_limits<unsigned char>::max());
            b = std::floor(b * std::numeric_limits<unsigned char>::max());

            st_ColorMapRGB_UCHAR colorMapRGB(r, g, b);

            dstColorArray[iter] = colorMapRGB;
        }
    }

    return 0;
}

}  // namespace perception
}  // namespace robosense
