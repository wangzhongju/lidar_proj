syntax = "proto3";
package nebulalink.perceptron3;


// 该proto数据结构对应《边缘计算单元与路侧RSU设备通信协议3.0.4.pdf》 最近更新时间节点：2022/8/26

enum DetectorType
{
    BREADCAST_DETECTOR = 0;
}

//---------------------------------------------置信度----------------------------------------------------------
// 经纬度坐标置信度
message PointGPS_CFD{
	double position_confidence = 1;   // 经纬度置信度
	double plevation_confidence = 2;  // 高程置信度
}

// 尺寸置信度
message TargetSize_CFD{
	float object_width_cfd = 1;  	// 目标宽度置信度
	float object_length_cfd = 2; 	// 目标长度置信度
	float object_height_cfd = 3; 	// 目标高度置信度
}

// 四轴加速度置信度
message Acc4Way_CFD {
    float lonAccConfidence = 1;	    // Long：纵向加速度置信度
    float latAccConfidence = 2;	    // Lat： 横向加速度置信度
    float vertAccConfidence = 3;    // Vert：垂直加速度置信度
    float yawRateCon = 4;	        // Yaw： 角加速度置信度
}
// 四轴加速度置信度
message Motion_CFD {
    float speedCfd = 1;	    // 速度置信度
    float headingCfd = 2;	// 航向角精度置信度
    float steerCfd = 3;     // 方向盘转向角置信度
}

//--------------------------------------------基础数据-----------------------------------------------------------
// 目标四轴加速度
message Acc4Way {
    float acc4WayLon = 1;	  // Long：纵向加速度
    float acc4WayLat = 2;	  // Lat： 横向加速度
    float acc4WayVert = 3;	  // Vert：垂直加速度
    float acc4WayYaw = 4;	  // Yaw： 角加速度
}

// 感知目标列表 成员-目标尺寸
message TargetSize{
	float object_width = 1;  	// 目标宽度.范围0-10m
	float object_length = 2; 	// 目标长度.范围0-40m
	float object_height = 3; 	// 目标高度.范围0-6.35m
}

// 时间戳
message TimeBase {
	int32 year = 1;
	int32 month = 2;
	int32 day = 3;
	int32 hour = 4;
	int32 min = 5;
	int32 second = 6;
	int32 miilsecond = 7;
}

// 目标经纬度坐标
message PointGPS{
	double object_longitude = 1; // 经度.范围0-180
	double object_latitude = 2;  // 维度.范围0-90
	double object_elevation = 3; // 海拔.范围0-4096；
}

// 路径点属性
message PointDesc {
    double p_longitude = 1;             // 经度
    double p_latitude = 2;              // 纬度
    double p_altitude = 3;              // 海拔高度
    int32 p_NS = 4;                     // 南北纬
    int32 p_EW = 5;                     // 东西经
    float p_speed = 6;                  // 速度
    float p_heading = 7;                // 航向角
    Acc4Way p_accel_4way = 8;           // 目标四轴加速度
    double p_dis2end = 9;               // 距结束点距离
    int64 p_up_region_node_id = 10;     // 上游节点ID
    int64 p_down_region_node_id = 11;   // 下游节点ID
    int32 p_relate_lane_id = 12;        // 点所属车道
    int32 satellite_num = 13;           // 定位点卫星数
	PointGPS_CFD p_pos_cfd =14;			// 位置置信度
	int32  time_offset = 15;			// 当前描述时刻相对于参考时间点的偏差
}


// 轨迹点集合
message PathPoint {
    TimeBase pp_time = 1; 
    PointDesc pp_point = 2; // gps，speed,heading,
}

// 关联路段属性
message RelateLinkDesc {
    int32 up_region_node_id = 1;        // 上游节点ID   
    int32 down_region_node_id = 2;      // 下游节点ID
	message RelateLane{
	    int32 rtl_lane_id = 1;            // 车道ID
	}
	repeated RelateLane rtl_lanes = 3;    // 关联车道    
}

// 关联路径属性
message RelatePathDesc {
    repeated PointDesc rpd_pathPoint = 1; // 点经纬度
    float rpd_radius = 2;                 // 关联半径
}


// 感知目标列表 成员-目标的几何中心相对传感器坐标位置
message Point3 {
	float x = 1;
	float y = 2;
	float z = 3;
}
// 感知目标列表 成员-图像坐标位置
message Point4 {
	int32 camera_x = 1;
	int32 camera_y = 2;
	int32 camera_w = 3;
	int32 camera_h = 4;
}

// 感知目标列表 成员-目标分轴速度
message Speed3{
	float speed_x = 1; 
	float speed_y = 2;
	float speed_z = 3;
}

message Planning_PB {
	int32	duration = 1;
	int32	confid = 2;
    string	driving_behavior = 3;
	repeated PathPlanning_PB	path_planning = 4;
}

message PathPlanning_PB {
	PointDesc pplan_pos  = 1;
    float pplan_speed_cfd = 2;
	float pplan_heading_cfd = 3;
	Acc4Way	 pplan_acce = 4;
	Acc4Way_CFD pplan_acce_cfd = 5;
	int32 estimated_time = 6;  
	int32 time_confidence = 7; 
}

// 在离开线上的交通信息；
message InfoEndLineValues{
	
}

// 线上的交通信息
message InfoEntreLineValues{
	
}


// 感知路口级 统计信息列表
message OnLineValues{
	int32 cycleid = 1; 					// 线圈id
	PointGPS pos = 2; 					// 虚拟线的位置
	int32 vehnum = 3; 					// 线上车辆数
	float avgSpeed = 4; 				// 线上车的平均速度
	string cross_name = 5;			    // 路口名称----5以下为襄阳定义
	int32 cross_laneno = 6;				// 路口编号
	int32 cross_volume = 7;				// 该路口不区分车型机动车总流量
	int32 cross_peron_volume = 8;   	// 该路口非机动车流量
	int32 cross_no_motor_volume = 9;  	// 该路口大车流量
	int32 cross_minmotor_volume = 10;   // 该路口小车总流量
	int32 cross_medmotor_volume = 11;   // 该路口中车流量
	int32 cross_maxmotor_volume = 12;   // 该路口大车流量
	int32 cross_pcu = 13;       		// 该路口交通当量
	float cross_avspeed = 14;   		// 该路口平均速度
	float cross_time_occupany = 15; 	// 该路口时间占有率
	float cross_headway = 16; 			// 该路口平均车头时距
	float cross_gap = 17;  				// 该路口平均车身间距
	float cross_avdistance = 18;        // 该路口平均车距
	float cross_avstop = 19; 			// 该路口平均停车次数
	float cross_speed85 = 20;  			// 该路口目标超过85%的目标速度
	float cross_queueLength = 21;  		// 该路口来向车道排队长度
	float cross_stopline = 22;   		// 该路口车道停止线
	float cross_space_occupany = 23; 	// 该路口空间占有率
	repeated LinkJamSenseParams road_linklist = 24;  // 感知道路级link 信息统计
}

// 多帧目标历史数据.
message FrameArray{
  repeated Perceptron perceptron = 1;
}

// 内部扩展数据段
message Nebulalink_Extend{
    string version = 1;                  // 版本号
	repeated float feature = 2;			// 目标特征信息向量

}

// v2x网联车数据.
message V2XOBUs{
    PointDesc obu_point = 1; 		// 车辆基础数据
    float obu_wheel_angle = 2; 		// 转向轮角度
    int64 obu_time_stamp = 3;		// 时间戳
    int32 obu_veh_type = 4;			// 车辆类型
	int32 obu_fuel_type =5;		    // 车辆燃油类型
    int32 obu_light = 6;			// 状态灯
    int32 obu_brake_state = 7;		// 刹车状态
    int32 obu_veh_state = 8;		// 车辆状态标志
	float obu_cfd = 9;  	        // 目标置信度
	TargetSize obu_size = 10;       // 车辆长宽高
	bytes obu_platenum = 11; 	    // 车牌号
	string obu_deviceid = 12;       // OBU SN 设备号
}



//----------------------------------------------ssminfo基元数据---------------------------------------------------------
// polygon属性列表.
message DetectorRegion {
	repeated PointDesc polygonPoint = 1;  // 经纬度
}

// 感知目标属性列表.
message Perceptron {
  bool is_tracker = 1; 			    // 物体是否被跟踪
  float object_confidence = 2;  	// 目标置信度，
  string lane_id = 3; 			    // 目标所在车道id
  int32 object_class_type = 4;      // 目标大类类型
  int32 object_id = 5;  		    // 单杆目标Id
  Point3 point3f  = 6;  		    // 目标的几何中心相对传感器坐标位置
  Point4 point4f = 7; 			    // 图像坐标位置
  float object_speed = 8; 		  // 目标速度
  Speed3 speed3f = 9; 			    // 目标分轴速度
  float object_acceleration = 10;// 目标加速度 
  TargetSize target_size = 11; 	// 目标尺寸.
  PointGPS point_gps = 12; 		  // 目标经纬度坐标.
  int32 object_NS = 13; 		    // 南北纬.
  int32 object_WE = 14; 		    // 东西经.
  float object_direction = 15; 	// 车辆车头朝向角度，与正北偏角
  float object_heading = 16; 	  // 行驶方向朝向航向角
  int32 is_head_tail = 17; 		  // 车头还是车尾 
  int32 lane_type = 18; 		    // 目标所在车道类型,
  bytes  plate_num = 19; 		    // 目标为车辆时，为车牌号
  string objects_identity = 20; // 全域目标id
  int32  fuel_type = 21;        // 目标燃油类型
  Acc4Way accel_4way = 22;	  	// 目标四轴加速度
  int64 obj_time_stamp = 23;    // 目标时间戳-毫秒数
  int32  ptc_sourcetype = 24;    // 目标数据来源 
  TimeBase ptc_time_stamp = 25;  // 目标时间戳-带格式
  PointGPS_CFD ptc_gps_cfd = 26; // 目标经纬度坐标置信度
  int32 ptc_tran_state = 27;     // 目标车辆档位状态
  float  ptc_angle = 28;         // 目标转向角
  Motion_CFD ptc_motino_cfd = 29;       // 目标运行状态置信度
  int32 ptc_veh_type = 30;              // 目标车辆类型
  TargetSize_CFD  ptc_size_cfd = 31;    // 目标尺寸置信度
  int32 ptc_Exttype = 32;               // 目标类型扩展
  float ptc_Exttype_cfd = 33;           // 目标类型置信度
  Acc4Way_CFD ptc_accel_4way_cfd = 34;  // 目标四轴加速度置信度
  int32 ptc_status_duration = 35;       // 目标状态点偏差
  repeated PathPoint ptc_pathpoint_history = 36; // 目标历史轨迹
  repeated Planning_PB ptc_planning_list = 37;    // 目标行驶规划集合
  repeated PointDesc ptc_polygonPoint = 38; // 目标影响感知区域
  int32 ptc_satellite = 39;        // 目标所在点卫星数量
  int32 ptc_regionid = 40;         // 目标所在点区域id
  int32 ptc_nodeid = 41;           // 目标所在点区域内节点id
  int32 ptc_laneid = 42;           // 目标所在点车道id
  string ptc_link_name = 43;       // 目标所在点道路名称
  int32 ptc_link_width = 44;         // 目标所在点道路宽度
  int32 ptc_veh_plate_type =45;    // 车牌类型
  int32 ptc_veh_plate_color =46;    // 车牌颜色
  int32 ptc_veh_color = 47;           // 目标车辆颜色
  repeated Nebulalink_Extend  nebula_extend = 48;  // 扩展数据段
  
}

// obs属性列表.
message Obstacles {
	int32 obstype = 1;              // 障碍物 类型
    int32 obstype_cfd = 2;          // 障碍物 类型置信度
	int32 obsId = 3;                // 障碍物 id
	int32 obs_source = 4;           // 障碍物 数据来源
    TimeBase obs_time_stamp = 5;    // 障碍物 时间戳
    PointDesc obs_gps = 6;          // 障碍物 相对位置精度
    PointGPS_CFD obs_gps_cfd = 7;   // 障碍物 相对位置精度置信度
	float obs_speed = 8;            // 障碍物 速度
	float obs_speed_cfd = 9;        // 障碍物 速度置信度
	float obs_heading = 10;         // 障碍物 航向角
	float obs_heading_cfd = 11;     // 障碍物 航向角置信度
	float obs_verSpeed = 12;        // 障碍物 角加速度
	float obs_verSpeed_cfd = 13;    // 障碍物 角加速度置信度
	Acc4Way  obs_accel_4way = 14;   // 障碍物 四轴加速度
	TargetSize obs_size = 15;       // 障碍物 尺寸大小
    TargetSize_CFD obs_size_cfd = 16;          // 障碍物 尺寸大小置信度
	int32    obs_tracking = 17;                // 障碍物 追踪时间
	repeated PointDesc obs_polygonPoint = 18;  // 障碍物 影响区域点集合
}
// 感知事件属性列表.
message Eventlist {
  int32 event_id = 1;			      // 事件ID
  int32 event_status = 2;       // 事件状态
  int32 event_type = 3;         // 交通事件类型.
  int32 rte_source = 4;         // 事件源
  PointGPS event_gps = 5;	      // 事件发生的经纬度-海拔
  float event_radius  = 6;  	  // 事件影响半径.
  string event_desc = 7; 		    // 事件描述
  int32 event_priority = 8;		  // 事件优先级
  repeated RelateLinkDesc linklist = 9; 	  // 事件关联的link路径集合
  repeated RelatePathDesc pathlist = 10;	  // 事件关联的lan级路径集合
  int32 event_confid = 11;  	              // 事件置信度.
  TimeBase event_timestamp_start = 12;      // 事件开始时间戳
  TimeBase event_timestamp_end = 13;        // 事件结束时间戳
}

// 南向设备状态数据列表.
message Heartlist { 
  int32  device_status = 1; 		// rsu外接设备状态
  string err_device_id = 2;          	// rsu外接设备id
  int32  err_code = 3;             // rsu外接设备故障码
  int64  heart_time = 4;             	// rsu外接设备时间戳
  string err_desc = 5;	            // rsu外接设备故障描述
  int32  err_level  = 6;  	        // rsu外接设备故障等级.
  int32  err_device_type = 7; 		    // rsu外接设备类型
  string err_device_version = 8;	// rsu外接设备版本号
  float  device_temp = 9;          // rsu外接设备温度
}


// 车道级lane 信息列表
message LaneJamSenseParams{
	string lane_id = 1;      		    	// 车道id
	int32 lane_types = 2;				    // 车道类型
	float lane_sense_len = 3; 	 		  // 车道长度
	int32 lane_direction = 4;			    // 车道方向
	float lane_avg_speed = 5; 	 		  // 车道内车辆的平均速度
	int32 lane_veh_num = 6; 		 	    // 该车道不区分车型机动车总流量
	float lane_space_occupancy = 7; 	// 车道空间占有率
	int32 lane_queue_len = 8; 	   		// 车道排队长度
	int32 lane_count_time = 9; 			  // 车道统计时间
	int32 lane_count_flow = 10; 		  // 车道统计车数量
	bool  lane_is_count = 11; 			  // 是否统计成功
	int32 lane_ave_distance = 12;		  // 车道平均车间距
	int32 lane_cur_distance = 13;		  // 车道实时车间距
	float lane_time_occupancy = 14; 	// 车道时间占有率
	InfoEntreLineValues lane_entre_info = 15; 	// 进入车道的交通信息	
	InfoEndLineValues   lane_end_info = 16;     // 离开车道的交通信息
	int32 lane_num = 17;      			// 车道数量----17以下襄阳项目定义
	int32 lane_no = 18;                // 车道编号
	int32 lane_peron_volume = 19;   	    // 该车道行人流量
	int32 lane_no_motor_volume = 20;     // 该车道非机动车流量
	int32 lane_minmotor_volume = 21;	    // 该车道小车总流量
	int32 lane_medmotor_volume = 22;     // 该车道中车流量
	int32 lane_maxmotor_volume = 23;     // 该车道大车流量
	int32 lane_pcu = 24;       			// 该车道交通当量
	float lane_avspeed = 25;   			// 该车道平均速度
	float lane_headway =26;  			// 该车道平均车头时距
	float lane_gap = 27;  				// 该车道平均车身间距
	float lane_avdistance = 28;         // 该车道平均车距
	float lane_avstop = 29; 			// 该车道平均停车次数
	float lane_speed85 = 30;  			// 该车道85%以上的车辆的最高速度
	float lane_queueLength = 31;  		// 该车道来向车道排队长度
	float lane_stopline = 32;   		// 该车道停止线
}


// 道路级link 信息列表
message LinkJamSenseParams{
	string link_id = 1; 				      // 道路id
	float  link_len = 2; 				      // 道路长度
	float  link_avgspeed = 3; 		    // 道路平均速度
	int32  link_veh_num = 4; 			    // 道路车辆数
	int32  link_type = 5; 				    // 道路类型
	int32  link_direction = 6;    		// 道路方向
	float  link_space_occupancy = 7; 	// 道路空间占有率
	float  link_time_occupancy = 8; 	// 道路时间占有率
	int32  link_count_time = 9; 		  // 道路统计时间
	int32  link_count_flow = 10; 	    // 道路统计车数量
	bool   link_is_count = 11; 			  // 是否统计成功
	InfoEntreLineValues link_entre_info = 12; 	 	// 进入道路的交通信息
	InfoEndLineValues link_end_info = 13; 	 		  // 离开道路的交通信息
	string link_deviceid = 14;   		// 道路编号--17以下襄阳项目定义
	int32 link_heading = 15;     		// 道路与道路入口中心点与正北方向的顺时针夹角
	int32 link_phaseid = 16;  			// 相位ID
	string link_name = 17;       		// 道路名称，
	int32 link_no = 18;          		// 道路编码
	PointGPS link_gps = 19;      		// 道路入口坐标
	int32 link_measnum = 20;			// 检测线编号
	int32 link_num = 21;      			// 线圈数量
	int32 link_motor_volume = 22;		// 该道路不区分车型机动车总流量
	int32 link_peron_volume = 23;   	// 该道路行人流量
	int32 link_no_motor_volume = 24;    // 该道路非机动车流量
	int32 link_minmotor_volume = 25;	// 该道路小车总流量
	int32 link_medmotor_volume = 26;    // 该道路中车流量
	int32 link_maxmotor_volume = 27;    // 该道路大车流量
	int32 link_pcu = 28;       			// 该道路交通当量
	float link_avspeed = 29;   			// 该道路平均速度
	float link_time_occupany = 30; 		// 该道路时间占有率
	float link_headway = 31;  			// 该道路平均车头时距
	float link_gap = 32;  				// 该道路平均车身间距
	float link_avdistance = 33;         // 该道路平均车距
	float link_avstop = 34; 			// 该道路平均停车次数
	float link_speed85 = 35;  			// 该道路85%以上的车辆的最高速度
	float link_queueLength = 36;  		// 该道路来向车道排队长度
	float link_stopline = 37;   		// 该道路平均速度
	float link_space_occupany = 38; 	// 该道路空间占有率
	repeated LaneJamSenseParams road_lanelist = 39; // 感知车道级lane 统计信息
	
}


// 感知共享消息-结构化数据
message PerceptronSet {
  string devide_id = 1;  	      // 设备号.
  bool  devide_is_true = 2;     // 判断设备数据的有效性.
  int64 time_stamp = 3;  	      // 数据帧时间戳
  int32 number_frame = 4;  	    // 帧的序列号
  PointGPS perception_gps = 5; 	// 感知设备安装位置的GPS信息.
  repeated Perceptron perceptron = 6;  						          // 感知参与者列表 
  repeated LaneJamSenseParams lane_jam_sense_params = 7;	  		  // lane级道路信息
  repeated LinkJamSenseParams link_jam_sense_params = 8;	 		  // link级道路信息
  repeated OnLineValues on_line_values = 9;                			  // 交通路口统计类列表
  repeated FrameArray frame_array = 10; 					          // 多帧历史数据
  repeated Eventlist event_list = 11;  						          // 感知事件列表
  repeated Heartlist heart_list = 12;  						          // RSU南向感知设备状态
  repeated DetectorRegion polygon = 13;  	                          // 感知区域 
  repeated Obstacles obstacle = 14;  	                              // 感知障碍物列表
  repeated V2XOBUs v2x_obus  = 15;                                    // rsu探测的v2x网联车数据
}
