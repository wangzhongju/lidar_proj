// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulalink.perceptron3.0.5.proto

#include "Proto_msg.PerceptXingyun.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Acc4Way;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Acc4Way_CFD;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Heartlist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoEndLineValues;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoEntreLineValues;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Motion_CFD;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Nebulalink_Extend;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point4;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointGPS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointGPS_CFD;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RelateLinkDesc_RelateLane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Speed3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TargetSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TargetSize_CFD;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeBase;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<15> scc_info_Perceptron;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DetectorRegion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FrameArray;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Planning_PB;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RelateLinkDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RelatePathDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaneJamSenseParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_OnLineValues;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PathPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PointDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_V2XOBUs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PathPlanning_PB;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Eventlist;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_LinkJamSenseParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Obstacles;
}  // namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto
namespace nebulalink {
namespace perceptron3 {
class PointGPS_CFDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointGPS_CFD>
      _instance;
} _PointGPS_CFD_default_instance_;
class TargetSize_CFDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetSize_CFD>
      _instance;
} _TargetSize_CFD_default_instance_;
class Acc4Way_CFDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Acc4Way_CFD>
      _instance;
} _Acc4Way_CFD_default_instance_;
class Motion_CFDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Motion_CFD>
      _instance;
} _Motion_CFD_default_instance_;
class Acc4WayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Acc4Way>
      _instance;
} _Acc4Way_default_instance_;
class TargetSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetSize>
      _instance;
} _TargetSize_default_instance_;
class TimeBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeBase>
      _instance;
} _TimeBase_default_instance_;
class PointGPSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointGPS>
      _instance;
} _PointGPS_default_instance_;
class PointDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointDesc>
      _instance;
} _PointDesc_default_instance_;
class PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPoint>
      _instance;
} _PathPoint_default_instance_;
class RelateLinkDesc_RelateLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelateLinkDesc_RelateLane>
      _instance;
} _RelateLinkDesc_RelateLane_default_instance_;
class RelateLinkDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelateLinkDesc>
      _instance;
} _RelateLinkDesc_default_instance_;
class RelatePathDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelatePathDesc>
      _instance;
} _RelatePathDesc_default_instance_;
class Point3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point3>
      _instance;
} _Point3_default_instance_;
class Point4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point4>
      _instance;
} _Point4_default_instance_;
class Speed3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Speed3>
      _instance;
} _Speed3_default_instance_;
class Planning_PBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Planning_PB>
      _instance;
} _Planning_PB_default_instance_;
class PathPlanning_PBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPlanning_PB>
      _instance;
} _PathPlanning_PB_default_instance_;
class InfoEndLineValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoEndLineValues>
      _instance;
} _InfoEndLineValues_default_instance_;
class InfoEntreLineValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoEntreLineValues>
      _instance;
} _InfoEntreLineValues_default_instance_;
class OnLineValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnLineValues>
      _instance;
} _OnLineValues_default_instance_;
class FrameArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameArray>
      _instance;
} _FrameArray_default_instance_;
class Nebulalink_ExtendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nebulalink_Extend>
      _instance;
} _Nebulalink_Extend_default_instance_;
class V2XOBUsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<V2XOBUs>
      _instance;
} _V2XOBUs_default_instance_;
class DetectorRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectorRegion>
      _instance;
} _DetectorRegion_default_instance_;
class PerceptronDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Perceptron>
      _instance;
} _Perceptron_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacles>
      _instance;
} _Obstacles_default_instance_;
class EventlistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Eventlist>
      _instance;
} _Eventlist_default_instance_;
class HeartlistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heartlist>
      _instance;
} _Heartlist_default_instance_;
class LaneJamSenseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneJamSenseParams>
      _instance;
} _LaneJamSenseParams_default_instance_;
class LinkJamSenseParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkJamSenseParams>
      _instance;
} _LinkJamSenseParams_default_instance_;
class PerceptronSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptronSet>
      _instance;
} _PerceptronSet_default_instance_;
}  // namespace perceptron3
}  // namespace nebulalink
namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto {
static void InitDefaultsPointGPS_CFD() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointGPS_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointGPS_CFD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointGPS_CFD::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointGPS_CFD =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointGPS_CFD}, {}};

static void InitDefaultsTargetSize_CFD() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TargetSize_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TargetSize_CFD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TargetSize_CFD::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TargetSize_CFD =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTargetSize_CFD}, {}};

static void InitDefaultsAcc4Way_CFD() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Acc4Way_CFD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Acc4Way_CFD::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Acc4Way_CFD =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcc4Way_CFD}, {}};

static void InitDefaultsMotion_CFD() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Motion_CFD_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Motion_CFD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Motion_CFD::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Motion_CFD =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMotion_CFD}, {}};

static void InitDefaultsAcc4Way() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Acc4Way_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Acc4Way();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Acc4Way::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Acc4Way =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcc4Way}, {}};

static void InitDefaultsTargetSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TargetSize_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TargetSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TargetSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TargetSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTargetSize}, {}};

static void InitDefaultsTimeBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_TimeBase_default_instance_;
    new (ptr) ::nebulalink::perceptron3::TimeBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::TimeBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeBase}, {}};

static void InitDefaultsPointGPS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointGPS_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointGPS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointGPS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointGPS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointGPS}, {}};

static void InitDefaultsPointDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PointDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PointDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PointDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PointDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPointDesc}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS_CFD.base,}};

static void InitDefaultsPathPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PathPoint_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PathPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PathPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPathPoint}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,}};

static void InitDefaultsRelateLinkDesc_RelateLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelateLinkDesc_RelateLane_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelateLinkDesc_RelateLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelateLinkDesc_RelateLane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RelateLinkDesc_RelateLane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRelateLinkDesc_RelateLane}, {}};

static void InitDefaultsRelateLinkDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelateLinkDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelateLinkDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelateLinkDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RelateLinkDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRelateLinkDesc}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc_RelateLane.base,}};

static void InitDefaultsRelatePathDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_RelatePathDesc_default_instance_;
    new (ptr) ::nebulalink::perceptron3::RelatePathDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::RelatePathDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RelatePathDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRelatePathDesc}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,}};

static void InitDefaultsPoint3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Point3_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Point3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Point3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint3}, {}};

static void InitDefaultsPoint4() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Point4_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Point4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Point4::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point4 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint4}, {}};

static void InitDefaultsSpeed3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Speed3_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Speed3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Speed3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Speed3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeed3}, {}};

static void InitDefaultsPlanning_PB() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Planning_PB_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Planning_PB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Planning_PB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Planning_PB =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlanning_PB}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPlanning_PB.base,}};

static void InitDefaultsPathPlanning_PB() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PathPlanning_PB_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PathPlanning_PB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PathPlanning_PB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PathPlanning_PB =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPathPlanning_PB}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way_CFD.base,}};

static void InitDefaultsInfoEndLineValues() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_InfoEndLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::InfoEndLineValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::InfoEndLineValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InfoEndLineValues =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfoEndLineValues}, {}};

static void InitDefaultsInfoEntreLineValues() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::InfoEntreLineValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::InfoEntreLineValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InfoEntreLineValues =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfoEntreLineValues}, {}};

static void InitDefaultsOnLineValues() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_OnLineValues_default_instance_;
    new (ptr) ::nebulalink::perceptron3::OnLineValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::OnLineValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OnLineValues =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOnLineValues}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LinkJamSenseParams.base,}};

static void InitDefaultsFrameArray() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_FrameArray_default_instance_;
    new (ptr) ::nebulalink::perceptron3::FrameArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::FrameArray::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FrameArray =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrameArray}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Perceptron.base,}};

static void InitDefaultsNebulalink_Extend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Nebulalink_Extend_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Nebulalink_Extend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Nebulalink_Extend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Nebulalink_Extend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNebulalink_Extend}, {}};

static void InitDefaultsV2XOBUs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_V2XOBUs_default_instance_;
    new (ptr) ::nebulalink::perceptron3::V2XOBUs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::V2XOBUs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_V2XOBUs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsV2XOBUs}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize.base,}};

static void InitDefaultsDetectorRegion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_DetectorRegion_default_instance_;
    new (ptr) ::nebulalink::perceptron3::DetectorRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::DetectorRegion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DetectorRegion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDetectorRegion}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,}};

static void InitDefaultsPerceptron() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Perceptron_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Perceptron();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Perceptron::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<15> scc_info_Perceptron =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsPerceptron}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point3.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point4.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Speed3.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS_CFD.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Motion_CFD.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize_CFD.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way_CFD.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPoint.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Planning_PB.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Nebulalink_Extend.base,}};

static void InitDefaultsObstacles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Obstacles_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Obstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Obstacles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Obstacles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsObstacles}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS_CFD.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize_CFD.base,}};

static void InitDefaultsEventlist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Eventlist_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Eventlist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Eventlist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Eventlist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsEventlist}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelatePathDesc.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base,}};

static void InitDefaultsHeartlist() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_Heartlist_default_instance_;
    new (ptr) ::nebulalink::perceptron3::Heartlist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::Heartlist::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Heartlist =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartlist}, {}};

static void InitDefaultsLaneJamSenseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_;
    new (ptr) ::nebulalink::perceptron3::LaneJamSenseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::LaneJamSenseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaneJamSenseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaneJamSenseParams}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEntreLineValues.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEndLineValues.base,}};

static void InitDefaultsLinkJamSenseParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_;
    new (ptr) ::nebulalink::perceptron3::LinkJamSenseParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::LinkJamSenseParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LinkJamSenseParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLinkJamSenseParams}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEntreLineValues.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEndLineValues.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LaneJamSenseParams.base,}};

static void InitDefaultsPerceptronSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nebulalink::perceptron3::_PerceptronSet_default_instance_;
    new (ptr) ::nebulalink::perceptron3::PerceptronSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nebulalink::perceptron3::PerceptronSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_PerceptronSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsPerceptronSet}, {
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Perceptron.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LaneJamSenseParams.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LinkJamSenseParams.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_OnLineValues.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_FrameArray.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Eventlist.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Heartlist.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_DetectorRegion.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Obstacles.base,
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_V2XOBUs.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PointGPS_CFD.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetSize_CFD.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Acc4Way_CFD.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Motion_CFD.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Acc4Way.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointGPS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelateLinkDesc_RelateLane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelateLinkDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelatePathDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point4.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Speed3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Planning_PB.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathPlanning_PB.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoEndLineValues.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoEntreLineValues.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OnLineValues.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameArray.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nebulalink_Extend.base);
  ::google::protobuf::internal::InitSCC(&scc_info_V2XOBUs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetectorRegion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Perceptron.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Eventlist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Heartlist.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneJamSenseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkJamSenseParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerceptronSet.base);
}

::google::protobuf::Metadata file_level_metadata[32];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, position_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS_CFD, plevation_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_width_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_length_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize_CFD, object_height_cfd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, lonaccconfidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, lataccconfidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, vertaccconfidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way_CFD, yawratecon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, speedcfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, headingcfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Motion_CFD, steercfd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4waylon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4waylat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4wayvert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Acc4Way, acc4wayyaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TargetSize, object_height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::TimeBase, miilsecond_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointGPS, object_elevation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_ew_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_accel_4way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_dis2end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_up_region_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_down_region_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_relate_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, satellite_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, p_pos_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PointDesc, time_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, pp_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPoint, pp_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc_RelateLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc_RelateLane, rtl_lane_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, up_region_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, down_region_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelateLinkDesc, rtl_lanes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, rpd_pathpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::RelatePathDesc, rpd_radius_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Point4, camera_h_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Speed3, speed_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, confid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, driving_behavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Planning_PB, path_planning_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_speed_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_heading_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_acce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, pplan_acce_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, estimated_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PathPlanning_PB, time_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::InfoEndLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::InfoEntreLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cycleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, vehnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, avgspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_laneno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_peron_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_no_motor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_minmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_medmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_maxmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_pcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_time_occupany_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_headway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_gap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_avstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_speed85_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_queuelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_stopline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, cross_space_occupany_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::OnLineValues, road_linklist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::FrameArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::FrameArray, perceptron_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Nebulalink_Extend, feature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_wheel_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_veh_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_fuel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_brake_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_veh_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_platenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::V2XOBUs, obu_deviceid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::DetectorRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::DetectorRegion, polygonpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, is_tracker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point3f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point4f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, speed3f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, target_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, point_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_we_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, object_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, is_head_tail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, plate_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, objects_identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, fuel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, accel_4way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, obj_time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_sourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_gps_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_tran_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_motino_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_size_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_exttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_exttype_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_accel_4way_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_status_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_pathpoint_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_planning_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_polygonpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_satellite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_regionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_laneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_link_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_plate_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_plate_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, ptc_veh_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Perceptron, nebula_extend_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obstype_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obsid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_gps_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_speed_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_heading_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_verspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_verspeed_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_accel_4way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_size_cfd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_tracking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Obstacles, obs_polygonpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, rte_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, linklist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, pathlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_confid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_timestamp_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Eventlist, event_timestamp_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, device_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, heart_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, err_device_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::Heartlist, device_temp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_sense_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avg_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_veh_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_space_occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_queue_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_count_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_count_flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_is_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_ave_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_cur_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_time_occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_entre_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_end_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_peron_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_no_motor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_minmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_medmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_maxmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_pcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_headway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_gap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_avstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_speed85_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_queuelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LaneJamSenseParams, lane_stopline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avgspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_veh_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_space_occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_time_occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_count_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_count_flow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_is_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_entre_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_end_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_phaseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_measnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_motor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_peron_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_no_motor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_minmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_medmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_maxmotor_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_pcu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_time_occupany_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_headway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_gap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_avstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_speed85_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_queuelength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_stopline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, link_space_occupany_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::LinkJamSenseParams, road_lanelist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, devide_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, devide_is_true_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, number_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, perception_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, perceptron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, lane_jam_sense_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, link_jam_sense_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, on_line_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, frame_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, event_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, heart_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nebulalink::perceptron3::PerceptronSet, v2x_obus_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nebulalink::perceptron3::PointGPS_CFD)},
  { 7, -1, sizeof(::nebulalink::perceptron3::TargetSize_CFD)},
  { 15, -1, sizeof(::nebulalink::perceptron3::Acc4Way_CFD)},
  { 24, -1, sizeof(::nebulalink::perceptron3::Motion_CFD)},
  { 32, -1, sizeof(::nebulalink::perceptron3::Acc4Way)},
  { 41, -1, sizeof(::nebulalink::perceptron3::TargetSize)},
  { 49, -1, sizeof(::nebulalink::perceptron3::TimeBase)},
  { 61, -1, sizeof(::nebulalink::perceptron3::PointGPS)},
  { 69, -1, sizeof(::nebulalink::perceptron3::PointDesc)},
  { 89, -1, sizeof(::nebulalink::perceptron3::PathPoint)},
  { 96, -1, sizeof(::nebulalink::perceptron3::RelateLinkDesc_RelateLane)},
  { 102, -1, sizeof(::nebulalink::perceptron3::RelateLinkDesc)},
  { 110, -1, sizeof(::nebulalink::perceptron3::RelatePathDesc)},
  { 117, -1, sizeof(::nebulalink::perceptron3::Point3)},
  { 125, -1, sizeof(::nebulalink::perceptron3::Point4)},
  { 134, -1, sizeof(::nebulalink::perceptron3::Speed3)},
  { 142, -1, sizeof(::nebulalink::perceptron3::Planning_PB)},
  { 151, -1, sizeof(::nebulalink::perceptron3::PathPlanning_PB)},
  { 163, -1, sizeof(::nebulalink::perceptron3::InfoEndLineValues)},
  { 168, -1, sizeof(::nebulalink::perceptron3::InfoEntreLineValues)},
  { 173, -1, sizeof(::nebulalink::perceptron3::OnLineValues)},
  { 202, -1, sizeof(::nebulalink::perceptron3::FrameArray)},
  { 208, -1, sizeof(::nebulalink::perceptron3::Nebulalink_Extend)},
  { 215, -1, sizeof(::nebulalink::perceptron3::V2XOBUs)},
  { 232, -1, sizeof(::nebulalink::perceptron3::DetectorRegion)},
  { 238, -1, sizeof(::nebulalink::perceptron3::Perceptron)},
  { 291, -1, sizeof(::nebulalink::perceptron3::Obstacles)},
  { 314, -1, sizeof(::nebulalink::perceptron3::Eventlist)},
  { 332, -1, sizeof(::nebulalink::perceptron3::Heartlist)},
  { 346, -1, sizeof(::nebulalink::perceptron3::LaneJamSenseParams)},
  { 383, -1, sizeof(::nebulalink::perceptron3::LinkJamSenseParams)},
  { 427, -1, sizeof(::nebulalink::perceptron3::PerceptronSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PointGPS_CFD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_TargetSize_CFD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Motion_CFD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Acc4Way_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_TargetSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_TimeBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PointGPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PointDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_RelateLinkDesc_RelateLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_RelateLinkDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_RelatePathDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Point3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Point4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Speed3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Planning_PB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PathPlanning_PB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_InfoEndLineValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_OnLineValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_FrameArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Nebulalink_Extend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_V2XOBUs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_DetectorRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Perceptron_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Obstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Eventlist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_Heartlist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nebulalink::perceptron3::_PerceptronSet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "nebulalink.perceptron3.0.5.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n nebulalink.perceptron3.0.5.proto\022\026nebu"
      "lalink.perceptron3\"I\n\014PointGPS_CFD\022\033\n\023po"
      "sition_confidence\030\001 \001(\001\022\034\n\024plevation_con"
      "fidence\030\002 \001(\001\"`\n\016TargetSize_CFD\022\030\n\020objec"
      "t_width_cfd\030\001 \001(\002\022\031\n\021object_length_cfd\030\002"
      " \001(\002\022\031\n\021object_height_cfd\030\003 \001(\002\"p\n\013Acc4W"
      "ay_CFD\022\030\n\020lonAccConfidence\030\001 \001(\002\022\030\n\020latA"
      "ccConfidence\030\002 \001(\002\022\031\n\021vertAccConfidence\030"
      "\003 \001(\002\022\022\n\nyawRateCon\030\004 \001(\002\"D\n\nMotion_CFD\022"
      "\020\n\010speedCfd\030\001 \001(\002\022\022\n\nheadingCfd\030\002 \001(\002\022\020\n"
      "\010steerCfd\030\003 \001(\002\"Z\n\007Acc4Way\022\022\n\nacc4WayLon"
      "\030\001 \001(\002\022\022\n\nacc4WayLat\030\002 \001(\002\022\023\n\013acc4WayVer"
      "t\030\003 \001(\002\022\022\n\nacc4WayYaw\030\004 \001(\002\"P\n\nTargetSiz"
      "e\022\024\n\014object_width\030\001 \001(\002\022\025\n\robject_length"
      "\030\002 \001(\002\022\025\n\robject_height\030\003 \001(\002\"s\n\010TimeBas"
      "e\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 "
      "\001(\005\022\014\n\004hour\030\004 \001(\005\022\013\n\003min\030\005 \001(\005\022\016\n\006second"
      "\030\006 \001(\005\022\022\n\nmiilsecond\030\007 \001(\005\"W\n\010PointGPS\022\030"
      "\n\020object_longitude\030\001 \001(\001\022\027\n\017object_latit"
      "ude\030\002 \001(\001\022\030\n\020object_elevation\030\003 \001(\001\"\215\003\n\t"
      "PointDesc\022\023\n\013p_longitude\030\001 \001(\001\022\022\n\np_lati"
      "tude\030\002 \001(\001\022\022\n\np_altitude\030\003 \001(\001\022\014\n\004p_NS\030\004"
      " \001(\005\022\014\n\004p_EW\030\005 \001(\005\022\017\n\007p_speed\030\006 \001(\002\022\021\n\tp"
      "_heading\030\007 \001(\002\0225\n\014p_accel_4way\030\010 \001(\0132\037.n"
      "ebulalink.perceptron3.Acc4Way\022\021\n\tp_dis2e"
      "nd\030\t \001(\001\022\033\n\023p_up_region_node_id\030\n \001(\003\022\035\n"
      "\025p_down_region_node_id\030\013 \001(\003\022\030\n\020p_relate"
      "_lane_id\030\014 \001(\005\022\025\n\rsatellite_num\030\r \001(\005\0227\n"
      "\tp_pos_cfd\030\016 \001(\0132$.nebulalink.perceptron"
      "3.PointGPS_CFD\022\023\n\013time_offset\030\017 \001(\005\"s\n\tP"
      "athPoint\0221\n\007pp_time\030\001 \001(\0132 .nebulalink.p"
      "erceptron3.TimeBase\0223\n\010pp_point\030\002 \001(\0132!."
      "nebulalink.perceptron3.PointDesc\"\261\001\n\016Rel"
      "ateLinkDesc\022\031\n\021up_region_node_id\030\001 \001(\005\022\033"
      "\n\023down_region_node_id\030\002 \001(\005\022D\n\trtl_lanes"
      "\030\003 \003(\01321.nebulalink.perceptron3.RelateLi"
      "nkDesc.RelateLane\032!\n\nRelateLane\022\023\n\013rtl_l"
      "ane_id\030\001 \001(\005\"^\n\016RelatePathDesc\0228\n\rrpd_pa"
      "thPoint\030\001 \003(\0132!.nebulalink.perceptron3.P"
      "ointDesc\022\022\n\nrpd_radius\030\002 \001(\002\")\n\006Point3\022\t"
      "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"P\n\006Point"
      "4\022\020\n\010camera_x\030\001 \001(\005\022\020\n\010camera_y\030\002 \001(\005\022\020\n"
      "\010camera_w\030\003 \001(\005\022\020\n\010camera_h\030\004 \001(\005\";\n\006Spe"
      "ed3\022\017\n\007speed_x\030\001 \001(\002\022\017\n\007speed_y\030\002 \001(\002\022\017\n"
      "\007speed_z\030\003 \001(\002\"\211\001\n\013Planning_PB\022\020\n\010durati"
      "on\030\001 \001(\005\022\016\n\006confid\030\002 \001(\005\022\030\n\020driving_beha"
      "vior\030\003 \001(\t\022>\n\rpath_planning\030\004 \003(\0132\'.nebu"
      "lalink.perceptron3.PathPlanning_PB\"\236\002\n\017P"
      "athPlanning_PB\0224\n\tpplan_pos\030\001 \001(\0132!.nebu"
      "lalink.perceptron3.PointDesc\022\027\n\017pplan_sp"
      "eed_cfd\030\002 \001(\002\022\031\n\021pplan_heading_cfd\030\003 \001(\002"
      "\0223\n\npplan_acce\030\004 \001(\0132\037.nebulalink.percep"
      "tron3.Acc4Way\022;\n\016pplan_acce_cfd\030\005 \001(\0132#."
      "nebulalink.perceptron3.Acc4Way_CFD\022\026\n\016es"
      "timated_time\030\006 \001(\005\022\027\n\017time_confidence\030\007 "
      "\001(\005\"\023\n\021InfoEndLineValues\"\025\n\023InfoEntreLin"
      "eValues\"\224\005\n\014OnLineValues\022\017\n\007cycleid\030\001 \001("
      "\005\022-\n\003pos\030\002 \001(\0132 .nebulalink.perceptron3."
      "PointGPS\022\016\n\006vehnum\030\003 \001(\005\022\020\n\010avgSpeed\030\004 \001"
      "(\002\022\022\n\ncross_name\030\005 \001(\t\022\024\n\014cross_laneno\030\006"
      " \001(\005\022\024\n\014cross_volume\030\007 \001(\005\022\032\n\022cross_pero"
      "n_volume\030\010 \001(\005\022\035\n\025cross_no_motor_volume\030"
      "\t \001(\005\022\035\n\025cross_minmotor_volume\030\n \001(\005\022\035\n\025"
      "cross_medmotor_volume\030\013 \001(\005\022\035\n\025cross_max"
      "motor_volume\030\014 \001(\005\022\021\n\tcross_pcu\030\r \001(\005\022\025\n"
      "\rcross_avspeed\030\016 \001(\002\022\033\n\023cross_time_occup"
      "any\030\017 \001(\002\022\025\n\rcross_headway\030\020 \001(\002\022\021\n\tcros"
      "s_gap\030\021 \001(\002\022\030\n\020cross_avdistance\030\022 \001(\002\022\024\n"
      "\014cross_avstop\030\023 \001(\002\022\025\n\rcross_speed85\030\024 \001"
      "(\002\022\031\n\021cross_queueLength\030\025 \001(\002\022\026\n\016cross_s"
      "topline\030\026 \001(\002\022\034\n\024cross_space_occupany\030\027 "
      "\001(\002\022A\n\rroad_linklist\030\030 \003(\0132*.nebulalink."
      "perceptron3.LinkJamSenseParams\"D\n\nFrameA"
      "rray\0226\n\nperceptron\030\001 \003(\0132\".nebulalink.pe"
      "rceptron3.Perceptron\"5\n\021Nebulalink_Exten"
      "d\022\017\n\007version\030\001 \001(\t\022\017\n\007feature\030\002 \003(\002\"\323\002\n\007"
      "V2XOBUs\0224\n\tobu_point\030\001 \001(\0132!.nebulalink."
      "perceptron3.PointDesc\022\027\n\017obu_wheel_angle"
      "\030\002 \001(\002\022\026\n\016obu_time_stamp\030\003 \001(\003\022\024\n\014obu_ve"
      "h_type\030\004 \001(\005\022\025\n\robu_fuel_type\030\005 \001(\005\022\021\n\to"
      "bu_light\030\006 \001(\005\022\027\n\017obu_brake_state\030\007 \001(\005\022"
      "\025\n\robu_veh_state\030\010 \001(\005\022\017\n\007obu_cfd\030\t \001(\002\022"
      "4\n\010obu_size\030\n \001(\0132\".nebulalink.perceptro"
      "n3.TargetSize\022\024\n\014obu_platenum\030\013 \001(\014\022\024\n\014o"
      "bu_deviceid\030\014 \001(\t\"I\n\016DetectorRegion\0227\n\014p"
      "olygonPoint\030\001 \003(\0132!.nebulalink.perceptro"
      "n3.PointDesc\"\345\014\n\nPerceptron\022\022\n\nis_tracke"
      "r\030\001 \001(\010\022\031\n\021object_confidence\030\002 \001(\002\022\017\n\007la"
      "ne_id\030\003 \001(\t\022\031\n\021object_class_type\030\004 \001(\005\022\021"
      "\n\tobject_id\030\005 \001(\005\022/\n\007point3f\030\006 \001(\0132\036.neb"
      "ulalink.perceptron3.Point3\022/\n\007point4f\030\007 "
      "\001(\0132\036.nebulalink.perceptron3.Point4\022\024\n\014o"
      "bject_speed\030\010 \001(\002\022/\n\007speed3f\030\t \001(\0132\036.neb"
      "ulalink.perceptron3.Speed3\022\033\n\023object_acc"
      "eleration\030\n \001(\002\0227\n\013target_size\030\013 \001(\0132\".n"
      "ebulalink.perceptron3.TargetSize\0223\n\tpoin"
      "t_gps\030\014 \001(\0132 .nebulalink.perceptron3.Poi"
      "ntGPS\022\021\n\tobject_NS\030\r \001(\005\022\021\n\tobject_WE\030\016 "
      "\001(\005\022\030\n\020object_direction\030\017 \001(\002\022\026\n\016object_"
      "heading\030\020 \001(\002\022\024\n\014is_head_tail\030\021 \001(\005\022\021\n\tl"
      "ane_type\030\022 \001(\005\022\021\n\tplate_num\030\023 \001(\014\022\030\n\020obj"
      "ects_identity\030\024 \001(\t\022\021\n\tfuel_type\030\025 \001(\005\0223"
      "\n\naccel_4way\030\026 \001(\0132\037.nebulalink.perceptr"
      "on3.Acc4Way\022\026\n\016obj_time_stamp\030\027 \001(\003\022\026\n\016p"
      "tc_sourcetype\030\030 \001(\005\0228\n\016ptc_time_stamp\030\031 "
      "\001(\0132 .nebulalink.perceptron3.TimeBase\0229\n"
      "\013ptc_gps_cfd\030\032 \001(\0132$.nebulalink.perceptr"
      "on3.PointGPS_CFD\022\026\n\016ptc_tran_state\030\033 \001(\005"
      "\022\021\n\tptc_angle\030\034 \001(\002\022:\n\016ptc_motino_cfd\030\035 "
      "\001(\0132\".nebulalink.perceptron3.Motion_CFD\022"
      "\024\n\014ptc_veh_type\030\036 \001(\005\022<\n\014ptc_size_cfd\030\037 "
      "\001(\0132&.nebulalink.perceptron3.TargetSize_"
      "CFD\022\023\n\013ptc_Exttype\030  \001(\005\022\027\n\017ptc_Exttype_"
      "cfd\030! \001(\002\022\?\n\022ptc_accel_4way_cfd\030\" \001(\0132#."
      "nebulalink.perceptron3.Acc4Way_CFD\022\033\n\023pt"
      "c_status_duration\030# \001(\005\022@\n\025ptc_pathpoint"
      "_history\030$ \003(\0132!.nebulalink.perceptron3."
      "PathPoint\022>\n\021ptc_planning_list\030% \003(\0132#.n"
      "ebulalink.perceptron3.Planning_PB\022;\n\020ptc"
      "_polygonPoint\030& \003(\0132!.nebulalink.percept"
      "ron3.PointDesc\022\025\n\rptc_satellite\030\' \001(\005\022\024\n"
      "\014ptc_regionid\030( \001(\005\022\022\n\nptc_nodeid\030) \001(\005\022"
      "\022\n\nptc_laneid\030* \001(\005\022\025\n\rptc_link_name\030+ \001"
      "(\t\022\026\n\016ptc_link_width\030, \001(\005\022\032\n\022ptc_veh_pl"
      "ate_type\030- \001(\005\022\033\n\023ptc_veh_plate_color\030. "
      "\001(\005\022\025\n\rptc_veh_color\030/ \001(\005\022@\n\rnebula_ext"
      "end\0300 \003(\0132).nebulalink.perceptron3.Nebul"
      "alink_Extend\"\205\005\n\tObstacles\022\017\n\007obstype\030\001 "
      "\001(\005\022\023\n\013obstype_cfd\030\002 \001(\005\022\r\n\005obsId\030\003 \001(\005\022"
      "\022\n\nobs_source\030\004 \001(\005\0228\n\016obs_time_stamp\030\005 "
      "\001(\0132 .nebulalink.perceptron3.TimeBase\0222\n"
      "\007obs_gps\030\006 \001(\0132!.nebulalink.perceptron3."
      "PointDesc\0229\n\013obs_gps_cfd\030\007 \001(\0132$.nebulal"
      "ink.perceptron3.PointGPS_CFD\022\021\n\tobs_spee"
      "d\030\010 \001(\002\022\025\n\robs_speed_cfd\030\t \001(\002\022\023\n\013obs_he"
      "ading\030\n \001(\002\022\027\n\017obs_heading_cfd\030\013 \001(\002\022\024\n\014"
      "obs_verSpeed\030\014 \001(\002\022\030\n\020obs_verSpeed_cfd\030\r"
      " \001(\002\0227\n\016obs_accel_4way\030\016 \001(\0132\037.nebulalin"
      "k.perceptron3.Acc4Way\0224\n\010obs_size\030\017 \001(\0132"
      "\".nebulalink.perceptron3.TargetSize\022<\n\014o"
      "bs_size_cfd\030\020 \001(\0132&.nebulalink.perceptro"
      "n3.TargetSize_CFD\022\024\n\014obs_tracking\030\021 \001(\005\022"
      ";\n\020obs_polygonPoint\030\022 \003(\0132!.nebulalink.p"
      "erceptron3.PointDesc\"\334\003\n\tEventlist\022\020\n\010ev"
      "ent_id\030\001 \001(\005\022\024\n\014event_status\030\002 \001(\005\022\022\n\nev"
      "ent_type\030\003 \001(\005\022\022\n\nrte_source\030\004 \001(\005\0223\n\tev"
      "ent_gps\030\005 \001(\0132 .nebulalink.perceptron3.P"
      "ointGPS\022\024\n\014event_radius\030\006 \001(\002\022\022\n\nevent_d"
      "esc\030\007 \001(\t\022\026\n\016event_priority\030\010 \001(\005\0228\n\010lin"
      "klist\030\t \003(\0132&.nebulalink.perceptron3.Rel"
      "ateLinkDesc\0228\n\010pathlist\030\n \003(\0132&.nebulali"
      "nk.perceptron3.RelatePathDesc\022\024\n\014event_c"
      "onfid\030\013 \001(\005\022\?\n\025event_timestamp_start\030\014 \001"
      "(\0132 .nebulalink.perceptron3.TimeBase\022=\n\023"
      "event_timestamp_end\030\r \001(\0132 .nebulalink.p"
      "erceptron3.TimeBase\"\316\001\n\tHeartlist\022\025\n\rdev"
      "ice_status\030\001 \001(\005\022\025\n\rerr_device_id\030\002 \001(\t\022"
      "\020\n\010err_code\030\003 \001(\005\022\022\n\nheart_time\030\004 \001(\003\022\020\n"
      "\010err_desc\030\005 \001(\t\022\021\n\terr_level\030\006 \001(\005\022\027\n\017er"
      "r_device_type\030\007 \001(\005\022\032\n\022err_device_versio"
      "n\030\010 \001(\t\022\023\n\013device_temp\030\t \001(\002\"\354\006\n\022LaneJam"
      "SenseParams\022\017\n\007lane_id\030\001 \001(\t\022\022\n\nlane_typ"
      "es\030\002 \001(\005\022\026\n\016lane_sense_len\030\003 \001(\002\022\026\n\016lane"
      "_direction\030\004 \001(\005\022\026\n\016lane_avg_speed\030\005 \001(\002"
      "\022\024\n\014lane_veh_num\030\006 \001(\005\022\034\n\024lane_space_occ"
      "upancy\030\007 \001(\002\022\026\n\016lane_queue_len\030\010 \001(\005\022\027\n\017"
      "lane_count_time\030\t \001(\005\022\027\n\017lane_count_flow"
      "\030\n \001(\005\022\025\n\rlane_is_count\030\013 \001(\010\022\031\n\021lane_av"
      "e_distance\030\014 \001(\005\022\031\n\021lane_cur_distance\030\r "
      "\001(\005\022\033\n\023lane_time_occupancy\030\016 \001(\002\022D\n\017lane"
      "_entre_info\030\017 \001(\0132+.nebulalink.perceptro"
      "n3.InfoEntreLineValues\022@\n\rlane_end_info\030"
      "\020 \001(\0132).nebulalink.perceptron3.InfoEndLi"
      "neValues\022\020\n\010lane_num\030\021 \001(\005\022\017\n\007lane_no\030\022 "
      "\001(\005\022\031\n\021lane_peron_volume\030\023 \001(\005\022\034\n\024lane_n"
      "o_motor_volume\030\024 \001(\005\022\034\n\024lane_minmotor_vo"
      "lume\030\025 \001(\005\022\034\n\024lane_medmotor_volume\030\026 \001(\005"
      "\022\034\n\024lane_maxmotor_volume\030\027 \001(\005\022\020\n\010lane_p"
      "cu\030\030 \001(\005\022\024\n\014lane_avspeed\030\031 \001(\002\022\024\n\014lane_h"
      "eadway\030\032 \001(\002\022\020\n\010lane_gap\030\033 \001(\002\022\027\n\017lane_a"
      "vdistance\030\034 \001(\002\022\023\n\013lane_avstop\030\035 \001(\002\022\024\n\014"
      "lane_speed85\030\036 \001(\002\022\030\n\020lane_queueLength\030\037"
      " \001(\002\022\025\n\rlane_stopline\030  \001(\002\"\315\010\n\022LinkJamS"
      "enseParams\022\017\n\007link_id\030\001 \001(\t\022\020\n\010link_len\030"
      "\002 \001(\002\022\025\n\rlink_avgspeed\030\003 \001(\002\022\024\n\014link_veh"
      "_num\030\004 \001(\005\022\021\n\tlink_type\030\005 \001(\005\022\026\n\016link_di"
      "rection\030\006 \001(\005\022\034\n\024link_space_occupancy\030\007 "
      "\001(\002\022\033\n\023link_time_occupancy\030\010 \001(\002\022\027\n\017link"
      "_count_time\030\t \001(\005\022\027\n\017link_count_flow\030\n \001"
      "(\005\022\025\n\rlink_is_count\030\013 \001(\010\022D\n\017link_entre_"
      "info\030\014 \001(\0132+.nebulalink.perceptron3.Info"
      "EntreLineValues\022@\n\rlink_end_info\030\r \001(\0132)"
      ".nebulalink.perceptron3.InfoEndLineValue"
      "s\022\025\n\rlink_deviceid\030\016 \001(\t\022\024\n\014link_heading"
      "\030\017 \001(\005\022\024\n\014link_phaseid\030\020 \001(\005\022\021\n\tlink_nam"
      "e\030\021 \001(\t\022\017\n\007link_no\030\022 \001(\005\0222\n\010link_gps\030\023 \001"
      "(\0132 .nebulalink.perceptron3.PointGPS\022\024\n\014"
      "link_measnum\030\024 \001(\005\022\020\n\010link_num\030\025 \001(\005\022\031\n\021"
      "link_motor_volume\030\026 \001(\005\022\031\n\021link_peron_vo"
      "lume\030\027 \001(\005\022\034\n\024link_no_motor_volume\030\030 \001(\005"
      "\022\034\n\024link_minmotor_volume\030\031 \001(\005\022\034\n\024link_m"
      "edmotor_volume\030\032 \001(\005\022\034\n\024link_maxmotor_vo"
      "lume\030\033 \001(\005\022\020\n\010link_pcu\030\034 \001(\005\022\024\n\014link_avs"
      "peed\030\035 \001(\002\022\032\n\022link_time_occupany\030\036 \001(\002\022\024"
      "\n\014link_headway\030\037 \001(\002\022\020\n\010link_gap\030  \001(\002\022\027"
      "\n\017link_avdistance\030! \001(\002\022\023\n\013link_avstop\030\""
      " \001(\002\022\024\n\014link_speed85\030# \001(\002\022\030\n\020link_queue"
      "Length\030$ \001(\002\022\025\n\rlink_stopline\030% \001(\002\022\033\n\023l"
      "ink_space_occupany\030& \001(\002\022A\n\rroad_lanelis"
      "t\030\' \003(\0132*.nebulalink.perceptron3.LaneJam"
      "SenseParams\"\362\005\n\rPerceptronSet\022\021\n\tdevide_"
      "id\030\001 \001(\t\022\026\n\016devide_is_true\030\002 \001(\010\022\022\n\ntime"
      "_stamp\030\003 \001(\003\022\024\n\014number_frame\030\004 \001(\005\0228\n\016pe"
      "rception_gps\030\005 \001(\0132 .nebulalink.perceptr"
      "on3.PointGPS\0226\n\nperceptron\030\006 \003(\0132\".nebul"
      "alink.perceptron3.Perceptron\022I\n\025lane_jam"
      "_sense_params\030\007 \003(\0132*.nebulalink.percept"
      "ron3.LaneJamSenseParams\022I\n\025link_jam_sens"
      "e_params\030\010 \003(\0132*.nebulalink.perceptron3."
      "LinkJamSenseParams\022<\n\016on_line_values\030\t \003"
      "(\0132$.nebulalink.perceptron3.OnLineValues"
      "\0227\n\013frame_array\030\n \003(\0132\".nebulalink.perce"
      "ptron3.FrameArray\0225\n\nevent_list\030\013 \003(\0132!."
      "nebulalink.perceptron3.Eventlist\0225\n\nhear"
      "t_list\030\014 \003(\0132!.nebulalink.perceptron3.He"
      "artlist\0227\n\007polygon\030\r \003(\0132&.nebulalink.pe"
      "rceptron3.DetectorRegion\0223\n\010obstacle\030\016 \003"
      "(\0132!.nebulalink.perceptron3.Obstacles\0221\n"
      "\010v2x_obus\030\017 \003(\0132\037.nebulalink.perceptron3"
      ".V2XOBUs*&\n\014DetectorType\022\026\n\022BREADCAST_DE"
      "TECTOR\020\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nebulalink.perceptron3.0.5.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto
namespace nebulalink {
namespace perceptron3 {
const ::google::protobuf::EnumDescriptor* DetectorType_descriptor() {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_enum_descriptors[0];
}
bool DetectorType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PointGPS_CFD::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointGPS_CFD::kPositionConfidenceFieldNumber;
const int PointGPS_CFD::kPlevationConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointGPS_CFD::PointGPS_CFD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS_CFD.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointGPS_CFD)
}
PointGPS_CFD::PointGPS_CFD(const PointGPS_CFD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_confidence_, &from.position_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&plevation_confidence_) -
    reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointGPS_CFD)
}

void PointGPS_CFD::SharedCtor() {
  ::memset(&position_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plevation_confidence_) -
      reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
}

PointGPS_CFD::~PointGPS_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointGPS_CFD)
  SharedDtor();
}

void PointGPS_CFD::SharedDtor() {
}

void PointGPS_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointGPS_CFD::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointGPS_CFD& PointGPS_CFD::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS_CFD.base);
  return *internal_default_instance();
}


void PointGPS_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointGPS_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plevation_confidence_) -
      reinterpret_cast<char*>(&position_confidence_)) + sizeof(plevation_confidence_));
  _internal_metadata_.Clear();
}

bool PointGPS_CFD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PointGPS_CFD)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double position_confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double plevation_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plevation_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PointGPS_CFD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PointGPS_CFD)
  return false;
#undef DO_
}

void PointGPS_CFD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PointGPS_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position_confidence = 1;
  if (this->position_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->position_confidence(), output);
  }

  // double plevation_confidence = 2;
  if (this->plevation_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->plevation_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PointGPS_CFD)
}

::google::protobuf::uint8* PointGPS_CFD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointGPS_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double position_confidence = 1;
  if (this->position_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->position_confidence(), target);
  }

  // double plevation_confidence = 2;
  if (this->plevation_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->plevation_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointGPS_CFD)
  return target;
}

size_t PointGPS_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointGPS_CFD)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double position_confidence = 1;
  if (this->position_confidence() != 0) {
    total_size += 1 + 8;
  }

  // double plevation_confidence = 2;
  if (this->plevation_confidence() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointGPS_CFD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointGPS_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const PointGPS_CFD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointGPS_CFD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointGPS_CFD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointGPS_CFD)
    MergeFrom(*source);
  }
}

void PointGPS_CFD::MergeFrom(const PointGPS_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointGPS_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position_confidence() != 0) {
    set_position_confidence(from.position_confidence());
  }
  if (from.plevation_confidence() != 0) {
    set_plevation_confidence(from.plevation_confidence());
  }
}

void PointGPS_CFD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointGPS_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGPS_CFD::CopyFrom(const PointGPS_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointGPS_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGPS_CFD::IsInitialized() const {
  return true;
}

void PointGPS_CFD::Swap(PointGPS_CFD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointGPS_CFD::InternalSwap(PointGPS_CFD* other) {
  using std::swap;
  swap(position_confidence_, other->position_confidence_);
  swap(plevation_confidence_, other->plevation_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointGPS_CFD::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetSize_CFD::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetSize_CFD::kObjectWidthCfdFieldNumber;
const int TargetSize_CFD::kObjectLengthCfdFieldNumber;
const int TargetSize_CFD::kObjectHeightCfdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetSize_CFD::TargetSize_CFD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize_CFD.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TargetSize_CFD)
}
TargetSize_CFD::TargetSize_CFD(const TargetSize_CFD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_width_cfd_, &from.object_width_cfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_height_cfd_) -
    reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TargetSize_CFD)
}

void TargetSize_CFD::SharedCtor() {
  ::memset(&object_width_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_cfd_) -
      reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
}

TargetSize_CFD::~TargetSize_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TargetSize_CFD)
  SharedDtor();
}

void TargetSize_CFD::SharedDtor() {
}

void TargetSize_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TargetSize_CFD::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetSize_CFD& TargetSize_CFD::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize_CFD.base);
  return *internal_default_instance();
}


void TargetSize_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TargetSize_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_width_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_cfd_) -
      reinterpret_cast<char*>(&object_width_cfd_)) + sizeof(object_height_cfd_));
  _internal_metadata_.Clear();
}

bool TargetSize_CFD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.TargetSize_CFD)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float object_width_cfd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_width_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_length_cfd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_length_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_height_cfd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.TargetSize_CFD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.TargetSize_CFD)
  return false;
#undef DO_
}

void TargetSize_CFD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.TargetSize_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width_cfd = 1;
  if (this->object_width_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->object_width_cfd(), output);
  }

  // float object_length_cfd = 2;
  if (this->object_length_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->object_length_cfd(), output);
  }

  // float object_height_cfd = 3;
  if (this->object_height_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->object_height_cfd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.TargetSize_CFD)
}

::google::protobuf::uint8* TargetSize_CFD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TargetSize_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width_cfd = 1;
  if (this->object_width_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->object_width_cfd(), target);
  }

  // float object_length_cfd = 2;
  if (this->object_length_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->object_length_cfd(), target);
  }

  // float object_height_cfd = 3;
  if (this->object_height_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->object_height_cfd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TargetSize_CFD)
  return target;
}

size_t TargetSize_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TargetSize_CFD)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float object_width_cfd = 1;
  if (this->object_width_cfd() != 0) {
    total_size += 1 + 4;
  }

  // float object_length_cfd = 2;
  if (this->object_length_cfd() != 0) {
    total_size += 1 + 4;
  }

  // float object_height_cfd = 3;
  if (this->object_height_cfd() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSize_CFD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TargetSize_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSize_CFD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetSize_CFD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TargetSize_CFD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TargetSize_CFD)
    MergeFrom(*source);
  }
}

void TargetSize_CFD::MergeFrom(const TargetSize_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TargetSize_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_width_cfd() != 0) {
    set_object_width_cfd(from.object_width_cfd());
  }
  if (from.object_length_cfd() != 0) {
    set_object_length_cfd(from.object_length_cfd());
  }
  if (from.object_height_cfd() != 0) {
    set_object_height_cfd(from.object_height_cfd());
  }
}

void TargetSize_CFD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TargetSize_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSize_CFD::CopyFrom(const TargetSize_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TargetSize_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSize_CFD::IsInitialized() const {
  return true;
}

void TargetSize_CFD::Swap(TargetSize_CFD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetSize_CFD::InternalSwap(TargetSize_CFD* other) {
  using std::swap;
  swap(object_width_cfd_, other->object_width_cfd_);
  swap(object_length_cfd_, other->object_length_cfd_);
  swap(object_height_cfd_, other->object_height_cfd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TargetSize_CFD::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Acc4Way_CFD::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acc4Way_CFD::kLonAccConfidenceFieldNumber;
const int Acc4Way_CFD::kLatAccConfidenceFieldNumber;
const int Acc4Way_CFD::kVertAccConfidenceFieldNumber;
const int Acc4Way_CFD::kYawRateConFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acc4Way_CFD::Acc4Way_CFD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way_CFD.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Acc4Way_CFD)
}
Acc4Way_CFD::Acc4Way_CFD(const Acc4Way_CFD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lonaccconfidence_, &from.lonaccconfidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&yawratecon_) -
    reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Acc4Way_CFD)
}

void Acc4Way_CFD::SharedCtor() {
  ::memset(&lonaccconfidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawratecon_) -
      reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
}

Acc4Way_CFD::~Acc4Way_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Acc4Way_CFD)
  SharedDtor();
}

void Acc4Way_CFD::SharedDtor() {
}

void Acc4Way_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Acc4Way_CFD::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acc4Way_CFD& Acc4Way_CFD::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way_CFD.base);
  return *internal_default_instance();
}


void Acc4Way_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Acc4Way_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lonaccconfidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawratecon_) -
      reinterpret_cast<char*>(&lonaccconfidence_)) + sizeof(yawratecon_));
  _internal_metadata_.Clear();
}

bool Acc4Way_CFD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Acc4Way_CFD)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lonAccConfidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lonaccconfidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latAccConfidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lataccconfidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertAccConfidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertaccconfidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawRateCon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawratecon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Acc4Way_CFD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Acc4Way_CFD)
  return false;
#undef DO_
}

void Acc4Way_CFD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Acc4Way_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lonAccConfidence = 1;
  if (this->lonaccconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lonaccconfidence(), output);
  }

  // float latAccConfidence = 2;
  if (this->lataccconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lataccconfidence(), output);
  }

  // float vertAccConfidence = 3;
  if (this->vertaccconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vertaccconfidence(), output);
  }

  // float yawRateCon = 4;
  if (this->yawratecon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yawratecon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Acc4Way_CFD)
}

::google::protobuf::uint8* Acc4Way_CFD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Acc4Way_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lonAccConfidence = 1;
  if (this->lonaccconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lonaccconfidence(), target);
  }

  // float latAccConfidence = 2;
  if (this->lataccconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lataccconfidence(), target);
  }

  // float vertAccConfidence = 3;
  if (this->vertaccconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vertaccconfidence(), target);
  }

  // float yawRateCon = 4;
  if (this->yawratecon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yawratecon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Acc4Way_CFD)
  return target;
}

size_t Acc4Way_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Acc4Way_CFD)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float lonAccConfidence = 1;
  if (this->lonaccconfidence() != 0) {
    total_size += 1 + 4;
  }

  // float latAccConfidence = 2;
  if (this->lataccconfidence() != 0) {
    total_size += 1 + 4;
  }

  // float vertAccConfidence = 3;
  if (this->vertaccconfidence() != 0) {
    total_size += 1 + 4;
  }

  // float yawRateCon = 4;
  if (this->yawratecon() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc4Way_CFD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc4Way_CFD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acc4Way_CFD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Acc4Way_CFD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Acc4Way_CFD)
    MergeFrom(*source);
  }
}

void Acc4Way_CFD::MergeFrom(const Acc4Way_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lonaccconfidence() != 0) {
    set_lonaccconfidence(from.lonaccconfidence());
  }
  if (from.lataccconfidence() != 0) {
    set_lataccconfidence(from.lataccconfidence());
  }
  if (from.vertaccconfidence() != 0) {
    set_vertaccconfidence(from.vertaccconfidence());
  }
  if (from.yawratecon() != 0) {
    set_yawratecon(from.yawratecon());
  }
}

void Acc4Way_CFD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc4Way_CFD::CopyFrom(const Acc4Way_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Acc4Way_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc4Way_CFD::IsInitialized() const {
  return true;
}

void Acc4Way_CFD::Swap(Acc4Way_CFD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acc4Way_CFD::InternalSwap(Acc4Way_CFD* other) {
  using std::swap;
  swap(lonaccconfidence_, other->lonaccconfidence_);
  swap(lataccconfidence_, other->lataccconfidence_);
  swap(vertaccconfidence_, other->vertaccconfidence_);
  swap(yawratecon_, other->yawratecon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Acc4Way_CFD::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Motion_CFD::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Motion_CFD::kSpeedCfdFieldNumber;
const int Motion_CFD::kHeadingCfdFieldNumber;
const int Motion_CFD::kSteerCfdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Motion_CFD::Motion_CFD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Motion_CFD.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Motion_CFD)
}
Motion_CFD::Motion_CFD(const Motion_CFD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speedcfd_, &from.speedcfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&steercfd_) -
    reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Motion_CFD)
}

void Motion_CFD::SharedCtor() {
  ::memset(&speedcfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steercfd_) -
      reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
}

Motion_CFD::~Motion_CFD() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Motion_CFD)
  SharedDtor();
}

void Motion_CFD::SharedDtor() {
}

void Motion_CFD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Motion_CFD::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Motion_CFD& Motion_CFD::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Motion_CFD.base);
  return *internal_default_instance();
}


void Motion_CFD::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Motion_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speedcfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steercfd_) -
      reinterpret_cast<char*>(&speedcfd_)) + sizeof(steercfd_));
  _internal_metadata_.Clear();
}

bool Motion_CFD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Motion_CFD)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float speedCfd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedcfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headingCfd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headingcfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steerCfd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steercfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Motion_CFD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Motion_CFD)
  return false;
#undef DO_
}

void Motion_CFD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Motion_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speedCfd = 1;
  if (this->speedcfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speedcfd(), output);
  }

  // float headingCfd = 2;
  if (this->headingcfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->headingcfd(), output);
  }

  // float steerCfd = 3;
  if (this->steercfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->steercfd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Motion_CFD)
}

::google::protobuf::uint8* Motion_CFD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Motion_CFD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speedCfd = 1;
  if (this->speedcfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speedcfd(), target);
  }

  // float headingCfd = 2;
  if (this->headingcfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->headingcfd(), target);
  }

  // float steerCfd = 3;
  if (this->steercfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->steercfd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Motion_CFD)
  return target;
}

size_t Motion_CFD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Motion_CFD)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float speedCfd = 1;
  if (this->speedcfd() != 0) {
    total_size += 1 + 4;
  }

  // float headingCfd = 2;
  if (this->headingcfd() != 0) {
    total_size += 1 + 4;
  }

  // float steerCfd = 3;
  if (this->steercfd() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Motion_CFD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Motion_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  const Motion_CFD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Motion_CFD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Motion_CFD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Motion_CFD)
    MergeFrom(*source);
  }
}

void Motion_CFD::MergeFrom(const Motion_CFD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Motion_CFD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speedcfd() != 0) {
    set_speedcfd(from.speedcfd());
  }
  if (from.headingcfd() != 0) {
    set_headingcfd(from.headingcfd());
  }
  if (from.steercfd() != 0) {
    set_steercfd(from.steercfd());
  }
}

void Motion_CFD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Motion_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_CFD::CopyFrom(const Motion_CFD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Motion_CFD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_CFD::IsInitialized() const {
  return true;
}

void Motion_CFD::Swap(Motion_CFD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Motion_CFD::InternalSwap(Motion_CFD* other) {
  using std::swap;
  swap(speedcfd_, other->speedcfd_);
  swap(headingcfd_, other->headingcfd_);
  swap(steercfd_, other->steercfd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Motion_CFD::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Acc4Way::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acc4Way::kAcc4WayLonFieldNumber;
const int Acc4Way::kAcc4WayLatFieldNumber;
const int Acc4Way::kAcc4WayVertFieldNumber;
const int Acc4Way::kAcc4WayYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acc4Way::Acc4Way()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Acc4Way)
}
Acc4Way::Acc4Way(const Acc4Way& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc4waylon_, &from.acc4waylon_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc4wayyaw_) -
    reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Acc4Way)
}

void Acc4Way::SharedCtor() {
  ::memset(&acc4waylon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4wayyaw_) -
      reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
}

Acc4Way::~Acc4Way() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Acc4Way)
  SharedDtor();
}

void Acc4Way::SharedDtor() {
}

void Acc4Way::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Acc4Way::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acc4Way& Acc4Way::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Acc4Way.base);
  return *internal_default_instance();
}


void Acc4Way::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Acc4Way)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc4waylon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc4wayyaw_) -
      reinterpret_cast<char*>(&acc4waylon_)) + sizeof(acc4wayyaw_));
  _internal_metadata_.Clear();
}

bool Acc4Way::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Acc4Way)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float acc4WayLon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc4waylon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc4WayLat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc4waylat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc4WayVert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc4wayvert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc4WayYaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc4wayyaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Acc4Way)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Acc4Way)
  return false;
#undef DO_
}

void Acc4Way::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Acc4Way)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc4WayLon = 1;
  if (this->acc4waylon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->acc4waylon(), output);
  }

  // float acc4WayLat = 2;
  if (this->acc4waylat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acc4waylat(), output);
  }

  // float acc4WayVert = 3;
  if (this->acc4wayvert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acc4wayvert(), output);
  }

  // float acc4WayYaw = 4;
  if (this->acc4wayyaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acc4wayyaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Acc4Way)
}

::google::protobuf::uint8* Acc4Way::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Acc4Way)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc4WayLon = 1;
  if (this->acc4waylon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->acc4waylon(), target);
  }

  // float acc4WayLat = 2;
  if (this->acc4waylat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acc4waylat(), target);
  }

  // float acc4WayVert = 3;
  if (this->acc4wayvert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acc4wayvert(), target);
  }

  // float acc4WayYaw = 4;
  if (this->acc4wayyaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acc4wayyaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Acc4Way)
  return target;
}

size_t Acc4Way::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Acc4Way)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float acc4WayLon = 1;
  if (this->acc4waylon() != 0) {
    total_size += 1 + 4;
  }

  // float acc4WayLat = 2;
  if (this->acc4waylat() != 0) {
    total_size += 1 + 4;
  }

  // float acc4WayVert = 3;
  if (this->acc4wayvert() != 0) {
    total_size += 1 + 4;
  }

  // float acc4WayYaw = 4;
  if (this->acc4wayyaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc4Way::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Acc4Way)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc4Way* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acc4Way>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Acc4Way)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Acc4Way)
    MergeFrom(*source);
  }
}

void Acc4Way::MergeFrom(const Acc4Way& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Acc4Way)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc4waylon() != 0) {
    set_acc4waylon(from.acc4waylon());
  }
  if (from.acc4waylat() != 0) {
    set_acc4waylat(from.acc4waylat());
  }
  if (from.acc4wayvert() != 0) {
    set_acc4wayvert(from.acc4wayvert());
  }
  if (from.acc4wayyaw() != 0) {
    set_acc4wayyaw(from.acc4wayyaw());
  }
}

void Acc4Way::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Acc4Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc4Way::CopyFrom(const Acc4Way& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Acc4Way)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc4Way::IsInitialized() const {
  return true;
}

void Acc4Way::Swap(Acc4Way* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acc4Way::InternalSwap(Acc4Way* other) {
  using std::swap;
  swap(acc4waylon_, other->acc4waylon_);
  swap(acc4waylat_, other->acc4waylat_);
  swap(acc4wayvert_, other->acc4wayvert_);
  swap(acc4wayyaw_, other->acc4wayyaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Acc4Way::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetSize::kObjectWidthFieldNumber;
const int TargetSize::kObjectLengthFieldNumber;
const int TargetSize::kObjectHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetSize::TargetSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TargetSize)
}
TargetSize::TargetSize(const TargetSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_width_, &from.object_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_height_) -
    reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TargetSize)
}

void TargetSize::SharedCtor() {
  ::memset(&object_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_) -
      reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
}

TargetSize::~TargetSize() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TargetSize)
  SharedDtor();
}

void TargetSize::SharedDtor() {
}

void TargetSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TargetSize::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetSize& TargetSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TargetSize.base);
  return *internal_default_instance();
}


void TargetSize::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TargetSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_height_) -
      reinterpret_cast<char*>(&object_width_)) + sizeof(object_height_));
  _internal_metadata_.Clear();
}

bool TargetSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.TargetSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float object_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.TargetSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.TargetSize)
  return false;
#undef DO_
}

void TargetSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.TargetSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width = 1;
  if (this->object_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->object_width(), output);
  }

  // float object_length = 2;
  if (this->object_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->object_length(), output);
  }

  // float object_height = 3;
  if (this->object_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->object_height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.TargetSize)
}

::google::protobuf::uint8* TargetSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TargetSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float object_width = 1;
  if (this->object_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->object_width(), target);
  }

  // float object_length = 2;
  if (this->object_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->object_length(), target);
  }

  // float object_height = 3;
  if (this->object_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->object_height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TargetSize)
  return target;
}

size_t TargetSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TargetSize)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float object_width = 1;
  if (this->object_width() != 0) {
    total_size += 1 + 4;
  }

  // float object_length = 2;
  if (this->object_length() != 0) {
    total_size += 1 + 4;
  }

  // float object_height = 3;
  if (this->object_height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TargetSize)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TargetSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TargetSize)
    MergeFrom(*source);
  }
}

void TargetSize::MergeFrom(const TargetSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TargetSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_width() != 0) {
    set_object_width(from.object_width());
  }
  if (from.object_length() != 0) {
    set_object_length(from.object_length());
  }
  if (from.object_height() != 0) {
    set_object_height(from.object_height());
  }
}

void TargetSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TargetSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSize::CopyFrom(const TargetSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TargetSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSize::IsInitialized() const {
  return true;
}

void TargetSize::Swap(TargetSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetSize::InternalSwap(TargetSize* other) {
  using std::swap;
  swap(object_width_, other->object_width_);
  swap(object_length_, other->object_length_);
  swap(object_height_, other->object_height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TargetSize::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeBase::kYearFieldNumber;
const int TimeBase::kMonthFieldNumber;
const int TimeBase::kDayFieldNumber;
const int TimeBase::kHourFieldNumber;
const int TimeBase::kMinFieldNumber;
const int TimeBase::kSecondFieldNumber;
const int TimeBase::kMiilsecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeBase::TimeBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.TimeBase)
}
TimeBase::TimeBase(const TimeBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&miilsecond_) -
    reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.TimeBase)
}

void TimeBase::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miilsecond_) -
      reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
}

TimeBase::~TimeBase() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.TimeBase)
  SharedDtor();
}

void TimeBase::SharedDtor() {
}

void TimeBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeBase::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeBase& TimeBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_TimeBase.base);
  return *internal_default_instance();
}


void TimeBase::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.TimeBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miilsecond_) -
      reinterpret_cast<char*>(&year_)) + sizeof(miilsecond_));
  _internal_metadata_.Clear();
}

bool TimeBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.TimeBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 second = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 miilsecond = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miilsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.TimeBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.TimeBase)
  return false;
#undef DO_
}

void TimeBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.TimeBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // int32 min = 5;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min(), output);
  }

  // int32 second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  // int32 miilsecond = 7;
  if (this->miilsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->miilsecond(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.TimeBase)
}

::google::protobuf::uint8* TimeBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.TimeBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // int32 min = 5;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min(), target);
  }

  // int32 second = 6;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  // int32 miilsecond = 7;
  if (this->miilsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->miilsecond(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.TimeBase)
  return target;
}

size_t TimeBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.TimeBase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->day());
  }

  // int32 hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hour());
  }

  // int32 min = 5;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min());
  }

  // int32 second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second());
  }

  // int32 miilsecond = 7;
  if (this->miilsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->miilsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.TimeBase)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.TimeBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.TimeBase)
    MergeFrom(*source);
  }
}

void TimeBase::MergeFrom(const TimeBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.TimeBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
  if (from.miilsecond() != 0) {
    set_miilsecond(from.miilsecond());
  }
}

void TimeBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.TimeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBase::CopyFrom(const TimeBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.TimeBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBase::IsInitialized() const {
  return true;
}

void TimeBase::Swap(TimeBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeBase::InternalSwap(TimeBase* other) {
  using std::swap;
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(min_, other->min_);
  swap(second_, other->second_);
  swap(miilsecond_, other->miilsecond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeBase::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointGPS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointGPS::kObjectLongitudeFieldNumber;
const int PointGPS::kObjectLatitudeFieldNumber;
const int PointGPS::kObjectElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointGPS::PointGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointGPS)
}
PointGPS::PointGPS(const PointGPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_longitude_, &from.object_longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_elevation_) -
    reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointGPS)
}

void PointGPS::SharedCtor() {
  ::memset(&object_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_elevation_) -
      reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
}

PointGPS::~PointGPS() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointGPS)
  SharedDtor();
}

void PointGPS::SharedDtor() {
}

void PointGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointGPS::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointGPS& PointGPS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointGPS.base);
  return *internal_default_instance();
}


void PointGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_elevation_) -
      reinterpret_cast<char*>(&object_longitude_)) + sizeof(object_elevation_));
  _internal_metadata_.Clear();
}

bool PointGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PointGPS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double object_longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &object_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double object_latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &object_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double object_elevation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &object_elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PointGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PointGPS)
  return false;
#undef DO_
}

void PointGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double object_longitude = 1;
  if (this->object_longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->object_longitude(), output);
  }

  // double object_latitude = 2;
  if (this->object_latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->object_latitude(), output);
  }

  // double object_elevation = 3;
  if (this->object_elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->object_elevation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PointGPS)
}

::google::protobuf::uint8* PointGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double object_longitude = 1;
  if (this->object_longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->object_longitude(), target);
  }

  // double object_latitude = 2;
  if (this->object_latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->object_latitude(), target);
  }

  // double object_elevation = 3;
  if (this->object_elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->object_elevation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointGPS)
  return target;
}

size_t PointGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointGPS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double object_longitude = 1;
  if (this->object_longitude() != 0) {
    total_size += 1 + 8;
  }

  // double object_latitude = 2;
  if (this->object_latitude() != 0) {
    total_size += 1 + 8;
  }

  // double object_elevation = 3;
  if (this->object_elevation() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const PointGPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointGPS)
    MergeFrom(*source);
  }
}

void PointGPS::MergeFrom(const PointGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_longitude() != 0) {
    set_object_longitude(from.object_longitude());
  }
  if (from.object_latitude() != 0) {
    set_object_latitude(from.object_latitude());
  }
  if (from.object_elevation() != 0) {
    set_object_elevation(from.object_elevation());
  }
}

void PointGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointGPS::CopyFrom(const PointGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointGPS::IsInitialized() const {
  return true;
}

void PointGPS::Swap(PointGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointGPS::InternalSwap(PointGPS* other) {
  using std::swap;
  swap(object_longitude_, other->object_longitude_);
  swap(object_latitude_, other->object_latitude_);
  swap(object_elevation_, other->object_elevation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointGPS::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointDesc::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PointDesc_default_instance_._instance.get_mutable()->p_accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_PointDesc_default_instance_._instance.get_mutable()->p_pos_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointDesc::kPLongitudeFieldNumber;
const int PointDesc::kPLatitudeFieldNumber;
const int PointDesc::kPAltitudeFieldNumber;
const int PointDesc::kPNSFieldNumber;
const int PointDesc::kPEWFieldNumber;
const int PointDesc::kPSpeedFieldNumber;
const int PointDesc::kPHeadingFieldNumber;
const int PointDesc::kPAccel4WayFieldNumber;
const int PointDesc::kPDis2EndFieldNumber;
const int PointDesc::kPUpRegionNodeIdFieldNumber;
const int PointDesc::kPDownRegionNodeIdFieldNumber;
const int PointDesc::kPRelateLaneIdFieldNumber;
const int PointDesc::kSatelliteNumFieldNumber;
const int PointDesc::kPPosCfdFieldNumber;
const int PointDesc::kTimeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointDesc::PointDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PointDesc)
}
PointDesc::PointDesc(const PointDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_p_accel_4way()) {
    p_accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.p_accel_4way_);
  } else {
    p_accel_4way_ = NULL;
  }
  if (from.has_p_pos_cfd()) {
    p_pos_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.p_pos_cfd_);
  } else {
    p_pos_cfd_ = NULL;
  }
  ::memcpy(&p_longitude_, &from.p_longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_offset_) -
    reinterpret_cast<char*>(&p_longitude_)) + sizeof(time_offset_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PointDesc)
}

void PointDesc::SharedCtor() {
  ::memset(&p_accel_4way_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_offset_) -
      reinterpret_cast<char*>(&p_accel_4way_)) + sizeof(time_offset_));
}

PointDesc::~PointDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PointDesc)
  SharedDtor();
}

void PointDesc::SharedDtor() {
  if (this != internal_default_instance()) delete p_accel_4way_;
  if (this != internal_default_instance()) delete p_pos_cfd_;
}

void PointDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointDesc::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointDesc& PointDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PointDesc.base);
  return *internal_default_instance();
}


void PointDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PointDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && p_accel_4way_ != NULL) {
    delete p_accel_4way_;
  }
  p_accel_4way_ = NULL;
  if (GetArenaNoVirtual() == NULL && p_pos_cfd_ != NULL) {
    delete p_pos_cfd_;
  }
  p_pos_cfd_ = NULL;
  ::memset(&p_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_offset_) -
      reinterpret_cast<char*>(&p_longitude_)) + sizeof(time_offset_));
  _internal_metadata_.Clear();
}

bool PointDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PointDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double p_longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p_latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p_altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 p_NS = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 p_EW = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_ew_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_heading = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_accel_4way()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p_dis2end = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_dis2end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 p_up_region_node_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &p_up_region_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 p_down_region_node_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &p_down_region_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 p_relate_lane_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_relate_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 satellite_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellite_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_pos_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_offset = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PointDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PointDesc)
  return false;
#undef DO_
}

void PointDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PointDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double p_longitude = 1;
  if (this->p_longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->p_longitude(), output);
  }

  // double p_latitude = 2;
  if (this->p_latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p_latitude(), output);
  }

  // double p_altitude = 3;
  if (this->p_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->p_altitude(), output);
  }

  // int32 p_NS = 4;
  if (this->p_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->p_ns(), output);
  }

  // int32 p_EW = 5;
  if (this->p_ew() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->p_ew(), output);
  }

  // float p_speed = 6;
  if (this->p_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->p_speed(), output);
  }

  // float p_heading = 7;
  if (this->p_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->p_heading(), output);
  }

  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  if (this->has_p_accel_4way()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_p_accel_4way(), output);
  }

  // double p_dis2end = 9;
  if (this->p_dis2end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->p_dis2end(), output);
  }

  // int64 p_up_region_node_id = 10;
  if (this->p_up_region_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->p_up_region_node_id(), output);
  }

  // int64 p_down_region_node_id = 11;
  if (this->p_down_region_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->p_down_region_node_id(), output);
  }

  // int32 p_relate_lane_id = 12;
  if (this->p_relate_lane_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->p_relate_lane_id(), output);
  }

  // int32 satellite_num = 13;
  if (this->satellite_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->satellite_num(), output);
  }

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  if (this->has_p_pos_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_p_pos_cfd(), output);
  }

  // int32 time_offset = 15;
  if (this->time_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->time_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PointDesc)
}

::google::protobuf::uint8* PointDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PointDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double p_longitude = 1;
  if (this->p_longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->p_longitude(), target);
  }

  // double p_latitude = 2;
  if (this->p_latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->p_latitude(), target);
  }

  // double p_altitude = 3;
  if (this->p_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->p_altitude(), target);
  }

  // int32 p_NS = 4;
  if (this->p_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->p_ns(), target);
  }

  // int32 p_EW = 5;
  if (this->p_ew() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->p_ew(), target);
  }

  // float p_speed = 6;
  if (this->p_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->p_speed(), target);
  }

  // float p_heading = 7;
  if (this->p_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->p_heading(), target);
  }

  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  if (this->has_p_accel_4way()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_p_accel_4way(), deterministic, target);
  }

  // double p_dis2end = 9;
  if (this->p_dis2end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->p_dis2end(), target);
  }

  // int64 p_up_region_node_id = 10;
  if (this->p_up_region_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->p_up_region_node_id(), target);
  }

  // int64 p_down_region_node_id = 11;
  if (this->p_down_region_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->p_down_region_node_id(), target);
  }

  // int32 p_relate_lane_id = 12;
  if (this->p_relate_lane_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->p_relate_lane_id(), target);
  }

  // int32 satellite_num = 13;
  if (this->satellite_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->satellite_num(), target);
  }

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  if (this->has_p_pos_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_p_pos_cfd(), deterministic, target);
  }

  // int32 time_offset = 15;
  if (this->time_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->time_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PointDesc)
  return target;
}

size_t PointDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PointDesc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  if (this->has_p_accel_4way()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p_accel_4way_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  if (this->has_p_pos_cfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *p_pos_cfd_);
  }

  // double p_longitude = 1;
  if (this->p_longitude() != 0) {
    total_size += 1 + 8;
  }

  // double p_latitude = 2;
  if (this->p_latitude() != 0) {
    total_size += 1 + 8;
  }

  // double p_altitude = 3;
  if (this->p_altitude() != 0) {
    total_size += 1 + 8;
  }

  // int32 p_NS = 4;
  if (this->p_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->p_ns());
  }

  // int32 p_EW = 5;
  if (this->p_ew() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->p_ew());
  }

  // float p_speed = 6;
  if (this->p_speed() != 0) {
    total_size += 1 + 4;
  }

  // float p_heading = 7;
  if (this->p_heading() != 0) {
    total_size += 1 + 4;
  }

  // double p_dis2end = 9;
  if (this->p_dis2end() != 0) {
    total_size += 1 + 8;
  }

  // int64 p_up_region_node_id = 10;
  if (this->p_up_region_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->p_up_region_node_id());
  }

  // int64 p_down_region_node_id = 11;
  if (this->p_down_region_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->p_down_region_node_id());
  }

  // int32 p_relate_lane_id = 12;
  if (this->p_relate_lane_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->p_relate_lane_id());
  }

  // int32 satellite_num = 13;
  if (this->satellite_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satellite_num());
  }

  // int32 time_offset = 15;
  if (this->time_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PointDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const PointDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PointDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PointDesc)
    MergeFrom(*source);
  }
}

void PointDesc::MergeFrom(const PointDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PointDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p_accel_4way()) {
    mutable_p_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from.p_accel_4way());
  }
  if (from.has_p_pos_cfd()) {
    mutable_p_pos_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from.p_pos_cfd());
  }
  if (from.p_longitude() != 0) {
    set_p_longitude(from.p_longitude());
  }
  if (from.p_latitude() != 0) {
    set_p_latitude(from.p_latitude());
  }
  if (from.p_altitude() != 0) {
    set_p_altitude(from.p_altitude());
  }
  if (from.p_ns() != 0) {
    set_p_ns(from.p_ns());
  }
  if (from.p_ew() != 0) {
    set_p_ew(from.p_ew());
  }
  if (from.p_speed() != 0) {
    set_p_speed(from.p_speed());
  }
  if (from.p_heading() != 0) {
    set_p_heading(from.p_heading());
  }
  if (from.p_dis2end() != 0) {
    set_p_dis2end(from.p_dis2end());
  }
  if (from.p_up_region_node_id() != 0) {
    set_p_up_region_node_id(from.p_up_region_node_id());
  }
  if (from.p_down_region_node_id() != 0) {
    set_p_down_region_node_id(from.p_down_region_node_id());
  }
  if (from.p_relate_lane_id() != 0) {
    set_p_relate_lane_id(from.p_relate_lane_id());
  }
  if (from.satellite_num() != 0) {
    set_satellite_num(from.satellite_num());
  }
  if (from.time_offset() != 0) {
    set_time_offset(from.time_offset());
  }
}

void PointDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PointDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDesc::CopyFrom(const PointDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PointDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDesc::IsInitialized() const {
  return true;
}

void PointDesc::Swap(PointDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointDesc::InternalSwap(PointDesc* other) {
  using std::swap;
  swap(p_accel_4way_, other->p_accel_4way_);
  swap(p_pos_cfd_, other->p_pos_cfd_);
  swap(p_longitude_, other->p_longitude_);
  swap(p_latitude_, other->p_latitude_);
  swap(p_altitude_, other->p_altitude_);
  swap(p_ns_, other->p_ns_);
  swap(p_ew_, other->p_ew_);
  swap(p_speed_, other->p_speed_);
  swap(p_heading_, other->p_heading_);
  swap(p_dis2end_, other->p_dis2end_);
  swap(p_up_region_node_id_, other->p_up_region_node_id_);
  swap(p_down_region_node_id_, other->p_down_region_node_id_);
  swap(p_relate_lane_id_, other->p_relate_lane_id_);
  swap(satellite_num_, other->satellite_num_);
  swap(time_offset_, other->time_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointDesc::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathPoint::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PathPoint_default_instance_._instance.get_mutable()->pp_time_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_PathPoint_default_instance_._instance.get_mutable()->pp_point_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kPpTimeFieldNumber;
const int PathPoint::kPpPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pp_time()) {
    pp_time_ = new ::nebulalink::perceptron3::TimeBase(*from.pp_time_);
  } else {
    pp_time_ = NULL;
  }
  if (from.has_pp_point()) {
    pp_point_ = new ::nebulalink::perceptron3::PointDesc(*from.pp_point_);
  } else {
    pp_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PathPoint)
}

void PathPoint::SharedCtor() {
  ::memset(&pp_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pp_point_) -
      reinterpret_cast<char*>(&pp_time_)) + sizeof(pp_point_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  if (this != internal_default_instance()) delete pp_time_;
  if (this != internal_default_instance()) delete pp_point_;
}

void PathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPoint& PathPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPoint.base);
  return *internal_default_instance();
}


void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pp_time_ != NULL) {
    delete pp_time_;
  }
  pp_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && pp_point_ != NULL) {
    delete pp_point_;
  }
  pp_point_ = NULL;
  _internal_metadata_.Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PathPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulalink.perceptron3.TimeBase pp_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pp_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointDesc pp_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pp_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  if (this->has_pp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pp_time(), output);
  }

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  if (this->has_pp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pp_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  if (this->has_pp_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pp_time(), deterministic, target);
  }

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  if (this->has_pp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pp_point(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PathPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  if (this->has_pp_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pp_time_);
  }

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  if (this->has_pp_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pp_point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pp_time()) {
    mutable_pp_time()->::nebulalink::perceptron3::TimeBase::MergeFrom(from.pp_time());
  }
  if (from.has_pp_point()) {
    mutable_pp_point()->::nebulalink::perceptron3::PointDesc::MergeFrom(from.pp_point());
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  swap(pp_time_, other->pp_time_);
  swap(pp_point_, other->pp_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelateLinkDesc_RelateLane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelateLinkDesc_RelateLane::kRtlLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelateLinkDesc_RelateLane::RelateLinkDesc_RelateLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc_RelateLane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
}
RelateLinkDesc_RelateLane::RelateLinkDesc_RelateLane(const RelateLinkDesc_RelateLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtl_lane_id_ = from.rtl_lane_id_;
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
}

void RelateLinkDesc_RelateLane::SharedCtor() {
  rtl_lane_id_ = 0;
}

RelateLinkDesc_RelateLane::~RelateLinkDesc_RelateLane() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  SharedDtor();
}

void RelateLinkDesc_RelateLane::SharedDtor() {
}

void RelateLinkDesc_RelateLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelateLinkDesc_RelateLane::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelateLinkDesc_RelateLane& RelateLinkDesc_RelateLane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc_RelateLane.base);
  return *internal_default_instance();
}


void RelateLinkDesc_RelateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtl_lane_id_ = 0;
  _internal_metadata_.Clear();
}

bool RelateLinkDesc_RelateLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rtl_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtl_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  return false;
#undef DO_
}

void RelateLinkDesc_RelateLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rtl_lane_id = 1;
  if (this->rtl_lane_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rtl_lane_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
}

::google::protobuf::uint8* RelateLinkDesc_RelateLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rtl_lane_id = 1;
  if (this->rtl_lane_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rtl_lane_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  return target;
}

size_t RelateLinkDesc_RelateLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 rtl_lane_id = 1;
  if (this->rtl_lane_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rtl_lane_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkDesc_RelateLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkDesc_RelateLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelateLinkDesc_RelateLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
    MergeFrom(*source);
  }
}

void RelateLinkDesc_RelateLane::MergeFrom(const RelateLinkDesc_RelateLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rtl_lane_id() != 0) {
    set_rtl_lane_id(from.rtl_lane_id());
  }
}

void RelateLinkDesc_RelateLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkDesc_RelateLane::CopyFrom(const RelateLinkDesc_RelateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkDesc_RelateLane::IsInitialized() const {
  return true;
}

void RelateLinkDesc_RelateLane::Swap(RelateLinkDesc_RelateLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelateLinkDesc_RelateLane::InternalSwap(RelateLinkDesc_RelateLane* other) {
  using std::swap;
  swap(rtl_lane_id_, other->rtl_lane_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelateLinkDesc_RelateLane::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelateLinkDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelateLinkDesc::kUpRegionNodeIdFieldNumber;
const int RelateLinkDesc::kDownRegionNodeIdFieldNumber;
const int RelateLinkDesc::kRtlLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelateLinkDesc::RelateLinkDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelateLinkDesc)
}
RelateLinkDesc::RelateLinkDesc(const RelateLinkDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rtl_lanes_(from.rtl_lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&up_region_node_id_, &from.up_region_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_region_node_id_) -
    reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelateLinkDesc)
}

void RelateLinkDesc::SharedCtor() {
  ::memset(&up_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_region_node_id_) -
      reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
}

RelateLinkDesc::~RelateLinkDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelateLinkDesc)
  SharedDtor();
}

void RelateLinkDesc::SharedDtor() {
}

void RelateLinkDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelateLinkDesc::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelateLinkDesc& RelateLinkDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelateLinkDesc.base);
  return *internal_default_instance();
}


void RelateLinkDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelateLinkDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtl_lanes_.Clear();
  ::memset(&up_region_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_region_node_id_) -
      reinterpret_cast<char*>(&up_region_node_id_)) + sizeof(down_region_node_id_));
  _internal_metadata_.Clear();
}

bool RelateLinkDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.RelateLinkDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 up_region_node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_region_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 down_region_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_region_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rtl_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.RelateLinkDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.RelateLinkDesc)
  return false;
#undef DO_
}

void RelateLinkDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.RelateLinkDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 up_region_node_id = 1;
  if (this->up_region_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->up_region_node_id(), output);
  }

  // int32 down_region_node_id = 2;
  if (this->down_region_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->down_region_node_id(), output);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtl_lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->rtl_lanes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.RelateLinkDesc)
}

::google::protobuf::uint8* RelateLinkDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelateLinkDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 up_region_node_id = 1;
  if (this->up_region_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->up_region_node_id(), target);
  }

  // int32 down_region_node_id = 2;
  if (this->down_region_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->down_region_node_id(), target);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtl_lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->rtl_lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelateLinkDesc)
  return target;
}

size_t RelateLinkDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelateLinkDesc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rtl_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rtl_lanes(static_cast<int>(i)));
    }
  }

  // int32 up_region_node_id = 1;
  if (this->up_region_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->up_region_node_id());
  }

  // int32 down_region_node_id = 2;
  if (this->down_region_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->down_region_node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelateLinkDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelateLinkDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const RelateLinkDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelateLinkDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelateLinkDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelateLinkDesc)
    MergeFrom(*source);
  }
}

void RelateLinkDesc::MergeFrom(const RelateLinkDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelateLinkDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtl_lanes_.MergeFrom(from.rtl_lanes_);
  if (from.up_region_node_id() != 0) {
    set_up_region_node_id(from.up_region_node_id());
  }
  if (from.down_region_node_id() != 0) {
    set_down_region_node_id(from.down_region_node_id());
  }
}

void RelateLinkDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelateLinkDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelateLinkDesc::CopyFrom(const RelateLinkDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelateLinkDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelateLinkDesc::IsInitialized() const {
  return true;
}

void RelateLinkDesc::Swap(RelateLinkDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelateLinkDesc::InternalSwap(RelateLinkDesc* other) {
  using std::swap;
  CastToBase(&rtl_lanes_)->InternalSwap(CastToBase(&other->rtl_lanes_));
  swap(up_region_node_id_, other->up_region_node_id_);
  swap(down_region_node_id_, other->down_region_node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelateLinkDesc::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelatePathDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelatePathDesc::kRpdPathPointFieldNumber;
const int RelatePathDesc::kRpdRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelatePathDesc::RelatePathDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelatePathDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.RelatePathDesc)
}
RelatePathDesc::RelatePathDesc(const RelatePathDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rpd_pathpoint_(from.rpd_pathpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rpd_radius_ = from.rpd_radius_;
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.RelatePathDesc)
}

void RelatePathDesc::SharedCtor() {
  rpd_radius_ = 0;
}

RelatePathDesc::~RelatePathDesc() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.RelatePathDesc)
  SharedDtor();
}

void RelatePathDesc::SharedDtor() {
}

void RelatePathDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelatePathDesc::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelatePathDesc& RelatePathDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_RelatePathDesc.base);
  return *internal_default_instance();
}


void RelatePathDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.RelatePathDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpd_pathpoint_.Clear();
  rpd_radius_ = 0;
  _internal_metadata_.Clear();
}

bool RelatePathDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.RelatePathDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rpd_pathpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rpd_radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpd_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.RelatePathDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.RelatePathDesc)
  return false;
#undef DO_
}

void RelatePathDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.RelatePathDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rpd_pathpoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rpd_pathpoint(static_cast<int>(i)),
      output);
  }

  // float rpd_radius = 2;
  if (this->rpd_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rpd_radius(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.RelatePathDesc)
}

::google::protobuf::uint8* RelatePathDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.RelatePathDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rpd_pathpoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rpd_pathpoint(static_cast<int>(i)), deterministic, target);
  }

  // float rpd_radius = 2;
  if (this->rpd_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rpd_radius(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.RelatePathDesc)
  return target;
}

size_t RelatePathDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.RelatePathDesc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rpd_pathpoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rpd_pathpoint(static_cast<int>(i)));
    }
  }

  // float rpd_radius = 2;
  if (this->rpd_radius() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatePathDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.RelatePathDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatePathDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelatePathDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.RelatePathDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.RelatePathDesc)
    MergeFrom(*source);
  }
}

void RelatePathDesc::MergeFrom(const RelatePathDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.RelatePathDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rpd_pathpoint_.MergeFrom(from.rpd_pathpoint_);
  if (from.rpd_radius() != 0) {
    set_rpd_radius(from.rpd_radius());
  }
}

void RelatePathDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.RelatePathDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatePathDesc::CopyFrom(const RelatePathDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.RelatePathDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatePathDesc::IsInitialized() const {
  return true;
}

void RelatePathDesc::Swap(RelatePathDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelatePathDesc::InternalSwap(RelatePathDesc* other) {
  using std::swap;
  CastToBase(&rpd_pathpoint_)->InternalSwap(CastToBase(&other->rpd_pathpoint_));
  swap(rpd_radius_, other->rpd_radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelatePathDesc::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3::kXFieldNumber;
const int Point3::kYFieldNumber;
const int Point3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3::Point3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Point3)
}
Point3::Point3(const Point3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Point3)
}

void Point3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
}

void Point3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point3::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point3& Point3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point3.base);
  return *internal_default_instance();
}


void Point3::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Point3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Point3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Point3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Point3)
  return false;
#undef DO_
}

void Point3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Point3)
}

::google::protobuf::uint8* Point3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Point3)
  return target;
}

size_t Point3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Point3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Point3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Point3)
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {
  return true;
}

void Point3::Swap(Point3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3::InternalSwap(Point3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point3::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point4::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point4::kCameraXFieldNumber;
const int Point4::kCameraYFieldNumber;
const int Point4::kCameraWFieldNumber;
const int Point4::kCameraHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point4::Point4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point4.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Point4)
}
Point4::Point4(const Point4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_x_, &from.camera_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_h_) -
    reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Point4)
}

void Point4::SharedCtor() {
  ::memset(&camera_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_h_) -
      reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
}

Point4::~Point4() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Point4)
  SharedDtor();
}

void Point4::SharedDtor() {
}

void Point4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point4::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point4& Point4::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Point4.base);
  return *internal_default_instance();
}


void Point4::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Point4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_h_) -
      reinterpret_cast<char*>(&camera_x_)) + sizeof(camera_h_));
  _internal_metadata_.Clear();
}

bool Point4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Point4)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 camera_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 camera_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 camera_w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 camera_h = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Point4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Point4)
  return false;
#undef DO_
}

void Point4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Point4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_x = 1;
  if (this->camera_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camera_x(), output);
  }

  // int32 camera_y = 2;
  if (this->camera_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->camera_y(), output);
  }

  // int32 camera_w = 3;
  if (this->camera_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camera_w(), output);
  }

  // int32 camera_h = 4;
  if (this->camera_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camera_h(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Point4)
}

::google::protobuf::uint8* Point4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Point4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_x = 1;
  if (this->camera_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camera_x(), target);
  }

  // int32 camera_y = 2;
  if (this->camera_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->camera_y(), target);
  }

  // int32 camera_w = 3;
  if (this->camera_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camera_w(), target);
  }

  // int32 camera_h = 4;
  if (this->camera_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camera_h(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Point4)
  return target;
}

size_t Point4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Point4)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 camera_x = 1;
  if (this->camera_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_x());
  }

  // int32 camera_y = 2;
  if (this->camera_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_y());
  }

  // int32 camera_w = 3;
  if (this->camera_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_w());
  }

  // int32 camera_h = 4;
  if (this->camera_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_h());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Point4)
  GOOGLE_DCHECK_NE(&from, this);
  const Point4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Point4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Point4)
    MergeFrom(*source);
  }
}

void Point4::MergeFrom(const Point4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Point4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_x() != 0) {
    set_camera_x(from.camera_x());
  }
  if (from.camera_y() != 0) {
    set_camera_y(from.camera_y());
  }
  if (from.camera_w() != 0) {
    set_camera_w(from.camera_w());
  }
  if (from.camera_h() != 0) {
    set_camera_h(from.camera_h());
  }
}

void Point4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Point4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point4::CopyFrom(const Point4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Point4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point4::IsInitialized() const {
  return true;
}

void Point4::Swap(Point4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point4::InternalSwap(Point4* other) {
  using std::swap;
  swap(camera_x_, other->camera_x_);
  swap(camera_y_, other->camera_y_);
  swap(camera_w_, other->camera_w_);
  swap(camera_h_, other->camera_h_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point4::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Speed3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Speed3::kSpeedXFieldNumber;
const int Speed3::kSpeedYFieldNumber;
const int Speed3::kSpeedZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Speed3::Speed3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Speed3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Speed3)
}
Speed3::Speed3(const Speed3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_x_, &from.speed_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_z_) -
    reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Speed3)
}

void Speed3::SharedCtor() {
  ::memset(&speed_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_z_) -
      reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
}

Speed3::~Speed3() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Speed3)
  SharedDtor();
}

void Speed3::SharedDtor() {
}

void Speed3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Speed3::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Speed3& Speed3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Speed3.base);
  return *internal_default_instance();
}


void Speed3::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Speed3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_z_) -
      reinterpret_cast<char*>(&speed_x_)) + sizeof(speed_z_));
  _internal_metadata_.Clear();
}

bool Speed3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Speed3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float speed_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Speed3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Speed3)
  return false;
#undef DO_
}

void Speed3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Speed3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_x = 1;
  if (this->speed_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed_x(), output);
  }

  // float speed_y = 2;
  if (this->speed_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_y(), output);
  }

  // float speed_z = 3;
  if (this->speed_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Speed3)
}

::google::protobuf::uint8* Speed3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Speed3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_x = 1;
  if (this->speed_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed_x(), target);
  }

  // float speed_y = 2;
  if (this->speed_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_y(), target);
  }

  // float speed_z = 3;
  if (this->speed_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Speed3)
  return target;
}

size_t Speed3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Speed3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float speed_x = 1;
  if (this->speed_x() != 0) {
    total_size += 1 + 4;
  }

  // float speed_y = 2;
  if (this->speed_y() != 0) {
    total_size += 1 + 4;
  }

  // float speed_z = 3;
  if (this->speed_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Speed3)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Speed3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Speed3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Speed3)
    MergeFrom(*source);
  }
}

void Speed3::MergeFrom(const Speed3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Speed3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed_x() != 0) {
    set_speed_x(from.speed_x());
  }
  if (from.speed_y() != 0) {
    set_speed_y(from.speed_y());
  }
  if (from.speed_z() != 0) {
    set_speed_z(from.speed_z());
  }
}

void Speed3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Speed3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed3::CopyFrom(const Speed3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Speed3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed3::IsInitialized() const {
  return true;
}

void Speed3::Swap(Speed3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speed3::InternalSwap(Speed3* other) {
  using std::swap;
  swap(speed_x_, other->speed_x_);
  swap(speed_y_, other->speed_y_);
  swap(speed_z_, other->speed_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Speed3::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Planning_PB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Planning_PB::kDurationFieldNumber;
const int Planning_PB::kConfidFieldNumber;
const int Planning_PB::kDrivingBehaviorFieldNumber;
const int Planning_PB::kPathPlanningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Planning_PB::Planning_PB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Planning_PB.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Planning_PB)
}
Planning_PB::Planning_PB(const Planning_PB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_planning_(from.path_planning_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  driving_behavior_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driving_behavior().size() > 0) {
    driving_behavior_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_behavior_);
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&confid_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Planning_PB)
}

void Planning_PB::SharedCtor() {
  driving_behavior_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confid_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
}

Planning_PB::~Planning_PB() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Planning_PB)
  SharedDtor();
}

void Planning_PB::SharedDtor() {
  driving_behavior_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Planning_PB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Planning_PB::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Planning_PB& Planning_PB::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Planning_PB.base);
  return *internal_default_instance();
}


void Planning_PB::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Planning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_planning_.Clear();
  driving_behavior_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confid_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(confid_));
  _internal_metadata_.Clear();
}

bool Planning_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Planning_PB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 confid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driving_behavior = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driving_behavior()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driving_behavior().data(), static_cast<int>(this->driving_behavior().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Planning_PB.driving_behavior"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_planning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Planning_PB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Planning_PB)
  return false;
#undef DO_
}

void Planning_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Planning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // int32 confid = 2;
  if (this->confid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confid(), output);
  }

  // string driving_behavior = 3;
  if (this->driving_behavior().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_behavior().data(), static_cast<int>(this->driving_behavior().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Planning_PB.driving_behavior");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->driving_behavior(), output);
  }

  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_planning_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->path_planning(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Planning_PB)
}

::google::protobuf::uint8* Planning_PB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Planning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // int32 confid = 2;
  if (this->confid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confid(), target);
  }

  // string driving_behavior = 3;
  if (this->driving_behavior().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driving_behavior().data(), static_cast<int>(this->driving_behavior().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Planning_PB.driving_behavior");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->driving_behavior(), target);
  }

  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_planning_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->path_planning(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Planning_PB)
  return target;
}

size_t Planning_PB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Planning_PB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->path_planning_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_planning(static_cast<int>(i)));
    }
  }

  // string driving_behavior = 3;
  if (this->driving_behavior().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driving_behavior());
  }

  // int32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // int32 confid = 2;
  if (this->confid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Planning_PB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Planning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  const Planning_PB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Planning_PB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Planning_PB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Planning_PB)
    MergeFrom(*source);
  }
}

void Planning_PB::MergeFrom(const Planning_PB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Planning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_planning_.MergeFrom(from.path_planning_);
  if (from.driving_behavior().size() > 0) {

    driving_behavior_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driving_behavior_);
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.confid() != 0) {
    set_confid(from.confid());
  }
}

void Planning_PB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Planning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Planning_PB::CopyFrom(const Planning_PB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Planning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Planning_PB::IsInitialized() const {
  return true;
}

void Planning_PB::Swap(Planning_PB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Planning_PB::InternalSwap(Planning_PB* other) {
  using std::swap;
  CastToBase(&path_planning_)->InternalSwap(CastToBase(&other->path_planning_));
  driving_behavior_.Swap(&other->driving_behavior_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(confid_, other->confid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Planning_PB::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathPlanning_PB::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_pos_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_acce_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_PathPlanning_PB_default_instance_._instance.get_mutable()->pplan_acce_cfd_ = const_cast< ::nebulalink::perceptron3::Acc4Way_CFD*>(
      ::nebulalink::perceptron3::Acc4Way_CFD::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPlanning_PB::kPplanPosFieldNumber;
const int PathPlanning_PB::kPplanSpeedCfdFieldNumber;
const int PathPlanning_PB::kPplanHeadingCfdFieldNumber;
const int PathPlanning_PB::kPplanAcceFieldNumber;
const int PathPlanning_PB::kPplanAcceCfdFieldNumber;
const int PathPlanning_PB::kEstimatedTimeFieldNumber;
const int PathPlanning_PB::kTimeConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPlanning_PB::PathPlanning_PB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPlanning_PB.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PathPlanning_PB)
}
PathPlanning_PB::PathPlanning_PB(const PathPlanning_PB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pplan_pos()) {
    pplan_pos_ = new ::nebulalink::perceptron3::PointDesc(*from.pplan_pos_);
  } else {
    pplan_pos_ = NULL;
  }
  if (from.has_pplan_acce()) {
    pplan_acce_ = new ::nebulalink::perceptron3::Acc4Way(*from.pplan_acce_);
  } else {
    pplan_acce_ = NULL;
  }
  if (from.has_pplan_acce_cfd()) {
    pplan_acce_cfd_ = new ::nebulalink::perceptron3::Acc4Way_CFD(*from.pplan_acce_cfd_);
  } else {
    pplan_acce_cfd_ = NULL;
  }
  ::memcpy(&pplan_speed_cfd_, &from.pplan_speed_cfd_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_confidence_) -
    reinterpret_cast<char*>(&pplan_speed_cfd_)) + sizeof(time_confidence_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PathPlanning_PB)
}

void PathPlanning_PB::SharedCtor() {
  ::memset(&pplan_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&pplan_pos_)) + sizeof(time_confidence_));
}

PathPlanning_PB::~PathPlanning_PB() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PathPlanning_PB)
  SharedDtor();
}

void PathPlanning_PB::SharedDtor() {
  if (this != internal_default_instance()) delete pplan_pos_;
  if (this != internal_default_instance()) delete pplan_acce_;
  if (this != internal_default_instance()) delete pplan_acce_cfd_;
}

void PathPlanning_PB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPlanning_PB::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPlanning_PB& PathPlanning_PB::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PathPlanning_PB.base);
  return *internal_default_instance();
}


void PathPlanning_PB::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PathPlanning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pplan_pos_ != NULL) {
    delete pplan_pos_;
  }
  pplan_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && pplan_acce_ != NULL) {
    delete pplan_acce_;
  }
  pplan_acce_ = NULL;
  if (GetArenaNoVirtual() == NULL && pplan_acce_cfd_ != NULL) {
    delete pplan_acce_cfd_;
  }
  pplan_acce_cfd_ = NULL;
  ::memset(&pplan_speed_cfd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_confidence_) -
      reinterpret_cast<char*>(&pplan_speed_cfd_)) + sizeof(time_confidence_));
  _internal_metadata_.Clear();
}

bool PathPlanning_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PathPlanning_PB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pplan_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pplan_speed_cfd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pplan_speed_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pplan_heading_cfd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pplan_heading_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pplan_acce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pplan_acce_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 estimated_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PathPlanning_PB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PathPlanning_PB)
  return false;
#undef DO_
}

void PathPlanning_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PathPlanning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  if (this->has_pplan_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pplan_pos(), output);
  }

  // float pplan_speed_cfd = 2;
  if (this->pplan_speed_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pplan_speed_cfd(), output);
  }

  // float pplan_heading_cfd = 3;
  if (this->pplan_heading_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pplan_heading_cfd(), output);
  }

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  if (this->has_pplan_acce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pplan_acce(), output);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  if (this->has_pplan_acce_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pplan_acce_cfd(), output);
  }

  // int32 estimated_time = 6;
  if (this->estimated_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_time(), output);
  }

  // int32 time_confidence = 7;
  if (this->time_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PathPlanning_PB)
}

::google::protobuf::uint8* PathPlanning_PB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PathPlanning_PB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  if (this->has_pplan_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pplan_pos(), deterministic, target);
  }

  // float pplan_speed_cfd = 2;
  if (this->pplan_speed_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pplan_speed_cfd(), target);
  }

  // float pplan_heading_cfd = 3;
  if (this->pplan_heading_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pplan_heading_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  if (this->has_pplan_acce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pplan_acce(), deterministic, target);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  if (this->has_pplan_acce_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pplan_acce_cfd(), deterministic, target);
  }

  // int32 estimated_time = 6;
  if (this->estimated_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_time(), target);
  }

  // int32 time_confidence = 7;
  if (this->time_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PathPlanning_PB)
  return target;
}

size_t PathPlanning_PB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PathPlanning_PB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  if (this->has_pplan_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pplan_pos_);
  }

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  if (this->has_pplan_acce()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pplan_acce_);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  if (this->has_pplan_acce_cfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pplan_acce_cfd_);
  }

  // float pplan_speed_cfd = 2;
  if (this->pplan_speed_cfd() != 0) {
    total_size += 1 + 4;
  }

  // float pplan_heading_cfd = 3;
  if (this->pplan_heading_cfd() != 0) {
    total_size += 1 + 4;
  }

  // int32 estimated_time = 6;
  if (this->estimated_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->estimated_time());
  }

  // int32 time_confidence = 7;
  if (this->time_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPlanning_PB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PathPlanning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPlanning_PB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPlanning_PB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PathPlanning_PB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PathPlanning_PB)
    MergeFrom(*source);
  }
}

void PathPlanning_PB::MergeFrom(const PathPlanning_PB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PathPlanning_PB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pplan_pos()) {
    mutable_pplan_pos()->::nebulalink::perceptron3::PointDesc::MergeFrom(from.pplan_pos());
  }
  if (from.has_pplan_acce()) {
    mutable_pplan_acce()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from.pplan_acce());
  }
  if (from.has_pplan_acce_cfd()) {
    mutable_pplan_acce_cfd()->::nebulalink::perceptron3::Acc4Way_CFD::MergeFrom(from.pplan_acce_cfd());
  }
  if (from.pplan_speed_cfd() != 0) {
    set_pplan_speed_cfd(from.pplan_speed_cfd());
  }
  if (from.pplan_heading_cfd() != 0) {
    set_pplan_heading_cfd(from.pplan_heading_cfd());
  }
  if (from.estimated_time() != 0) {
    set_estimated_time(from.estimated_time());
  }
  if (from.time_confidence() != 0) {
    set_time_confidence(from.time_confidence());
  }
}

void PathPlanning_PB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PathPlanning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanning_PB::CopyFrom(const PathPlanning_PB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PathPlanning_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanning_PB::IsInitialized() const {
  return true;
}

void PathPlanning_PB::Swap(PathPlanning_PB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPlanning_PB::InternalSwap(PathPlanning_PB* other) {
  using std::swap;
  swap(pplan_pos_, other->pplan_pos_);
  swap(pplan_acce_, other->pplan_acce_);
  swap(pplan_acce_cfd_, other->pplan_acce_cfd_);
  swap(pplan_speed_cfd_, other->pplan_speed_cfd_);
  swap(pplan_heading_cfd_, other->pplan_heading_cfd_);
  swap(estimated_time_, other->estimated_time_);
  swap(time_confidence_, other->time_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPlanning_PB::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoEndLineValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoEndLineValues::InfoEndLineValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEndLineValues.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.InfoEndLineValues)
}
InfoEndLineValues::InfoEndLineValues(const InfoEndLineValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.InfoEndLineValues)
}

void InfoEndLineValues::SharedCtor() {
}

InfoEndLineValues::~InfoEndLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.InfoEndLineValues)
  SharedDtor();
}

void InfoEndLineValues::SharedDtor() {
}

void InfoEndLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InfoEndLineValues::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoEndLineValues& InfoEndLineValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEndLineValues.base);
  return *internal_default_instance();
}


void InfoEndLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.InfoEndLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool InfoEndLineValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.InfoEndLineValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.InfoEndLineValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.InfoEndLineValues)
  return false;
#undef DO_
}

void InfoEndLineValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.InfoEndLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.InfoEndLineValues)
}

::google::protobuf::uint8* InfoEndLineValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.InfoEndLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.InfoEndLineValues)
  return target;
}

size_t InfoEndLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.InfoEndLineValues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoEndLineValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.InfoEndLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoEndLineValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoEndLineValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.InfoEndLineValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.InfoEndLineValues)
    MergeFrom(*source);
  }
}

void InfoEndLineValues::MergeFrom(const InfoEndLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.InfoEndLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoEndLineValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.InfoEndLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoEndLineValues::CopyFrom(const InfoEndLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.InfoEndLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoEndLineValues::IsInitialized() const {
  return true;
}

void InfoEndLineValues::Swap(InfoEndLineValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoEndLineValues::InternalSwap(InfoEndLineValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InfoEndLineValues::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InfoEntreLineValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoEntreLineValues::InfoEntreLineValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEntreLineValues.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.InfoEntreLineValues)
}
InfoEntreLineValues::InfoEntreLineValues(const InfoEntreLineValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.InfoEntreLineValues)
}

void InfoEntreLineValues::SharedCtor() {
}

InfoEntreLineValues::~InfoEntreLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.InfoEntreLineValues)
  SharedDtor();
}

void InfoEntreLineValues::SharedDtor() {
}

void InfoEntreLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InfoEntreLineValues::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoEntreLineValues& InfoEntreLineValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_InfoEntreLineValues.base);
  return *internal_default_instance();
}


void InfoEntreLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.InfoEntreLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool InfoEntreLineValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.InfoEntreLineValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.InfoEntreLineValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.InfoEntreLineValues)
  return false;
#undef DO_
}

void InfoEntreLineValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.InfoEntreLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.InfoEntreLineValues)
}

::google::protobuf::uint8* InfoEntreLineValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.InfoEntreLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.InfoEntreLineValues)
  return target;
}

size_t InfoEntreLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.InfoEntreLineValues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoEntreLineValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoEntreLineValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoEntreLineValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.InfoEntreLineValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.InfoEntreLineValues)
    MergeFrom(*source);
  }
}

void InfoEntreLineValues::MergeFrom(const InfoEntreLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoEntreLineValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoEntreLineValues::CopyFrom(const InfoEntreLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.InfoEntreLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoEntreLineValues::IsInitialized() const {
  return true;
}

void InfoEntreLineValues::Swap(InfoEntreLineValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoEntreLineValues::InternalSwap(InfoEntreLineValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InfoEntreLineValues::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OnLineValues::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_OnLineValues_default_instance_._instance.get_mutable()->pos_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnLineValues::kCycleidFieldNumber;
const int OnLineValues::kPosFieldNumber;
const int OnLineValues::kVehnumFieldNumber;
const int OnLineValues::kAvgSpeedFieldNumber;
const int OnLineValues::kCrossNameFieldNumber;
const int OnLineValues::kCrossLanenoFieldNumber;
const int OnLineValues::kCrossVolumeFieldNumber;
const int OnLineValues::kCrossPeronVolumeFieldNumber;
const int OnLineValues::kCrossNoMotorVolumeFieldNumber;
const int OnLineValues::kCrossMinmotorVolumeFieldNumber;
const int OnLineValues::kCrossMedmotorVolumeFieldNumber;
const int OnLineValues::kCrossMaxmotorVolumeFieldNumber;
const int OnLineValues::kCrossPcuFieldNumber;
const int OnLineValues::kCrossAvspeedFieldNumber;
const int OnLineValues::kCrossTimeOccupanyFieldNumber;
const int OnLineValues::kCrossHeadwayFieldNumber;
const int OnLineValues::kCrossGapFieldNumber;
const int OnLineValues::kCrossAvdistanceFieldNumber;
const int OnLineValues::kCrossAvstopFieldNumber;
const int OnLineValues::kCrossSpeed85FieldNumber;
const int OnLineValues::kCrossQueueLengthFieldNumber;
const int OnLineValues::kCrossStoplineFieldNumber;
const int OnLineValues::kCrossSpaceOccupanyFieldNumber;
const int OnLineValues::kRoadLinklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnLineValues::OnLineValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_OnLineValues.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.OnLineValues)
}
OnLineValues::OnLineValues(const OnLineValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_linklist_(from.road_linklist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cross_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cross_name().size() > 0) {
    cross_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cross_name_);
  }
  if (from.has_pos()) {
    pos_ = new ::nebulalink::perceptron3::PointGPS(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&cycleid_, &from.cycleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_space_occupany_) -
    reinterpret_cast<char*>(&cycleid_)) + sizeof(cross_space_occupany_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.OnLineValues)
}

void OnLineValues::SharedCtor() {
  cross_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_space_occupany_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(cross_space_occupany_));
}

OnLineValues::~OnLineValues() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.OnLineValues)
  SharedDtor();
}

void OnLineValues::SharedDtor() {
  cross_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void OnLineValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OnLineValues::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnLineValues& OnLineValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_OnLineValues.base);
  return *internal_default_instance();
}


void OnLineValues::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.OnLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_linklist_.Clear();
  cross_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&cycleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_space_occupany_) -
      reinterpret_cast<char*>(&cycleid_)) + sizeof(cross_space_occupany_));
  _internal_metadata_.Clear();
}

bool OnLineValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.OnLineValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cycleid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehnum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float avgSpeed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cross_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cross_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cross_name().data(), static_cast<int>(this->cross_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.OnLineValues.cross_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_laneno = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_laneno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_volume = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_peron_volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_peron_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_no_motor_volume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_no_motor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_minmotor_volume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_minmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_medmotor_volume = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_medmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_maxmotor_volume = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_maxmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cross_pcu = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cross_pcu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_avspeed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_avspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_time_occupany = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_time_occupany_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_headway = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_headway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_gap = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_avdistance = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_avdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_avstop = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_avstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_speed85 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_speed85_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_queueLength = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_queuelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_stopline = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_stopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cross_space_occupany = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_space_occupany_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_linklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.OnLineValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.OnLineValues)
  return false;
#undef DO_
}

void OnLineValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.OnLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cycleid = 1;
  if (this->cycleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cycleid(), output);
  }

  // .nebulalink.perceptron3.PointGPS pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pos(), output);
  }

  // int32 vehnum = 3;
  if (this->vehnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vehnum(), output);
  }

  // float avgSpeed = 4;
  if (this->avgspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->avgspeed(), output);
  }

  // string cross_name = 5;
  if (this->cross_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cross_name().data(), static_cast<int>(this->cross_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.OnLineValues.cross_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cross_name(), output);
  }

  // int32 cross_laneno = 6;
  if (this->cross_laneno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cross_laneno(), output);
  }

  // int32 cross_volume = 7;
  if (this->cross_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cross_volume(), output);
  }

  // int32 cross_peron_volume = 8;
  if (this->cross_peron_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cross_peron_volume(), output);
  }

  // int32 cross_no_motor_volume = 9;
  if (this->cross_no_motor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cross_no_motor_volume(), output);
  }

  // int32 cross_minmotor_volume = 10;
  if (this->cross_minmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cross_minmotor_volume(), output);
  }

  // int32 cross_medmotor_volume = 11;
  if (this->cross_medmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cross_medmotor_volume(), output);
  }

  // int32 cross_maxmotor_volume = 12;
  if (this->cross_maxmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cross_maxmotor_volume(), output);
  }

  // int32 cross_pcu = 13;
  if (this->cross_pcu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cross_pcu(), output);
  }

  // float cross_avspeed = 14;
  if (this->cross_avspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->cross_avspeed(), output);
  }

  // float cross_time_occupany = 15;
  if (this->cross_time_occupany() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cross_time_occupany(), output);
  }

  // float cross_headway = 16;
  if (this->cross_headway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->cross_headway(), output);
  }

  // float cross_gap = 17;
  if (this->cross_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->cross_gap(), output);
  }

  // float cross_avdistance = 18;
  if (this->cross_avdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->cross_avdistance(), output);
  }

  // float cross_avstop = 19;
  if (this->cross_avstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->cross_avstop(), output);
  }

  // float cross_speed85 = 20;
  if (this->cross_speed85() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->cross_speed85(), output);
  }

  // float cross_queueLength = 21;
  if (this->cross_queuelength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->cross_queuelength(), output);
  }

  // float cross_stopline = 22;
  if (this->cross_stopline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->cross_stopline(), output);
  }

  // float cross_space_occupany = 23;
  if (this->cross_space_occupany() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->cross_space_occupany(), output);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_linklist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->road_linklist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.OnLineValues)
}

::google::protobuf::uint8* OnLineValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.OnLineValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cycleid = 1;
  if (this->cycleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cycleid(), target);
  }

  // .nebulalink.perceptron3.PointGPS pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pos(), deterministic, target);
  }

  // int32 vehnum = 3;
  if (this->vehnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vehnum(), target);
  }

  // float avgSpeed = 4;
  if (this->avgspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->avgspeed(), target);
  }

  // string cross_name = 5;
  if (this->cross_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cross_name().data(), static_cast<int>(this->cross_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.OnLineValues.cross_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cross_name(), target);
  }

  // int32 cross_laneno = 6;
  if (this->cross_laneno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cross_laneno(), target);
  }

  // int32 cross_volume = 7;
  if (this->cross_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cross_volume(), target);
  }

  // int32 cross_peron_volume = 8;
  if (this->cross_peron_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cross_peron_volume(), target);
  }

  // int32 cross_no_motor_volume = 9;
  if (this->cross_no_motor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cross_no_motor_volume(), target);
  }

  // int32 cross_minmotor_volume = 10;
  if (this->cross_minmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cross_minmotor_volume(), target);
  }

  // int32 cross_medmotor_volume = 11;
  if (this->cross_medmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cross_medmotor_volume(), target);
  }

  // int32 cross_maxmotor_volume = 12;
  if (this->cross_maxmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cross_maxmotor_volume(), target);
  }

  // int32 cross_pcu = 13;
  if (this->cross_pcu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cross_pcu(), target);
  }

  // float cross_avspeed = 14;
  if (this->cross_avspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->cross_avspeed(), target);
  }

  // float cross_time_occupany = 15;
  if (this->cross_time_occupany() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cross_time_occupany(), target);
  }

  // float cross_headway = 16;
  if (this->cross_headway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->cross_headway(), target);
  }

  // float cross_gap = 17;
  if (this->cross_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->cross_gap(), target);
  }

  // float cross_avdistance = 18;
  if (this->cross_avdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->cross_avdistance(), target);
  }

  // float cross_avstop = 19;
  if (this->cross_avstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->cross_avstop(), target);
  }

  // float cross_speed85 = 20;
  if (this->cross_speed85() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->cross_speed85(), target);
  }

  // float cross_queueLength = 21;
  if (this->cross_queuelength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->cross_queuelength(), target);
  }

  // float cross_stopline = 22;
  if (this->cross_stopline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->cross_stopline(), target);
  }

  // float cross_space_occupany = 23;
  if (this->cross_space_occupany() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->cross_space_occupany(), target);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_linklist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->road_linklist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.OnLineValues)
  return target;
}

size_t OnLineValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.OnLineValues)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->road_linklist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_linklist(static_cast<int>(i)));
    }
  }

  // string cross_name = 5;
  if (this->cross_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cross_name());
  }

  // .nebulalink.perceptron3.PointGPS pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 cycleid = 1;
  if (this->cycleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycleid());
  }

  // int32 vehnum = 3;
  if (this->vehnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehnum());
  }

  // float avgSpeed = 4;
  if (this->avgspeed() != 0) {
    total_size += 1 + 4;
  }

  // int32 cross_laneno = 6;
  if (this->cross_laneno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_laneno());
  }

  // int32 cross_volume = 7;
  if (this->cross_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_volume());
  }

  // int32 cross_peron_volume = 8;
  if (this->cross_peron_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_peron_volume());
  }

  // int32 cross_no_motor_volume = 9;
  if (this->cross_no_motor_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_no_motor_volume());
  }

  // int32 cross_minmotor_volume = 10;
  if (this->cross_minmotor_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_minmotor_volume());
  }

  // int32 cross_medmotor_volume = 11;
  if (this->cross_medmotor_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_medmotor_volume());
  }

  // int32 cross_maxmotor_volume = 12;
  if (this->cross_maxmotor_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_maxmotor_volume());
  }

  // int32 cross_pcu = 13;
  if (this->cross_pcu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cross_pcu());
  }

  // float cross_avspeed = 14;
  if (this->cross_avspeed() != 0) {
    total_size += 1 + 4;
  }

  // float cross_time_occupany = 15;
  if (this->cross_time_occupany() != 0) {
    total_size += 1 + 4;
  }

  // float cross_headway = 16;
  if (this->cross_headway() != 0) {
    total_size += 2 + 4;
  }

  // float cross_gap = 17;
  if (this->cross_gap() != 0) {
    total_size += 2 + 4;
  }

  // float cross_avdistance = 18;
  if (this->cross_avdistance() != 0) {
    total_size += 2 + 4;
  }

  // float cross_avstop = 19;
  if (this->cross_avstop() != 0) {
    total_size += 2 + 4;
  }

  // float cross_speed85 = 20;
  if (this->cross_speed85() != 0) {
    total_size += 2 + 4;
  }

  // float cross_queueLength = 21;
  if (this->cross_queuelength() != 0) {
    total_size += 2 + 4;
  }

  // float cross_stopline = 22;
  if (this->cross_stopline() != 0) {
    total_size += 2 + 4;
  }

  // float cross_space_occupany = 23;
  if (this->cross_space_occupany() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnLineValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.OnLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  const OnLineValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnLineValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.OnLineValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.OnLineValues)
    MergeFrom(*source);
  }
}

void OnLineValues::MergeFrom(const OnLineValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.OnLineValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_linklist_.MergeFrom(from.road_linklist_);
  if (from.cross_name().size() > 0) {

    cross_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cross_name_);
  }
  if (from.has_pos()) {
    mutable_pos()->::nebulalink::perceptron3::PointGPS::MergeFrom(from.pos());
  }
  if (from.cycleid() != 0) {
    set_cycleid(from.cycleid());
  }
  if (from.vehnum() != 0) {
    set_vehnum(from.vehnum());
  }
  if (from.avgspeed() != 0) {
    set_avgspeed(from.avgspeed());
  }
  if (from.cross_laneno() != 0) {
    set_cross_laneno(from.cross_laneno());
  }
  if (from.cross_volume() != 0) {
    set_cross_volume(from.cross_volume());
  }
  if (from.cross_peron_volume() != 0) {
    set_cross_peron_volume(from.cross_peron_volume());
  }
  if (from.cross_no_motor_volume() != 0) {
    set_cross_no_motor_volume(from.cross_no_motor_volume());
  }
  if (from.cross_minmotor_volume() != 0) {
    set_cross_minmotor_volume(from.cross_minmotor_volume());
  }
  if (from.cross_medmotor_volume() != 0) {
    set_cross_medmotor_volume(from.cross_medmotor_volume());
  }
  if (from.cross_maxmotor_volume() != 0) {
    set_cross_maxmotor_volume(from.cross_maxmotor_volume());
  }
  if (from.cross_pcu() != 0) {
    set_cross_pcu(from.cross_pcu());
  }
  if (from.cross_avspeed() != 0) {
    set_cross_avspeed(from.cross_avspeed());
  }
  if (from.cross_time_occupany() != 0) {
    set_cross_time_occupany(from.cross_time_occupany());
  }
  if (from.cross_headway() != 0) {
    set_cross_headway(from.cross_headway());
  }
  if (from.cross_gap() != 0) {
    set_cross_gap(from.cross_gap());
  }
  if (from.cross_avdistance() != 0) {
    set_cross_avdistance(from.cross_avdistance());
  }
  if (from.cross_avstop() != 0) {
    set_cross_avstop(from.cross_avstop());
  }
  if (from.cross_speed85() != 0) {
    set_cross_speed85(from.cross_speed85());
  }
  if (from.cross_queuelength() != 0) {
    set_cross_queuelength(from.cross_queuelength());
  }
  if (from.cross_stopline() != 0) {
    set_cross_stopline(from.cross_stopline());
  }
  if (from.cross_space_occupany() != 0) {
    set_cross_space_occupany(from.cross_space_occupany());
  }
}

void OnLineValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.OnLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnLineValues::CopyFrom(const OnLineValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.OnLineValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnLineValues::IsInitialized() const {
  return true;
}

void OnLineValues::Swap(OnLineValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnLineValues::InternalSwap(OnLineValues* other) {
  using std::swap;
  CastToBase(&road_linklist_)->InternalSwap(CastToBase(&other->road_linklist_));
  cross_name_.Swap(&other->cross_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(cycleid_, other->cycleid_);
  swap(vehnum_, other->vehnum_);
  swap(avgspeed_, other->avgspeed_);
  swap(cross_laneno_, other->cross_laneno_);
  swap(cross_volume_, other->cross_volume_);
  swap(cross_peron_volume_, other->cross_peron_volume_);
  swap(cross_no_motor_volume_, other->cross_no_motor_volume_);
  swap(cross_minmotor_volume_, other->cross_minmotor_volume_);
  swap(cross_medmotor_volume_, other->cross_medmotor_volume_);
  swap(cross_maxmotor_volume_, other->cross_maxmotor_volume_);
  swap(cross_pcu_, other->cross_pcu_);
  swap(cross_avspeed_, other->cross_avspeed_);
  swap(cross_time_occupany_, other->cross_time_occupany_);
  swap(cross_headway_, other->cross_headway_);
  swap(cross_gap_, other->cross_gap_);
  swap(cross_avdistance_, other->cross_avdistance_);
  swap(cross_avstop_, other->cross_avstop_);
  swap(cross_speed85_, other->cross_speed85_);
  swap(cross_queuelength_, other->cross_queuelength_);
  swap(cross_stopline_, other->cross_stopline_);
  swap(cross_space_occupany_, other->cross_space_occupany_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OnLineValues::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameArray::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameArray::kPerceptronFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameArray::FrameArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_FrameArray.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.FrameArray)
}
FrameArray::FrameArray(const FrameArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perceptron_(from.perceptron_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.FrameArray)
}

void FrameArray::SharedCtor() {
}

FrameArray::~FrameArray() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.FrameArray)
  SharedDtor();
}

void FrameArray::SharedDtor() {
}

void FrameArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrameArray::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameArray& FrameArray::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_FrameArray.base);
  return *internal_default_instance();
}


void FrameArray::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.FrameArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perceptron_.Clear();
  _internal_metadata_.Clear();
}

bool FrameArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.FrameArray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_perceptron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.FrameArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.FrameArray)
  return false;
#undef DO_
}

void FrameArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.FrameArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->perceptron(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.FrameArray)
}

::google::protobuf::uint8* FrameArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.FrameArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->perceptron(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.FrameArray)
  return target;
}

size_t FrameArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.FrameArray)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perceptron_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perceptron(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.FrameArray)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.FrameArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.FrameArray)
    MergeFrom(*source);
  }
}

void FrameArray::MergeFrom(const FrameArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.FrameArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perceptron_.MergeFrom(from.perceptron_);
}

void FrameArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.FrameArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameArray::CopyFrom(const FrameArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.FrameArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameArray::IsInitialized() const {
  return true;
}

void FrameArray::Swap(FrameArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameArray::InternalSwap(FrameArray* other) {
  using std::swap;
  CastToBase(&perceptron_)->InternalSwap(CastToBase(&other->perceptron_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrameArray::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Nebulalink_Extend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nebulalink_Extend::kVersionFieldNumber;
const int Nebulalink_Extend::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nebulalink_Extend::Nebulalink_Extend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Nebulalink_Extend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Nebulalink_Extend)
}
Nebulalink_Extend::Nebulalink_Extend(const Nebulalink_Extend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Nebulalink_Extend)
}

void Nebulalink_Extend::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Nebulalink_Extend::~Nebulalink_Extend() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Nebulalink_Extend)
  SharedDtor();
}

void Nebulalink_Extend::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Nebulalink_Extend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nebulalink_Extend::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nebulalink_Extend& Nebulalink_Extend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Nebulalink_Extend.base);
  return *internal_default_instance();
}


void Nebulalink_Extend::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Nebulalink_Extend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Nebulalink_Extend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Nebulalink_Extend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Nebulalink_Extend.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Nebulalink_Extend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Nebulalink_Extend)
  return false;
#undef DO_
}

void Nebulalink_Extend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Nebulalink_Extend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Nebulalink_Extend.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // repeated float feature = 2;
  if (this->feature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _feature_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->feature().data(), this->feature_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Nebulalink_Extend)
}

::google::protobuf::uint8* Nebulalink_Extend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Nebulalink_Extend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Nebulalink_Extend.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // repeated float feature = 2;
  if (this->feature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _feature_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->feature_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Nebulalink_Extend)
  return target;
}

size_t Nebulalink_Extend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Nebulalink_Extend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nebulalink_Extend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  GOOGLE_DCHECK_NE(&from, this);
  const Nebulalink_Extend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nebulalink_Extend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Nebulalink_Extend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Nebulalink_Extend)
    MergeFrom(*source);
  }
}

void Nebulalink_Extend::MergeFrom(const Nebulalink_Extend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void Nebulalink_Extend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nebulalink_Extend::CopyFrom(const Nebulalink_Extend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Nebulalink_Extend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nebulalink_Extend::IsInitialized() const {
  return true;
}

void Nebulalink_Extend::Swap(Nebulalink_Extend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nebulalink_Extend::InternalSwap(Nebulalink_Extend* other) {
  using std::swap;
  feature_.InternalSwap(&other->feature_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nebulalink_Extend::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void V2XOBUs::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_V2XOBUs_default_instance_._instance.get_mutable()->obu_point_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_V2XOBUs_default_instance_._instance.get_mutable()->obu_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V2XOBUs::kObuPointFieldNumber;
const int V2XOBUs::kObuWheelAngleFieldNumber;
const int V2XOBUs::kObuTimeStampFieldNumber;
const int V2XOBUs::kObuVehTypeFieldNumber;
const int V2XOBUs::kObuFuelTypeFieldNumber;
const int V2XOBUs::kObuLightFieldNumber;
const int V2XOBUs::kObuBrakeStateFieldNumber;
const int V2XOBUs::kObuVehStateFieldNumber;
const int V2XOBUs::kObuCfdFieldNumber;
const int V2XOBUs::kObuSizeFieldNumber;
const int V2XOBUs::kObuPlatenumFieldNumber;
const int V2XOBUs::kObuDeviceidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V2XOBUs::V2XOBUs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_V2XOBUs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.V2XOBUs)
}
V2XOBUs::V2XOBUs(const V2XOBUs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obu_platenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obu_platenum().size() > 0) {
    obu_platenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obu_platenum_);
  }
  obu_deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obu_deviceid().size() > 0) {
    obu_deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obu_deviceid_);
  }
  if (from.has_obu_point()) {
    obu_point_ = new ::nebulalink::perceptron3::PointDesc(*from.obu_point_);
  } else {
    obu_point_ = NULL;
  }
  if (from.has_obu_size()) {
    obu_size_ = new ::nebulalink::perceptron3::TargetSize(*from.obu_size_);
  } else {
    obu_size_ = NULL;
  }
  ::memcpy(&obu_time_stamp_, &from.obu_time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&obu_cfd_) -
    reinterpret_cast<char*>(&obu_time_stamp_)) + sizeof(obu_cfd_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.V2XOBUs)
}

void V2XOBUs::SharedCtor() {
  obu_platenum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&obu_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obu_cfd_) -
      reinterpret_cast<char*>(&obu_point_)) + sizeof(obu_cfd_));
}

V2XOBUs::~V2XOBUs() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.V2XOBUs)
  SharedDtor();
}

void V2XOBUs::SharedDtor() {
  obu_platenum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obu_point_;
  if (this != internal_default_instance()) delete obu_size_;
}

void V2XOBUs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* V2XOBUs::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V2XOBUs& V2XOBUs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_V2XOBUs.base);
  return *internal_default_instance();
}


void V2XOBUs::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.V2XOBUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obu_platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obu_deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && obu_point_ != NULL) {
    delete obu_point_;
  }
  obu_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && obu_size_ != NULL) {
    delete obu_size_;
  }
  obu_size_ = NULL;
  ::memset(&obu_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obu_cfd_) -
      reinterpret_cast<char*>(&obu_time_stamp_)) + sizeof(obu_cfd_));
  _internal_metadata_.Clear();
}

bool V2XOBUs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.V2XOBUs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nebulalink.perceptron3.PointDesc obu_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obu_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obu_wheel_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obu_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obu_time_stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obu_time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obu_veh_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obu_veh_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obu_fuel_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obu_fuel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obu_light = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obu_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obu_brake_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obu_brake_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obu_veh_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obu_veh_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obu_cfd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obu_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TargetSize obu_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obu_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes obu_platenum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_obu_platenum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string obu_deviceid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obu_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obu_deviceid().data(), static_cast<int>(this->obu_deviceid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.V2XOBUs.obu_deviceid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.V2XOBUs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.V2XOBUs)
  return false;
#undef DO_
}

void V2XOBUs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.V2XOBUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  if (this->has_obu_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_obu_point(), output);
  }

  // float obu_wheel_angle = 2;
  if (this->obu_wheel_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->obu_wheel_angle(), output);
  }

  // int64 obu_time_stamp = 3;
  if (this->obu_time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->obu_time_stamp(), output);
  }

  // int32 obu_veh_type = 4;
  if (this->obu_veh_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obu_veh_type(), output);
  }

  // int32 obu_fuel_type = 5;
  if (this->obu_fuel_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->obu_fuel_type(), output);
  }

  // int32 obu_light = 6;
  if (this->obu_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->obu_light(), output);
  }

  // int32 obu_brake_state = 7;
  if (this->obu_brake_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->obu_brake_state(), output);
  }

  // int32 obu_veh_state = 8;
  if (this->obu_veh_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->obu_veh_state(), output);
  }

  // float obu_cfd = 9;
  if (this->obu_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->obu_cfd(), output);
  }

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  if (this->has_obu_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_obu_size(), output);
  }

  // bytes obu_platenum = 11;
  if (this->obu_platenum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->obu_platenum(), output);
  }

  // string obu_deviceid = 12;
  if (this->obu_deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obu_deviceid().data(), static_cast<int>(this->obu_deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.V2XOBUs.obu_deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->obu_deviceid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.V2XOBUs)
}

::google::protobuf::uint8* V2XOBUs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.V2XOBUs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  if (this->has_obu_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_obu_point(), deterministic, target);
  }

  // float obu_wheel_angle = 2;
  if (this->obu_wheel_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->obu_wheel_angle(), target);
  }

  // int64 obu_time_stamp = 3;
  if (this->obu_time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->obu_time_stamp(), target);
  }

  // int32 obu_veh_type = 4;
  if (this->obu_veh_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obu_veh_type(), target);
  }

  // int32 obu_fuel_type = 5;
  if (this->obu_fuel_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->obu_fuel_type(), target);
  }

  // int32 obu_light = 6;
  if (this->obu_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->obu_light(), target);
  }

  // int32 obu_brake_state = 7;
  if (this->obu_brake_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->obu_brake_state(), target);
  }

  // int32 obu_veh_state = 8;
  if (this->obu_veh_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->obu_veh_state(), target);
  }

  // float obu_cfd = 9;
  if (this->obu_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->obu_cfd(), target);
  }

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  if (this->has_obu_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_obu_size(), deterministic, target);
  }

  // bytes obu_platenum = 11;
  if (this->obu_platenum().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->obu_platenum(), target);
  }

  // string obu_deviceid = 12;
  if (this->obu_deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obu_deviceid().data(), static_cast<int>(this->obu_deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.V2XOBUs.obu_deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->obu_deviceid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.V2XOBUs)
  return target;
}

size_t V2XOBUs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.V2XOBUs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes obu_platenum = 11;
  if (this->obu_platenum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->obu_platenum());
  }

  // string obu_deviceid = 12;
  if (this->obu_deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obu_deviceid());
  }

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  if (this->has_obu_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obu_point_);
  }

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  if (this->has_obu_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obu_size_);
  }

  // int64 obu_time_stamp = 3;
  if (this->obu_time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obu_time_stamp());
  }

  // float obu_wheel_angle = 2;
  if (this->obu_wheel_angle() != 0) {
    total_size += 1 + 4;
  }

  // int32 obu_veh_type = 4;
  if (this->obu_veh_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obu_veh_type());
  }

  // int32 obu_fuel_type = 5;
  if (this->obu_fuel_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obu_fuel_type());
  }

  // int32 obu_light = 6;
  if (this->obu_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obu_light());
  }

  // int32 obu_brake_state = 7;
  if (this->obu_brake_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obu_brake_state());
  }

  // int32 obu_veh_state = 8;
  if (this->obu_veh_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obu_veh_state());
  }

  // float obu_cfd = 9;
  if (this->obu_cfd() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V2XOBUs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.V2XOBUs)
  GOOGLE_DCHECK_NE(&from, this);
  const V2XOBUs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V2XOBUs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.V2XOBUs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.V2XOBUs)
    MergeFrom(*source);
  }
}

void V2XOBUs::MergeFrom(const V2XOBUs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.V2XOBUs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obu_platenum().size() > 0) {

    obu_platenum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obu_platenum_);
  }
  if (from.obu_deviceid().size() > 0) {

    obu_deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obu_deviceid_);
  }
  if (from.has_obu_point()) {
    mutable_obu_point()->::nebulalink::perceptron3::PointDesc::MergeFrom(from.obu_point());
  }
  if (from.has_obu_size()) {
    mutable_obu_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from.obu_size());
  }
  if (from.obu_time_stamp() != 0) {
    set_obu_time_stamp(from.obu_time_stamp());
  }
  if (from.obu_wheel_angle() != 0) {
    set_obu_wheel_angle(from.obu_wheel_angle());
  }
  if (from.obu_veh_type() != 0) {
    set_obu_veh_type(from.obu_veh_type());
  }
  if (from.obu_fuel_type() != 0) {
    set_obu_fuel_type(from.obu_fuel_type());
  }
  if (from.obu_light() != 0) {
    set_obu_light(from.obu_light());
  }
  if (from.obu_brake_state() != 0) {
    set_obu_brake_state(from.obu_brake_state());
  }
  if (from.obu_veh_state() != 0) {
    set_obu_veh_state(from.obu_veh_state());
  }
  if (from.obu_cfd() != 0) {
    set_obu_cfd(from.obu_cfd());
  }
}

void V2XOBUs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.V2XOBUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V2XOBUs::CopyFrom(const V2XOBUs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.V2XOBUs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V2XOBUs::IsInitialized() const {
  return true;
}

void V2XOBUs::Swap(V2XOBUs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V2XOBUs::InternalSwap(V2XOBUs* other) {
  using std::swap;
  obu_platenum_.Swap(&other->obu_platenum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  obu_deviceid_.Swap(&other->obu_deviceid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obu_point_, other->obu_point_);
  swap(obu_size_, other->obu_size_);
  swap(obu_time_stamp_, other->obu_time_stamp_);
  swap(obu_wheel_angle_, other->obu_wheel_angle_);
  swap(obu_veh_type_, other->obu_veh_type_);
  swap(obu_fuel_type_, other->obu_fuel_type_);
  swap(obu_light_, other->obu_light_);
  swap(obu_brake_state_, other->obu_brake_state_);
  swap(obu_veh_state_, other->obu_veh_state_);
  swap(obu_cfd_, other->obu_cfd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata V2XOBUs::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectorRegion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectorRegion::kPolygonPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectorRegion::DetectorRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_DetectorRegion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.DetectorRegion)
}
DetectorRegion::DetectorRegion(const DetectorRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      polygonpoint_(from.polygonpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.DetectorRegion)
}

void DetectorRegion::SharedCtor() {
}

DetectorRegion::~DetectorRegion() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.DetectorRegion)
  SharedDtor();
}

void DetectorRegion::SharedDtor() {
}

void DetectorRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetectorRegion::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectorRegion& DetectorRegion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_DetectorRegion.base);
  return *internal_default_instance();
}


void DetectorRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.DetectorRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygonpoint_.Clear();
  _internal_metadata_.Clear();
}

bool DetectorRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.DetectorRegion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygonpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.DetectorRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.DetectorRegion)
  return false;
#undef DO_
}

void DetectorRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.DetectorRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygonpoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->polygonpoint(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.DetectorRegion)
}

::google::protobuf::uint8* DetectorRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.DetectorRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygonpoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->polygonpoint(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.DetectorRegion)
  return target;
}

size_t DetectorRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.DetectorRegion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->polygonpoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygonpoint(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectorRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.DetectorRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectorRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectorRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.DetectorRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.DetectorRegion)
    MergeFrom(*source);
  }
}

void DetectorRegion::MergeFrom(const DetectorRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.DetectorRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygonpoint_.MergeFrom(from.polygonpoint_);
}

void DetectorRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.DetectorRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorRegion::CopyFrom(const DetectorRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.DetectorRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorRegion::IsInitialized() const {
  return true;
}

void DetectorRegion::Swap(DetectorRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectorRegion::InternalSwap(DetectorRegion* other) {
  using std::swap;
  CastToBase(&polygonpoint_)->InternalSwap(CastToBase(&other->polygonpoint_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetectorRegion::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Perceptron::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point3f_ = const_cast< ::nebulalink::perceptron3::Point3*>(
      ::nebulalink::perceptron3::Point3::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point4f_ = const_cast< ::nebulalink::perceptron3::Point4*>(
      ::nebulalink::perceptron3::Point4::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->speed3f_ = const_cast< ::nebulalink::perceptron3::Speed3*>(
      ::nebulalink::perceptron3::Speed3::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->target_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->point_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_time_stamp_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_gps_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_motino_cfd_ = const_cast< ::nebulalink::perceptron3::Motion_CFD*>(
      ::nebulalink::perceptron3::Motion_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_size_cfd_ = const_cast< ::nebulalink::perceptron3::TargetSize_CFD*>(
      ::nebulalink::perceptron3::TargetSize_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Perceptron_default_instance_._instance.get_mutable()->ptc_accel_4way_cfd_ = const_cast< ::nebulalink::perceptron3::Acc4Way_CFD*>(
      ::nebulalink::perceptron3::Acc4Way_CFD::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Perceptron::kIsTrackerFieldNumber;
const int Perceptron::kObjectConfidenceFieldNumber;
const int Perceptron::kLaneIdFieldNumber;
const int Perceptron::kObjectClassTypeFieldNumber;
const int Perceptron::kObjectIdFieldNumber;
const int Perceptron::kPoint3FFieldNumber;
const int Perceptron::kPoint4FFieldNumber;
const int Perceptron::kObjectSpeedFieldNumber;
const int Perceptron::kSpeed3FFieldNumber;
const int Perceptron::kObjectAccelerationFieldNumber;
const int Perceptron::kTargetSizeFieldNumber;
const int Perceptron::kPointGpsFieldNumber;
const int Perceptron::kObjectNSFieldNumber;
const int Perceptron::kObjectWEFieldNumber;
const int Perceptron::kObjectDirectionFieldNumber;
const int Perceptron::kObjectHeadingFieldNumber;
const int Perceptron::kIsHeadTailFieldNumber;
const int Perceptron::kLaneTypeFieldNumber;
const int Perceptron::kPlateNumFieldNumber;
const int Perceptron::kObjectsIdentityFieldNumber;
const int Perceptron::kFuelTypeFieldNumber;
const int Perceptron::kAccel4WayFieldNumber;
const int Perceptron::kObjTimeStampFieldNumber;
const int Perceptron::kPtcSourcetypeFieldNumber;
const int Perceptron::kPtcTimeStampFieldNumber;
const int Perceptron::kPtcGpsCfdFieldNumber;
const int Perceptron::kPtcTranStateFieldNumber;
const int Perceptron::kPtcAngleFieldNumber;
const int Perceptron::kPtcMotinoCfdFieldNumber;
const int Perceptron::kPtcVehTypeFieldNumber;
const int Perceptron::kPtcSizeCfdFieldNumber;
const int Perceptron::kPtcExttypeFieldNumber;
const int Perceptron::kPtcExttypeCfdFieldNumber;
const int Perceptron::kPtcAccel4WayCfdFieldNumber;
const int Perceptron::kPtcStatusDurationFieldNumber;
const int Perceptron::kPtcPathpointHistoryFieldNumber;
const int Perceptron::kPtcPlanningListFieldNumber;
const int Perceptron::kPtcPolygonPointFieldNumber;
const int Perceptron::kPtcSatelliteFieldNumber;
const int Perceptron::kPtcRegionidFieldNumber;
const int Perceptron::kPtcNodeidFieldNumber;
const int Perceptron::kPtcLaneidFieldNumber;
const int Perceptron::kPtcLinkNameFieldNumber;
const int Perceptron::kPtcLinkWidthFieldNumber;
const int Perceptron::kPtcVehPlateTypeFieldNumber;
const int Perceptron::kPtcVehPlateColorFieldNumber;
const int Perceptron::kPtcVehColorFieldNumber;
const int Perceptron::kNebulaExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Perceptron::Perceptron()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Perceptron.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Perceptron)
}
Perceptron::Perceptron(const Perceptron& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ptc_pathpoint_history_(from.ptc_pathpoint_history_),
      ptc_planning_list_(from.ptc_planning_list_),
      ptc_polygonpoint_(from.ptc_polygonpoint_),
      nebula_extend_(from.nebula_extend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  plate_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plate_num().size() > 0) {
    plate_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  objects_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objects_identity().size() > 0) {
    objects_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objects_identity_);
  }
  ptc_link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ptc_link_name().size() > 0) {
    ptc_link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptc_link_name_);
  }
  if (from.has_point3f()) {
    point3f_ = new ::nebulalink::perceptron3::Point3(*from.point3f_);
  } else {
    point3f_ = NULL;
  }
  if (from.has_point4f()) {
    point4f_ = new ::nebulalink::perceptron3::Point4(*from.point4f_);
  } else {
    point4f_ = NULL;
  }
  if (from.has_speed3f()) {
    speed3f_ = new ::nebulalink::perceptron3::Speed3(*from.speed3f_);
  } else {
    speed3f_ = NULL;
  }
  if (from.has_target_size()) {
    target_size_ = new ::nebulalink::perceptron3::TargetSize(*from.target_size_);
  } else {
    target_size_ = NULL;
  }
  if (from.has_point_gps()) {
    point_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.point_gps_);
  } else {
    point_gps_ = NULL;
  }
  if (from.has_accel_4way()) {
    accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.accel_4way_);
  } else {
    accel_4way_ = NULL;
  }
  if (from.has_ptc_time_stamp()) {
    ptc_time_stamp_ = new ::nebulalink::perceptron3::TimeBase(*from.ptc_time_stamp_);
  } else {
    ptc_time_stamp_ = NULL;
  }
  if (from.has_ptc_gps_cfd()) {
    ptc_gps_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.ptc_gps_cfd_);
  } else {
    ptc_gps_cfd_ = NULL;
  }
  if (from.has_ptc_motino_cfd()) {
    ptc_motino_cfd_ = new ::nebulalink::perceptron3::Motion_CFD(*from.ptc_motino_cfd_);
  } else {
    ptc_motino_cfd_ = NULL;
  }
  if (from.has_ptc_size_cfd()) {
    ptc_size_cfd_ = new ::nebulalink::perceptron3::TargetSize_CFD(*from.ptc_size_cfd_);
  } else {
    ptc_size_cfd_ = NULL;
  }
  if (from.has_ptc_accel_4way_cfd()) {
    ptc_accel_4way_cfd_ = new ::nebulalink::perceptron3::Acc4Way_CFD(*from.ptc_accel_4way_cfd_);
  } else {
    ptc_accel_4way_cfd_ = NULL;
  }
  ::memcpy(&is_tracker_, &from.is_tracker_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptc_veh_color_) -
    reinterpret_cast<char*>(&is_tracker_)) + sizeof(ptc_veh_color_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Perceptron)
}

void Perceptron::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objects_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&point3f_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptc_veh_color_) -
      reinterpret_cast<char*>(&point3f_)) + sizeof(ptc_veh_color_));
}

Perceptron::~Perceptron() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Perceptron)
  SharedDtor();
}

void Perceptron::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objects_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point3f_;
  if (this != internal_default_instance()) delete point4f_;
  if (this != internal_default_instance()) delete speed3f_;
  if (this != internal_default_instance()) delete target_size_;
  if (this != internal_default_instance()) delete point_gps_;
  if (this != internal_default_instance()) delete accel_4way_;
  if (this != internal_default_instance()) delete ptc_time_stamp_;
  if (this != internal_default_instance()) delete ptc_gps_cfd_;
  if (this != internal_default_instance()) delete ptc_motino_cfd_;
  if (this != internal_default_instance()) delete ptc_size_cfd_;
  if (this != internal_default_instance()) delete ptc_accel_4way_cfd_;
}

void Perceptron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Perceptron::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Perceptron& Perceptron::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Perceptron.base);
  return *internal_default_instance();
}


void Perceptron::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptc_pathpoint_history_.Clear();
  ptc_planning_list_.Clear();
  ptc_polygonpoint_.Clear();
  nebula_extend_.Clear();
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plate_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objects_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptc_link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && point3f_ != NULL) {
    delete point3f_;
  }
  point3f_ = NULL;
  if (GetArenaNoVirtual() == NULL && point4f_ != NULL) {
    delete point4f_;
  }
  point4f_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed3f_ != NULL) {
    delete speed3f_;
  }
  speed3f_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_size_ != NULL) {
    delete target_size_;
  }
  target_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && point_gps_ != NULL) {
    delete point_gps_;
  }
  point_gps_ = NULL;
  if (GetArenaNoVirtual() == NULL && accel_4way_ != NULL) {
    delete accel_4way_;
  }
  accel_4way_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptc_time_stamp_ != NULL) {
    delete ptc_time_stamp_;
  }
  ptc_time_stamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptc_gps_cfd_ != NULL) {
    delete ptc_gps_cfd_;
  }
  ptc_gps_cfd_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptc_motino_cfd_ != NULL) {
    delete ptc_motino_cfd_;
  }
  ptc_motino_cfd_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptc_size_cfd_ != NULL) {
    delete ptc_size_cfd_;
  }
  ptc_size_cfd_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptc_accel_4way_cfd_ != NULL) {
    delete ptc_accel_4way_cfd_;
  }
  ptc_accel_4way_cfd_ = NULL;
  ::memset(&is_tracker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptc_veh_color_) -
      reinterpret_cast<char*>(&is_tracker_)) + sizeof(ptc_veh_color_));
  _internal_metadata_.Clear();
}

bool Perceptron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Perceptron)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_tracker = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tracker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Perceptron.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_class_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Point3 point3f = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point3f()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Point4 point4f = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point4f()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Speed3 speed3f = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed3f()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_acceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TargetSize target_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS point_gps = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_NS = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_WE = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_we_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_direction = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_heading = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_head_tail = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_head_tail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes plate_num = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plate_num()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objects_identity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objects_identity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objects_identity().data(), static_cast<int>(this->objects_identity().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Perceptron.objects_identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fuel_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accel_4way()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 obj_time_stamp = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &obj_time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_sourcetype = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_sourcetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptc_time_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptc_gps_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_tran_state = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_tran_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ptc_angle = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptc_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptc_motino_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_veh_type = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_veh_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptc_size_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_Exttype = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_exttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ptc_Exttype_cfd = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptc_exttype_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptc_accel_4way_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_status_duration = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_status_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ptc_pathpoint_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ptc_planning_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ptc_polygonpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_satellite = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_satellite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_regionid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_regionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_nodeid = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_laneid = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ptc_link_name = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptc_link_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ptc_link_name().data(), static_cast<int>(this->ptc_link_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Perceptron.ptc_link_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_link_width = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_link_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_veh_plate_type = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_veh_plate_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_veh_plate_color = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_veh_plate_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ptc_veh_color = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_veh_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nebula_extend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Perceptron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Perceptron)
  return false;
#undef DO_
}

void Perceptron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_tracker = 1;
  if (this->is_tracker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_tracker(), output);
  }

  // float object_confidence = 2;
  if (this->object_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->object_confidence(), output);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lane_id(), output);
  }

  // int32 object_class_type = 4;
  if (this->object_class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->object_class_type(), output);
  }

  // int32 object_id = 5;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->object_id(), output);
  }

  // .nebulalink.perceptron3.Point3 point3f = 6;
  if (this->has_point3f()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_point3f(), output);
  }

  // .nebulalink.perceptron3.Point4 point4f = 7;
  if (this->has_point4f()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_point4f(), output);
  }

  // float object_speed = 8;
  if (this->object_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->object_speed(), output);
  }

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  if (this->has_speed3f()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_speed3f(), output);
  }

  // float object_acceleration = 10;
  if (this->object_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->object_acceleration(), output);
  }

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  if (this->has_target_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_target_size(), output);
  }

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  if (this->has_point_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_point_gps(), output);
  }

  // int32 object_NS = 13;
  if (this->object_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->object_ns(), output);
  }

  // int32 object_WE = 14;
  if (this->object_we() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->object_we(), output);
  }

  // float object_direction = 15;
  if (this->object_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->object_direction(), output);
  }

  // float object_heading = 16;
  if (this->object_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->object_heading(), output);
  }

  // int32 is_head_tail = 17;
  if (this->is_head_tail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_head_tail(), output);
  }

  // int32 lane_type = 18;
  if (this->lane_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lane_type(), output);
  }

  // bytes plate_num = 19;
  if (this->plate_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->plate_num(), output);
  }

  // string objects_identity = 20;
  if (this->objects_identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objects_identity().data(), static_cast<int>(this->objects_identity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.objects_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->objects_identity(), output);
  }

  // int32 fuel_type = 21;
  if (this->fuel_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fuel_type(), output);
  }

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  if (this->has_accel_4way()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_accel_4way(), output);
  }

  // int64 obj_time_stamp = 23;
  if (this->obj_time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->obj_time_stamp(), output);
  }

  // int32 ptc_sourcetype = 24;
  if (this->ptc_sourcetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ptc_sourcetype(), output);
  }

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  if (this->has_ptc_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_ptc_time_stamp(), output);
  }

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  if (this->has_ptc_gps_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_ptc_gps_cfd(), output);
  }

  // int32 ptc_tran_state = 27;
  if (this->ptc_tran_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ptc_tran_state(), output);
  }

  // float ptc_angle = 28;
  if (this->ptc_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->ptc_angle(), output);
  }

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  if (this->has_ptc_motino_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_ptc_motino_cfd(), output);
  }

  // int32 ptc_veh_type = 30;
  if (this->ptc_veh_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ptc_veh_type(), output);
  }

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  if (this->has_ptc_size_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_ptc_size_cfd(), output);
  }

  // int32 ptc_Exttype = 32;
  if (this->ptc_exttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->ptc_exttype(), output);
  }

  // float ptc_Exttype_cfd = 33;
  if (this->ptc_exttype_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->ptc_exttype_cfd(), output);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  if (this->has_ptc_accel_4way_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_internal_ptc_accel_4way_cfd(), output);
  }

  // int32 ptc_status_duration = 35;
  if (this->ptc_status_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ptc_status_duration(), output);
  }

  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_pathpoint_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36,
      this->ptc_pathpoint_history(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_planning_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37,
      this->ptc_planning_list(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_polygonpoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38,
      this->ptc_polygonpoint(static_cast<int>(i)),
      output);
  }

  // int32 ptc_satellite = 39;
  if (this->ptc_satellite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->ptc_satellite(), output);
  }

  // int32 ptc_regionid = 40;
  if (this->ptc_regionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->ptc_regionid(), output);
  }

  // int32 ptc_nodeid = 41;
  if (this->ptc_nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->ptc_nodeid(), output);
  }

  // int32 ptc_laneid = 42;
  if (this->ptc_laneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->ptc_laneid(), output);
  }

  // string ptc_link_name = 43;
  if (this->ptc_link_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptc_link_name().data(), static_cast<int>(this->ptc_link_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.ptc_link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->ptc_link_name(), output);
  }

  // int32 ptc_link_width = 44;
  if (this->ptc_link_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->ptc_link_width(), output);
  }

  // int32 ptc_veh_plate_type = 45;
  if (this->ptc_veh_plate_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->ptc_veh_plate_type(), output);
  }

  // int32 ptc_veh_plate_color = 46;
  if (this->ptc_veh_plate_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->ptc_veh_plate_color(), output);
  }

  // int32 ptc_veh_color = 47;
  if (this->ptc_veh_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->ptc_veh_color(), output);
  }

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nebula_extend_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48,
      this->nebula_extend(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Perceptron)
}

::google::protobuf::uint8* Perceptron::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_tracker = 1;
  if (this->is_tracker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_tracker(), target);
  }

  // float object_confidence = 2;
  if (this->object_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->object_confidence(), target);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lane_id(), target);
  }

  // int32 object_class_type = 4;
  if (this->object_class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->object_class_type(), target);
  }

  // int32 object_id = 5;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->object_id(), target);
  }

  // .nebulalink.perceptron3.Point3 point3f = 6;
  if (this->has_point3f()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_point3f(), deterministic, target);
  }

  // .nebulalink.perceptron3.Point4 point4f = 7;
  if (this->has_point4f()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_point4f(), deterministic, target);
  }

  // float object_speed = 8;
  if (this->object_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->object_speed(), target);
  }

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  if (this->has_speed3f()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_speed3f(), deterministic, target);
  }

  // float object_acceleration = 10;
  if (this->object_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->object_acceleration(), target);
  }

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  if (this->has_target_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_target_size(), deterministic, target);
  }

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  if (this->has_point_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_point_gps(), deterministic, target);
  }

  // int32 object_NS = 13;
  if (this->object_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->object_ns(), target);
  }

  // int32 object_WE = 14;
  if (this->object_we() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->object_we(), target);
  }

  // float object_direction = 15;
  if (this->object_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->object_direction(), target);
  }

  // float object_heading = 16;
  if (this->object_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->object_heading(), target);
  }

  // int32 is_head_tail = 17;
  if (this->is_head_tail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_head_tail(), target);
  }

  // int32 lane_type = 18;
  if (this->lane_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->lane_type(), target);
  }

  // bytes plate_num = 19;
  if (this->plate_num().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->plate_num(), target);
  }

  // string objects_identity = 20;
  if (this->objects_identity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objects_identity().data(), static_cast<int>(this->objects_identity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.objects_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->objects_identity(), target);
  }

  // int32 fuel_type = 21;
  if (this->fuel_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fuel_type(), target);
  }

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  if (this->has_accel_4way()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_accel_4way(), deterministic, target);
  }

  // int64 obj_time_stamp = 23;
  if (this->obj_time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->obj_time_stamp(), target);
  }

  // int32 ptc_sourcetype = 24;
  if (this->ptc_sourcetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ptc_sourcetype(), target);
  }

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  if (this->has_ptc_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_ptc_time_stamp(), deterministic, target);
  }

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  if (this->has_ptc_gps_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_ptc_gps_cfd(), deterministic, target);
  }

  // int32 ptc_tran_state = 27;
  if (this->ptc_tran_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ptc_tran_state(), target);
  }

  // float ptc_angle = 28;
  if (this->ptc_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->ptc_angle(), target);
  }

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  if (this->has_ptc_motino_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_ptc_motino_cfd(), deterministic, target);
  }

  // int32 ptc_veh_type = 30;
  if (this->ptc_veh_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ptc_veh_type(), target);
  }

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  if (this->has_ptc_size_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_ptc_size_cfd(), deterministic, target);
  }

  // int32 ptc_Exttype = 32;
  if (this->ptc_exttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->ptc_exttype(), target);
  }

  // float ptc_Exttype_cfd = 33;
  if (this->ptc_exttype_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->ptc_exttype_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  if (this->has_ptc_accel_4way_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->_internal_ptc_accel_4way_cfd(), deterministic, target);
  }

  // int32 ptc_status_duration = 35;
  if (this->ptc_status_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ptc_status_duration(), target);
  }

  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_pathpoint_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->ptc_pathpoint_history(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_planning_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->ptc_planning_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ptc_polygonpoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        38, this->ptc_polygonpoint(static_cast<int>(i)), deterministic, target);
  }

  // int32 ptc_satellite = 39;
  if (this->ptc_satellite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->ptc_satellite(), target);
  }

  // int32 ptc_regionid = 40;
  if (this->ptc_regionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->ptc_regionid(), target);
  }

  // int32 ptc_nodeid = 41;
  if (this->ptc_nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->ptc_nodeid(), target);
  }

  // int32 ptc_laneid = 42;
  if (this->ptc_laneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->ptc_laneid(), target);
  }

  // string ptc_link_name = 43;
  if (this->ptc_link_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptc_link_name().data(), static_cast<int>(this->ptc_link_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Perceptron.ptc_link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->ptc_link_name(), target);
  }

  // int32 ptc_link_width = 44;
  if (this->ptc_link_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->ptc_link_width(), target);
  }

  // int32 ptc_veh_plate_type = 45;
  if (this->ptc_veh_plate_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->ptc_veh_plate_type(), target);
  }

  // int32 ptc_veh_plate_color = 46;
  if (this->ptc_veh_plate_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->ptc_veh_plate_color(), target);
  }

  // int32 ptc_veh_color = 47;
  if (this->ptc_veh_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->ptc_veh_color(), target);
  }

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nebula_extend_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        48, this->nebula_extend(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Perceptron)
  return target;
}

size_t Perceptron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Perceptron)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->ptc_pathpoint_history_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ptc_pathpoint_history(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->ptc_planning_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ptc_planning_list(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->ptc_polygonpoint_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ptc_polygonpoint(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  {
    unsigned int count = static_cast<unsigned int>(this->nebula_extend_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nebula_extend(static_cast<int>(i)));
    }
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // bytes plate_num = 19;
  if (this->plate_num().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->plate_num());
  }

  // string objects_identity = 20;
  if (this->objects_identity().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objects_identity());
  }

  // string ptc_link_name = 43;
  if (this->ptc_link_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ptc_link_name());
  }

  // .nebulalink.perceptron3.Point3 point3f = 6;
  if (this->has_point3f()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point3f_);
  }

  // .nebulalink.perceptron3.Point4 point4f = 7;
  if (this->has_point4f()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point4f_);
  }

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  if (this->has_speed3f()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed3f_);
  }

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  if (this->has_target_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_size_);
  }

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  if (this->has_point_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_gps_);
  }

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  if (this->has_accel_4way()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *accel_4way_);
  }

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  if (this->has_ptc_time_stamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptc_time_stamp_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  if (this->has_ptc_gps_cfd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptc_gps_cfd_);
  }

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  if (this->has_ptc_motino_cfd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptc_motino_cfd_);
  }

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  if (this->has_ptc_size_cfd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptc_size_cfd_);
  }

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  if (this->has_ptc_accel_4way_cfd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptc_accel_4way_cfd_);
  }

  // bool is_tracker = 1;
  if (this->is_tracker() != 0) {
    total_size += 1 + 1;
  }

  // float object_confidence = 2;
  if (this->object_confidence() != 0) {
    total_size += 1 + 4;
  }

  // int32 object_class_type = 4;
  if (this->object_class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_class_type());
  }

  // int32 object_id = 5;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_id());
  }

  // float object_speed = 8;
  if (this->object_speed() != 0) {
    total_size += 1 + 4;
  }

  // float object_acceleration = 10;
  if (this->object_acceleration() != 0) {
    total_size += 1 + 4;
  }

  // int32 object_NS = 13;
  if (this->object_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_ns());
  }

  // int32 object_WE = 14;
  if (this->object_we() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_we());
  }

  // float object_direction = 15;
  if (this->object_direction() != 0) {
    total_size += 1 + 4;
  }

  // float object_heading = 16;
  if (this->object_heading() != 0) {
    total_size += 2 + 4;
  }

  // int32 is_head_tail = 17;
  if (this->is_head_tail() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_head_tail());
  }

  // int32 lane_type = 18;
  if (this->lane_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_type());
  }

  // int32 fuel_type = 21;
  if (this->fuel_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fuel_type());
  }

  // int32 ptc_sourcetype = 24;
  if (this->ptc_sourcetype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_sourcetype());
  }

  // int64 obj_time_stamp = 23;
  if (this->obj_time_stamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->obj_time_stamp());
  }

  // int32 ptc_tran_state = 27;
  if (this->ptc_tran_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_tran_state());
  }

  // float ptc_angle = 28;
  if (this->ptc_angle() != 0) {
    total_size += 2 + 4;
  }

  // int32 ptc_veh_type = 30;
  if (this->ptc_veh_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_veh_type());
  }

  // int32 ptc_Exttype = 32;
  if (this->ptc_exttype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_exttype());
  }

  // float ptc_Exttype_cfd = 33;
  if (this->ptc_exttype_cfd() != 0) {
    total_size += 2 + 4;
  }

  // int32 ptc_status_duration = 35;
  if (this->ptc_status_duration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_status_duration());
  }

  // int32 ptc_satellite = 39;
  if (this->ptc_satellite() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_satellite());
  }

  // int32 ptc_regionid = 40;
  if (this->ptc_regionid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_regionid());
  }

  // int32 ptc_nodeid = 41;
  if (this->ptc_nodeid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_nodeid());
  }

  // int32 ptc_laneid = 42;
  if (this->ptc_laneid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_laneid());
  }

  // int32 ptc_link_width = 44;
  if (this->ptc_link_width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_link_width());
  }

  // int32 ptc_veh_plate_type = 45;
  if (this->ptc_veh_plate_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_veh_plate_type());
  }

  // int32 ptc_veh_plate_color = 46;
  if (this->ptc_veh_plate_color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_veh_plate_color());
  }

  // int32 ptc_veh_color = 47;
  if (this->ptc_veh_color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ptc_veh_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Perceptron::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  const Perceptron* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Perceptron>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Perceptron)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Perceptron)
    MergeFrom(*source);
  }
}

void Perceptron::MergeFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptc_pathpoint_history_.MergeFrom(from.ptc_pathpoint_history_);
  ptc_planning_list_.MergeFrom(from.ptc_planning_list_);
  ptc_polygonpoint_.MergeFrom(from.ptc_polygonpoint_);
  nebula_extend_.MergeFrom(from.nebula_extend_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.plate_num().size() > 0) {

    plate_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plate_num_);
  }
  if (from.objects_identity().size() > 0) {

    objects_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objects_identity_);
  }
  if (from.ptc_link_name().size() > 0) {

    ptc_link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptc_link_name_);
  }
  if (from.has_point3f()) {
    mutable_point3f()->::nebulalink::perceptron3::Point3::MergeFrom(from.point3f());
  }
  if (from.has_point4f()) {
    mutable_point4f()->::nebulalink::perceptron3::Point4::MergeFrom(from.point4f());
  }
  if (from.has_speed3f()) {
    mutable_speed3f()->::nebulalink::perceptron3::Speed3::MergeFrom(from.speed3f());
  }
  if (from.has_target_size()) {
    mutable_target_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from.target_size());
  }
  if (from.has_point_gps()) {
    mutable_point_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from.point_gps());
  }
  if (from.has_accel_4way()) {
    mutable_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from.accel_4way());
  }
  if (from.has_ptc_time_stamp()) {
    mutable_ptc_time_stamp()->::nebulalink::perceptron3::TimeBase::MergeFrom(from.ptc_time_stamp());
  }
  if (from.has_ptc_gps_cfd()) {
    mutable_ptc_gps_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from.ptc_gps_cfd());
  }
  if (from.has_ptc_motino_cfd()) {
    mutable_ptc_motino_cfd()->::nebulalink::perceptron3::Motion_CFD::MergeFrom(from.ptc_motino_cfd());
  }
  if (from.has_ptc_size_cfd()) {
    mutable_ptc_size_cfd()->::nebulalink::perceptron3::TargetSize_CFD::MergeFrom(from.ptc_size_cfd());
  }
  if (from.has_ptc_accel_4way_cfd()) {
    mutable_ptc_accel_4way_cfd()->::nebulalink::perceptron3::Acc4Way_CFD::MergeFrom(from.ptc_accel_4way_cfd());
  }
  if (from.is_tracker() != 0) {
    set_is_tracker(from.is_tracker());
  }
  if (from.object_confidence() != 0) {
    set_object_confidence(from.object_confidence());
  }
  if (from.object_class_type() != 0) {
    set_object_class_type(from.object_class_type());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.object_speed() != 0) {
    set_object_speed(from.object_speed());
  }
  if (from.object_acceleration() != 0) {
    set_object_acceleration(from.object_acceleration());
  }
  if (from.object_ns() != 0) {
    set_object_ns(from.object_ns());
  }
  if (from.object_we() != 0) {
    set_object_we(from.object_we());
  }
  if (from.object_direction() != 0) {
    set_object_direction(from.object_direction());
  }
  if (from.object_heading() != 0) {
    set_object_heading(from.object_heading());
  }
  if (from.is_head_tail() != 0) {
    set_is_head_tail(from.is_head_tail());
  }
  if (from.lane_type() != 0) {
    set_lane_type(from.lane_type());
  }
  if (from.fuel_type() != 0) {
    set_fuel_type(from.fuel_type());
  }
  if (from.ptc_sourcetype() != 0) {
    set_ptc_sourcetype(from.ptc_sourcetype());
  }
  if (from.obj_time_stamp() != 0) {
    set_obj_time_stamp(from.obj_time_stamp());
  }
  if (from.ptc_tran_state() != 0) {
    set_ptc_tran_state(from.ptc_tran_state());
  }
  if (from.ptc_angle() != 0) {
    set_ptc_angle(from.ptc_angle());
  }
  if (from.ptc_veh_type() != 0) {
    set_ptc_veh_type(from.ptc_veh_type());
  }
  if (from.ptc_exttype() != 0) {
    set_ptc_exttype(from.ptc_exttype());
  }
  if (from.ptc_exttype_cfd() != 0) {
    set_ptc_exttype_cfd(from.ptc_exttype_cfd());
  }
  if (from.ptc_status_duration() != 0) {
    set_ptc_status_duration(from.ptc_status_duration());
  }
  if (from.ptc_satellite() != 0) {
    set_ptc_satellite(from.ptc_satellite());
  }
  if (from.ptc_regionid() != 0) {
    set_ptc_regionid(from.ptc_regionid());
  }
  if (from.ptc_nodeid() != 0) {
    set_ptc_nodeid(from.ptc_nodeid());
  }
  if (from.ptc_laneid() != 0) {
    set_ptc_laneid(from.ptc_laneid());
  }
  if (from.ptc_link_width() != 0) {
    set_ptc_link_width(from.ptc_link_width());
  }
  if (from.ptc_veh_plate_type() != 0) {
    set_ptc_veh_plate_type(from.ptc_veh_plate_type());
  }
  if (from.ptc_veh_plate_color() != 0) {
    set_ptc_veh_plate_color(from.ptc_veh_plate_color());
  }
  if (from.ptc_veh_color() != 0) {
    set_ptc_veh_color(from.ptc_veh_color());
  }
}

void Perceptron::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Perceptron::CopyFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perceptron::IsInitialized() const {
  return true;
}

void Perceptron::Swap(Perceptron* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Perceptron::InternalSwap(Perceptron* other) {
  using std::swap;
  CastToBase(&ptc_pathpoint_history_)->InternalSwap(CastToBase(&other->ptc_pathpoint_history_));
  CastToBase(&ptc_planning_list_)->InternalSwap(CastToBase(&other->ptc_planning_list_));
  CastToBase(&ptc_polygonpoint_)->InternalSwap(CastToBase(&other->ptc_polygonpoint_));
  CastToBase(&nebula_extend_)->InternalSwap(CastToBase(&other->nebula_extend_));
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plate_num_.Swap(&other->plate_num_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objects_identity_.Swap(&other->objects_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ptc_link_name_.Swap(&other->ptc_link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point3f_, other->point3f_);
  swap(point4f_, other->point4f_);
  swap(speed3f_, other->speed3f_);
  swap(target_size_, other->target_size_);
  swap(point_gps_, other->point_gps_);
  swap(accel_4way_, other->accel_4way_);
  swap(ptc_time_stamp_, other->ptc_time_stamp_);
  swap(ptc_gps_cfd_, other->ptc_gps_cfd_);
  swap(ptc_motino_cfd_, other->ptc_motino_cfd_);
  swap(ptc_size_cfd_, other->ptc_size_cfd_);
  swap(ptc_accel_4way_cfd_, other->ptc_accel_4way_cfd_);
  swap(is_tracker_, other->is_tracker_);
  swap(object_confidence_, other->object_confidence_);
  swap(object_class_type_, other->object_class_type_);
  swap(object_id_, other->object_id_);
  swap(object_speed_, other->object_speed_);
  swap(object_acceleration_, other->object_acceleration_);
  swap(object_ns_, other->object_ns_);
  swap(object_we_, other->object_we_);
  swap(object_direction_, other->object_direction_);
  swap(object_heading_, other->object_heading_);
  swap(is_head_tail_, other->is_head_tail_);
  swap(lane_type_, other->lane_type_);
  swap(fuel_type_, other->fuel_type_);
  swap(ptc_sourcetype_, other->ptc_sourcetype_);
  swap(obj_time_stamp_, other->obj_time_stamp_);
  swap(ptc_tran_state_, other->ptc_tran_state_);
  swap(ptc_angle_, other->ptc_angle_);
  swap(ptc_veh_type_, other->ptc_veh_type_);
  swap(ptc_exttype_, other->ptc_exttype_);
  swap(ptc_exttype_cfd_, other->ptc_exttype_cfd_);
  swap(ptc_status_duration_, other->ptc_status_duration_);
  swap(ptc_satellite_, other->ptc_satellite_);
  swap(ptc_regionid_, other->ptc_regionid_);
  swap(ptc_nodeid_, other->ptc_nodeid_);
  swap(ptc_laneid_, other->ptc_laneid_);
  swap(ptc_link_width_, other->ptc_link_width_);
  swap(ptc_veh_plate_type_, other->ptc_veh_plate_type_);
  swap(ptc_veh_plate_color_, other->ptc_veh_plate_color_);
  swap(ptc_veh_color_, other->ptc_veh_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Perceptron::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Obstacles::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_time_stamp_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_gps_ = const_cast< ::nebulalink::perceptron3::PointDesc*>(
      ::nebulalink::perceptron3::PointDesc::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_gps_cfd_ = const_cast< ::nebulalink::perceptron3::PointGPS_CFD*>(
      ::nebulalink::perceptron3::PointGPS_CFD::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_accel_4way_ = const_cast< ::nebulalink::perceptron3::Acc4Way*>(
      ::nebulalink::perceptron3::Acc4Way::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_size_ = const_cast< ::nebulalink::perceptron3::TargetSize*>(
      ::nebulalink::perceptron3::TargetSize::internal_default_instance());
  ::nebulalink::perceptron3::_Obstacles_default_instance_._instance.get_mutable()->obs_size_cfd_ = const_cast< ::nebulalink::perceptron3::TargetSize_CFD*>(
      ::nebulalink::perceptron3::TargetSize_CFD::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacles::kObstypeFieldNumber;
const int Obstacles::kObstypeCfdFieldNumber;
const int Obstacles::kObsIdFieldNumber;
const int Obstacles::kObsSourceFieldNumber;
const int Obstacles::kObsTimeStampFieldNumber;
const int Obstacles::kObsGpsFieldNumber;
const int Obstacles::kObsGpsCfdFieldNumber;
const int Obstacles::kObsSpeedFieldNumber;
const int Obstacles::kObsSpeedCfdFieldNumber;
const int Obstacles::kObsHeadingFieldNumber;
const int Obstacles::kObsHeadingCfdFieldNumber;
const int Obstacles::kObsVerSpeedFieldNumber;
const int Obstacles::kObsVerSpeedCfdFieldNumber;
const int Obstacles::kObsAccel4WayFieldNumber;
const int Obstacles::kObsSizeFieldNumber;
const int Obstacles::kObsSizeCfdFieldNumber;
const int Obstacles::kObsTrackingFieldNumber;
const int Obstacles::kObsPolygonPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacles::Obstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Obstacles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obs_polygonpoint_(from.obs_polygonpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obs_time_stamp()) {
    obs_time_stamp_ = new ::nebulalink::perceptron3::TimeBase(*from.obs_time_stamp_);
  } else {
    obs_time_stamp_ = NULL;
  }
  if (from.has_obs_gps()) {
    obs_gps_ = new ::nebulalink::perceptron3::PointDesc(*from.obs_gps_);
  } else {
    obs_gps_ = NULL;
  }
  if (from.has_obs_gps_cfd()) {
    obs_gps_cfd_ = new ::nebulalink::perceptron3::PointGPS_CFD(*from.obs_gps_cfd_);
  } else {
    obs_gps_cfd_ = NULL;
  }
  if (from.has_obs_accel_4way()) {
    obs_accel_4way_ = new ::nebulalink::perceptron3::Acc4Way(*from.obs_accel_4way_);
  } else {
    obs_accel_4way_ = NULL;
  }
  if (from.has_obs_size()) {
    obs_size_ = new ::nebulalink::perceptron3::TargetSize(*from.obs_size_);
  } else {
    obs_size_ = NULL;
  }
  if (from.has_obs_size_cfd()) {
    obs_size_cfd_ = new ::nebulalink::perceptron3::TargetSize_CFD(*from.obs_size_cfd_);
  } else {
    obs_size_cfd_ = NULL;
  }
  ::memcpy(&obstype_, &from.obstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&obs_tracking_) -
    reinterpret_cast<char*>(&obstype_)) + sizeof(obs_tracking_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Obstacles)
}

void Obstacles::SharedCtor() {
  ::memset(&obs_time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obs_tracking_) -
      reinterpret_cast<char*>(&obs_time_stamp_)) + sizeof(obs_tracking_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  if (this != internal_default_instance()) delete obs_time_stamp_;
  if (this != internal_default_instance()) delete obs_gps_;
  if (this != internal_default_instance()) delete obs_gps_cfd_;
  if (this != internal_default_instance()) delete obs_accel_4way_;
  if (this != internal_default_instance()) delete obs_size_;
  if (this != internal_default_instance()) delete obs_size_cfd_;
}

void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacles& Obstacles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Obstacles.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obs_polygonpoint_.Clear();
  if (GetArenaNoVirtual() == NULL && obs_time_stamp_ != NULL) {
    delete obs_time_stamp_;
  }
  obs_time_stamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_gps_ != NULL) {
    delete obs_gps_;
  }
  obs_gps_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_gps_cfd_ != NULL) {
    delete obs_gps_cfd_;
  }
  obs_gps_cfd_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_accel_4way_ != NULL) {
    delete obs_accel_4way_;
  }
  obs_accel_4way_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_size_ != NULL) {
    delete obs_size_;
  }
  obs_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && obs_size_cfd_ != NULL) {
    delete obs_size_cfd_;
  }
  obs_size_cfd_ = NULL;
  ::memset(&obstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obs_tracking_) -
      reinterpret_cast<char*>(&obstype_)) + sizeof(obs_tracking_));
  _internal_metadata_.Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Obstacles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 obstype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obstype_cfd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstype_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obsId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obs_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obs_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_time_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointDesc obs_gps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_gps_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_speed_cfd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_speed_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_heading = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_heading_cfd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_heading_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_verSpeed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_verspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obs_verSpeed_cfd = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obs_verspeed_cfd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_accel_4way()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TargetSize obs_size = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_size_cfd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 obs_tracking = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obs_tracking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obs_polygonpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 obstype = 1;
  if (this->obstype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obstype(), output);
  }

  // int32 obstype_cfd = 2;
  if (this->obstype_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obstype_cfd(), output);
  }

  // int32 obsId = 3;
  if (this->obsid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obsid(), output);
  }

  // int32 obs_source = 4;
  if (this->obs_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obs_source(), output);
  }

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  if (this->has_obs_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_obs_time_stamp(), output);
  }

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  if (this->has_obs_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_obs_gps(), output);
  }

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  if (this->has_obs_gps_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_obs_gps_cfd(), output);
  }

  // float obs_speed = 8;
  if (this->obs_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->obs_speed(), output);
  }

  // float obs_speed_cfd = 9;
  if (this->obs_speed_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->obs_speed_cfd(), output);
  }

  // float obs_heading = 10;
  if (this->obs_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->obs_heading(), output);
  }

  // float obs_heading_cfd = 11;
  if (this->obs_heading_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->obs_heading_cfd(), output);
  }

  // float obs_verSpeed = 12;
  if (this->obs_verspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->obs_verspeed(), output);
  }

  // float obs_verSpeed_cfd = 13;
  if (this->obs_verspeed_cfd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->obs_verspeed_cfd(), output);
  }

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  if (this->has_obs_accel_4way()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_obs_accel_4way(), output);
  }

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  if (this->has_obs_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_obs_size(), output);
  }

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  if (this->has_obs_size_cfd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_obs_size_cfd(), output);
  }

  // int32 obs_tracking = 17;
  if (this->obs_tracking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->obs_tracking(), output);
  }

  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obs_polygonpoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->obs_polygonpoint(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Obstacles)
}

::google::protobuf::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 obstype = 1;
  if (this->obstype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obstype(), target);
  }

  // int32 obstype_cfd = 2;
  if (this->obstype_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->obstype_cfd(), target);
  }

  // int32 obsId = 3;
  if (this->obsid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obsid(), target);
  }

  // int32 obs_source = 4;
  if (this->obs_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obs_source(), target);
  }

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  if (this->has_obs_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_obs_time_stamp(), deterministic, target);
  }

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  if (this->has_obs_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_obs_gps(), deterministic, target);
  }

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  if (this->has_obs_gps_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_obs_gps_cfd(), deterministic, target);
  }

  // float obs_speed = 8;
  if (this->obs_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->obs_speed(), target);
  }

  // float obs_speed_cfd = 9;
  if (this->obs_speed_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->obs_speed_cfd(), target);
  }

  // float obs_heading = 10;
  if (this->obs_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->obs_heading(), target);
  }

  // float obs_heading_cfd = 11;
  if (this->obs_heading_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->obs_heading_cfd(), target);
  }

  // float obs_verSpeed = 12;
  if (this->obs_verspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->obs_verspeed(), target);
  }

  // float obs_verSpeed_cfd = 13;
  if (this->obs_verspeed_cfd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->obs_verspeed_cfd(), target);
  }

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  if (this->has_obs_accel_4way()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_obs_accel_4way(), deterministic, target);
  }

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  if (this->has_obs_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_obs_size(), deterministic, target);
  }

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  if (this->has_obs_size_cfd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_obs_size_cfd(), deterministic, target);
  }

  // int32 obs_tracking = 17;
  if (this->obs_tracking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->obs_tracking(), target);
  }

  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obs_polygonpoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->obs_polygonpoint(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Obstacles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->obs_polygonpoint_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obs_polygonpoint(static_cast<int>(i)));
    }
  }

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  if (this->has_obs_time_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_time_stamp_);
  }

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  if (this->has_obs_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_gps_);
  }

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  if (this->has_obs_gps_cfd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_gps_cfd_);
  }

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  if (this->has_obs_accel_4way()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_accel_4way_);
  }

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  if (this->has_obs_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_size_);
  }

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  if (this->has_obs_size_cfd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *obs_size_cfd_);
  }

  // int32 obstype = 1;
  if (this->obstype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obstype());
  }

  // int32 obstype_cfd = 2;
  if (this->obstype_cfd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obstype_cfd());
  }

  // int32 obsId = 3;
  if (this->obsid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obsid());
  }

  // int32 obs_source = 4;
  if (this->obs_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obs_source());
  }

  // float obs_speed = 8;
  if (this->obs_speed() != 0) {
    total_size += 1 + 4;
  }

  // float obs_speed_cfd = 9;
  if (this->obs_speed_cfd() != 0) {
    total_size += 1 + 4;
  }

  // float obs_heading = 10;
  if (this->obs_heading() != 0) {
    total_size += 1 + 4;
  }

  // float obs_heading_cfd = 11;
  if (this->obs_heading_cfd() != 0) {
    total_size += 1 + 4;
  }

  // float obs_verSpeed = 12;
  if (this->obs_verspeed() != 0) {
    total_size += 1 + 4;
  }

  // float obs_verSpeed_cfd = 13;
  if (this->obs_verspeed_cfd() != 0) {
    total_size += 1 + 4;
  }

  // int32 obs_tracking = 17;
  if (this->obs_tracking() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obs_tracking());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Obstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obs_polygonpoint_.MergeFrom(from.obs_polygonpoint_);
  if (from.has_obs_time_stamp()) {
    mutable_obs_time_stamp()->::nebulalink::perceptron3::TimeBase::MergeFrom(from.obs_time_stamp());
  }
  if (from.has_obs_gps()) {
    mutable_obs_gps()->::nebulalink::perceptron3::PointDesc::MergeFrom(from.obs_gps());
  }
  if (from.has_obs_gps_cfd()) {
    mutable_obs_gps_cfd()->::nebulalink::perceptron3::PointGPS_CFD::MergeFrom(from.obs_gps_cfd());
  }
  if (from.has_obs_accel_4way()) {
    mutable_obs_accel_4way()->::nebulalink::perceptron3::Acc4Way::MergeFrom(from.obs_accel_4way());
  }
  if (from.has_obs_size()) {
    mutable_obs_size()->::nebulalink::perceptron3::TargetSize::MergeFrom(from.obs_size());
  }
  if (from.has_obs_size_cfd()) {
    mutable_obs_size_cfd()->::nebulalink::perceptron3::TargetSize_CFD::MergeFrom(from.obs_size_cfd());
  }
  if (from.obstype() != 0) {
    set_obstype(from.obstype());
  }
  if (from.obstype_cfd() != 0) {
    set_obstype_cfd(from.obstype_cfd());
  }
  if (from.obsid() != 0) {
    set_obsid(from.obsid());
  }
  if (from.obs_source() != 0) {
    set_obs_source(from.obs_source());
  }
  if (from.obs_speed() != 0) {
    set_obs_speed(from.obs_speed());
  }
  if (from.obs_speed_cfd() != 0) {
    set_obs_speed_cfd(from.obs_speed_cfd());
  }
  if (from.obs_heading() != 0) {
    set_obs_heading(from.obs_heading());
  }
  if (from.obs_heading_cfd() != 0) {
    set_obs_heading_cfd(from.obs_heading_cfd());
  }
  if (from.obs_verspeed() != 0) {
    set_obs_verspeed(from.obs_verspeed());
  }
  if (from.obs_verspeed_cfd() != 0) {
    set_obs_verspeed_cfd(from.obs_verspeed_cfd());
  }
  if (from.obs_tracking() != 0) {
    set_obs_tracking(from.obs_tracking());
  }
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  CastToBase(&obs_polygonpoint_)->InternalSwap(CastToBase(&other->obs_polygonpoint_));
  swap(obs_time_stamp_, other->obs_time_stamp_);
  swap(obs_gps_, other->obs_gps_);
  swap(obs_gps_cfd_, other->obs_gps_cfd_);
  swap(obs_accel_4way_, other->obs_accel_4way_);
  swap(obs_size_, other->obs_size_);
  swap(obs_size_cfd_, other->obs_size_cfd_);
  swap(obstype_, other->obstype_);
  swap(obstype_cfd_, other->obstype_cfd_);
  swap(obsid_, other->obsid_);
  swap(obs_source_, other->obs_source_);
  swap(obs_speed_, other->obs_speed_);
  swap(obs_speed_cfd_, other->obs_speed_cfd_);
  swap(obs_heading_, other->obs_heading_);
  swap(obs_heading_cfd_, other->obs_heading_cfd_);
  swap(obs_verspeed_, other->obs_verspeed_);
  swap(obs_verspeed_cfd_, other->obs_verspeed_cfd_);
  swap(obs_tracking_, other->obs_tracking_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Eventlist::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_timestamp_start_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
  ::nebulalink::perceptron3::_Eventlist_default_instance_._instance.get_mutable()->event_timestamp_end_ = const_cast< ::nebulalink::perceptron3::TimeBase*>(
      ::nebulalink::perceptron3::TimeBase::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eventlist::kEventIdFieldNumber;
const int Eventlist::kEventStatusFieldNumber;
const int Eventlist::kEventTypeFieldNumber;
const int Eventlist::kRteSourceFieldNumber;
const int Eventlist::kEventGpsFieldNumber;
const int Eventlist::kEventRadiusFieldNumber;
const int Eventlist::kEventDescFieldNumber;
const int Eventlist::kEventPriorityFieldNumber;
const int Eventlist::kLinklistFieldNumber;
const int Eventlist::kPathlistFieldNumber;
const int Eventlist::kEventConfidFieldNumber;
const int Eventlist::kEventTimestampStartFieldNumber;
const int Eventlist::kEventTimestampEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eventlist::Eventlist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Eventlist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Eventlist)
}
Eventlist::Eventlist(const Eventlist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      linklist_(from.linklist_),
      pathlist_(from.pathlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_desc().size() > 0) {
    event_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_desc_);
  }
  if (from.has_event_gps()) {
    event_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.event_gps_);
  } else {
    event_gps_ = NULL;
  }
  if (from.has_event_timestamp_start()) {
    event_timestamp_start_ = new ::nebulalink::perceptron3::TimeBase(*from.event_timestamp_start_);
  } else {
    event_timestamp_start_ = NULL;
  }
  if (from.has_event_timestamp_end()) {
    event_timestamp_end_ = new ::nebulalink::perceptron3::TimeBase(*from.event_timestamp_end_);
  } else {
    event_timestamp_end_ = NULL;
  }
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_confid_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(event_confid_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Eventlist)
}

void Eventlist::SharedCtor() {
  event_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_confid_) -
      reinterpret_cast<char*>(&event_gps_)) + sizeof(event_confid_));
}

Eventlist::~Eventlist() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Eventlist)
  SharedDtor();
}

void Eventlist::SharedDtor() {
  event_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_gps_;
  if (this != internal_default_instance()) delete event_timestamp_start_;
  if (this != internal_default_instance()) delete event_timestamp_end_;
}

void Eventlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Eventlist::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eventlist& Eventlist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Eventlist.base);
  return *internal_default_instance();
}


void Eventlist::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Eventlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linklist_.Clear();
  pathlist_.Clear();
  event_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && event_gps_ != NULL) {
    delete event_gps_;
  }
  event_gps_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_timestamp_start_ != NULL) {
    delete event_timestamp_start_;
  }
  event_timestamp_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_timestamp_end_ != NULL) {
    delete event_timestamp_end_;
  }
  event_timestamp_end_ = NULL;
  ::memset(&event_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_confid_) -
      reinterpret_cast<char*>(&event_id_)) + sizeof(event_confid_));
  _internal_metadata_.Clear();
}

bool Eventlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Eventlist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rte_source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rte_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS event_gps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float event_radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &event_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_desc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_desc().data(), static_cast<int>(this->event_desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Eventlist.event_desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_priority = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_linklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pathlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_confid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_confid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_timestamp_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_timestamp_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Eventlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Eventlist)
  return false;
#undef DO_
}

void Eventlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Eventlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_id = 1;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // int32 event_status = 2;
  if (this->event_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_status(), output);
  }

  // int32 event_type = 3;
  if (this->event_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type(), output);
  }

  // int32 rte_source = 4;
  if (this->rte_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rte_source(), output);
  }

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  if (this->has_event_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_event_gps(), output);
  }

  // float event_radius = 6;
  if (this->event_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->event_radius(), output);
  }

  // string event_desc = 7;
  if (this->event_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_desc().data(), static_cast<int>(this->event_desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Eventlist.event_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->event_desc(), output);
  }

  // int32 event_priority = 8;
  if (this->event_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->event_priority(), output);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linklist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->linklist(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->pathlist(static_cast<int>(i)),
      output);
  }

  // int32 event_confid = 11;
  if (this->event_confid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->event_confid(), output);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  if (this->has_event_timestamp_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_event_timestamp_start(), output);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  if (this->has_event_timestamp_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_event_timestamp_end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Eventlist)
}

::google::protobuf::uint8* Eventlist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Eventlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_id = 1;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // int32 event_status = 2;
  if (this->event_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_status(), target);
  }

  // int32 event_type = 3;
  if (this->event_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_type(), target);
  }

  // int32 rte_source = 4;
  if (this->rte_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rte_source(), target);
  }

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  if (this->has_event_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_event_gps(), deterministic, target);
  }

  // float event_radius = 6;
  if (this->event_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->event_radius(), target);
  }

  // string event_desc = 7;
  if (this->event_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_desc().data(), static_cast<int>(this->event_desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Eventlist.event_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->event_desc(), target);
  }

  // int32 event_priority = 8;
  if (this->event_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->event_priority(), target);
  }

  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linklist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->linklist(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->pathlist(static_cast<int>(i)), deterministic, target);
  }

  // int32 event_confid = 11;
  if (this->event_confid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->event_confid(), target);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  if (this->has_event_timestamp_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_event_timestamp_start(), deterministic, target);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  if (this->has_event_timestamp_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_event_timestamp_end(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Eventlist)
  return target;
}

size_t Eventlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Eventlist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->linklist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->linklist(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->pathlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pathlist(static_cast<int>(i)));
    }
  }

  // string event_desc = 7;
  if (this->event_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_desc());
  }

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  if (this->has_event_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_gps_);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  if (this->has_event_timestamp_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_timestamp_start_);
  }

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  if (this->has_event_timestamp_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_timestamp_end_);
  }

  // int32 event_id = 1;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_id());
  }

  // int32 event_status = 2;
  if (this->event_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_status());
  }

  // int32 event_type = 3;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_type());
  }

  // int32 rte_source = 4;
  if (this->rte_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rte_source());
  }

  // float event_radius = 6;
  if (this->event_radius() != 0) {
    total_size += 1 + 4;
  }

  // int32 event_priority = 8;
  if (this->event_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_priority());
  }

  // int32 event_confid = 11;
  if (this->event_confid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_confid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eventlist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Eventlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Eventlist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eventlist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Eventlist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Eventlist)
    MergeFrom(*source);
  }
}

void Eventlist::MergeFrom(const Eventlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Eventlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linklist_.MergeFrom(from.linklist_);
  pathlist_.MergeFrom(from.pathlist_);
  if (from.event_desc().size() > 0) {

    event_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_desc_);
  }
  if (from.has_event_gps()) {
    mutable_event_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from.event_gps());
  }
  if (from.has_event_timestamp_start()) {
    mutable_event_timestamp_start()->::nebulalink::perceptron3::TimeBase::MergeFrom(from.event_timestamp_start());
  }
  if (from.has_event_timestamp_end()) {
    mutable_event_timestamp_end()->::nebulalink::perceptron3::TimeBase::MergeFrom(from.event_timestamp_end());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.event_status() != 0) {
    set_event_status(from.event_status());
  }
  if (from.event_type() != 0) {
    set_event_type(from.event_type());
  }
  if (from.rte_source() != 0) {
    set_rte_source(from.rte_source());
  }
  if (from.event_radius() != 0) {
    set_event_radius(from.event_radius());
  }
  if (from.event_priority() != 0) {
    set_event_priority(from.event_priority());
  }
  if (from.event_confid() != 0) {
    set_event_confid(from.event_confid());
  }
}

void Eventlist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Eventlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eventlist::CopyFrom(const Eventlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Eventlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eventlist::IsInitialized() const {
  return true;
}

void Eventlist::Swap(Eventlist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eventlist::InternalSwap(Eventlist* other) {
  using std::swap;
  CastToBase(&linklist_)->InternalSwap(CastToBase(&other->linklist_));
  CastToBase(&pathlist_)->InternalSwap(CastToBase(&other->pathlist_));
  event_desc_.Swap(&other->event_desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_gps_, other->event_gps_);
  swap(event_timestamp_start_, other->event_timestamp_start_);
  swap(event_timestamp_end_, other->event_timestamp_end_);
  swap(event_id_, other->event_id_);
  swap(event_status_, other->event_status_);
  swap(event_type_, other->event_type_);
  swap(rte_source_, other->rte_source_);
  swap(event_radius_, other->event_radius_);
  swap(event_priority_, other->event_priority_);
  swap(event_confid_, other->event_confid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Eventlist::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Heartlist::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartlist::kDeviceStatusFieldNumber;
const int Heartlist::kErrDeviceIdFieldNumber;
const int Heartlist::kErrCodeFieldNumber;
const int Heartlist::kHeartTimeFieldNumber;
const int Heartlist::kErrDescFieldNumber;
const int Heartlist::kErrLevelFieldNumber;
const int Heartlist::kErrDeviceTypeFieldNumber;
const int Heartlist::kErrDeviceVersionFieldNumber;
const int Heartlist::kDeviceTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartlist::Heartlist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Heartlist.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.Heartlist)
}
Heartlist::Heartlist(const Heartlist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err_device_id().size() > 0) {
    err_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_device_id_);
  }
  err_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err_desc().size() > 0) {
    err_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_desc_);
  }
  err_device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err_device_version().size() > 0) {
    err_device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_device_version_);
  }
  ::memcpy(&device_status_, &from.device_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_temp_) -
    reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.Heartlist)
}

void Heartlist::SharedCtor() {
  err_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_temp_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
}

Heartlist::~Heartlist() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.Heartlist)
  SharedDtor();
}

void Heartlist::SharedDtor() {
  err_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_device_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Heartlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Heartlist::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Heartlist& Heartlist::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_Heartlist.base);
  return *internal_default_instance();
}


void Heartlist::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.Heartlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_temp_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(device_temp_));
  _internal_metadata_.Clear();
}

bool Heartlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.Heartlist)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 device_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err_device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_device_id().data(), static_cast<int>(this->err_device_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Heartlist.err_device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 heart_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heart_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err_desc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_desc().data(), static_cast<int>(this->err_desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Heartlist.err_desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err_device_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_device_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err_device_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_device_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_device_version().data(), static_cast<int>(this->err_device_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.Heartlist.err_device_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float device_temp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &device_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.Heartlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.Heartlist)
  return false;
#undef DO_
}

void Heartlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.Heartlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_status(), output);
  }

  // string err_device_id = 2;
  if (this->err_device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_device_id().data(), static_cast<int>(this->err_device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->err_device_id(), output);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_code(), output);
  }

  // int64 heart_time = 4;
  if (this->heart_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->heart_time(), output);
  }

  // string err_desc = 5;
  if (this->err_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_desc().data(), static_cast<int>(this->err_desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->err_desc(), output);
  }

  // int32 err_level = 6;
  if (this->err_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->err_level(), output);
  }

  // int32 err_device_type = 7;
  if (this->err_device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->err_device_type(), output);
  }

  // string err_device_version = 8;
  if (this->err_device_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_device_version().data(), static_cast<int>(this->err_device_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->err_device_version(), output);
  }

  // float device_temp = 9;
  if (this->device_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->device_temp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.Heartlist)
}

::google::protobuf::uint8* Heartlist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.Heartlist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_status(), target);
  }

  // string err_device_id = 2;
  if (this->err_device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_device_id().data(), static_cast<int>(this->err_device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->err_device_id(), target);
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_code(), target);
  }

  // int64 heart_time = 4;
  if (this->heart_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->heart_time(), target);
  }

  // string err_desc = 5;
  if (this->err_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_desc().data(), static_cast<int>(this->err_desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err_desc(), target);
  }

  // int32 err_level = 6;
  if (this->err_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->err_level(), target);
  }

  // int32 err_device_type = 7;
  if (this->err_device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->err_device_type(), target);
  }

  // string err_device_version = 8;
  if (this->err_device_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_device_version().data(), static_cast<int>(this->err_device_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.Heartlist.err_device_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->err_device_version(), target);
  }

  // float device_temp = 9;
  if (this->device_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->device_temp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.Heartlist)
  return target;
}

size_t Heartlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.Heartlist)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string err_device_id = 2;
  if (this->err_device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_device_id());
  }

  // string err_desc = 5;
  if (this->err_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_desc());
  }

  // string err_device_version = 8;
  if (this->err_device_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_device_version());
  }

  // int32 device_status = 1;
  if (this->device_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_status());
  }

  // int32 err_code = 3;
  if (this->err_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_code());
  }

  // int64 heart_time = 4;
  if (this->heart_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->heart_time());
  }

  // int32 err_level = 6;
  if (this->err_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_level());
  }

  // int32 err_device_type = 7;
  if (this->err_device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_device_type());
  }

  // float device_temp = 9;
  if (this->device_temp() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartlist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.Heartlist)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartlist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartlist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.Heartlist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.Heartlist)
    MergeFrom(*source);
  }
}

void Heartlist::MergeFrom(const Heartlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.Heartlist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err_device_id().size() > 0) {

    err_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_device_id_);
  }
  if (from.err_desc().size() > 0) {

    err_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_desc_);
  }
  if (from.err_device_version().size() > 0) {

    err_device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_device_version_);
  }
  if (from.device_status() != 0) {
    set_device_status(from.device_status());
  }
  if (from.err_code() != 0) {
    set_err_code(from.err_code());
  }
  if (from.heart_time() != 0) {
    set_heart_time(from.heart_time());
  }
  if (from.err_level() != 0) {
    set_err_level(from.err_level());
  }
  if (from.err_device_type() != 0) {
    set_err_device_type(from.err_device_type());
  }
  if (from.device_temp() != 0) {
    set_device_temp(from.device_temp());
  }
}

void Heartlist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.Heartlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartlist::CopyFrom(const Heartlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.Heartlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartlist::IsInitialized() const {
  return true;
}

void Heartlist::Swap(Heartlist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartlist::InternalSwap(Heartlist* other) {
  using std::swap;
  err_device_id_.Swap(&other->err_device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  err_desc_.Swap(&other->err_desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  err_device_version_.Swap(&other->err_device_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_status_, other->device_status_);
  swap(err_code_, other->err_code_);
  swap(heart_time_, other->heart_time_);
  swap(err_level_, other->err_level_);
  swap(err_device_type_, other->err_device_type_);
  swap(device_temp_, other->device_temp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Heartlist::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneJamSenseParams::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_._instance.get_mutable()->lane_entre_info_ = const_cast< ::nebulalink::perceptron3::InfoEntreLineValues*>(
      ::nebulalink::perceptron3::InfoEntreLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LaneJamSenseParams_default_instance_._instance.get_mutable()->lane_end_info_ = const_cast< ::nebulalink::perceptron3::InfoEndLineValues*>(
      ::nebulalink::perceptron3::InfoEndLineValues::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneJamSenseParams::kLaneIdFieldNumber;
const int LaneJamSenseParams::kLaneTypesFieldNumber;
const int LaneJamSenseParams::kLaneSenseLenFieldNumber;
const int LaneJamSenseParams::kLaneDirectionFieldNumber;
const int LaneJamSenseParams::kLaneAvgSpeedFieldNumber;
const int LaneJamSenseParams::kLaneVehNumFieldNumber;
const int LaneJamSenseParams::kLaneSpaceOccupancyFieldNumber;
const int LaneJamSenseParams::kLaneQueueLenFieldNumber;
const int LaneJamSenseParams::kLaneCountTimeFieldNumber;
const int LaneJamSenseParams::kLaneCountFlowFieldNumber;
const int LaneJamSenseParams::kLaneIsCountFieldNumber;
const int LaneJamSenseParams::kLaneAveDistanceFieldNumber;
const int LaneJamSenseParams::kLaneCurDistanceFieldNumber;
const int LaneJamSenseParams::kLaneTimeOccupancyFieldNumber;
const int LaneJamSenseParams::kLaneEntreInfoFieldNumber;
const int LaneJamSenseParams::kLaneEndInfoFieldNumber;
const int LaneJamSenseParams::kLaneNumFieldNumber;
const int LaneJamSenseParams::kLaneNoFieldNumber;
const int LaneJamSenseParams::kLanePeronVolumeFieldNumber;
const int LaneJamSenseParams::kLaneNoMotorVolumeFieldNumber;
const int LaneJamSenseParams::kLaneMinmotorVolumeFieldNumber;
const int LaneJamSenseParams::kLaneMedmotorVolumeFieldNumber;
const int LaneJamSenseParams::kLaneMaxmotorVolumeFieldNumber;
const int LaneJamSenseParams::kLanePcuFieldNumber;
const int LaneJamSenseParams::kLaneAvspeedFieldNumber;
const int LaneJamSenseParams::kLaneHeadwayFieldNumber;
const int LaneJamSenseParams::kLaneGapFieldNumber;
const int LaneJamSenseParams::kLaneAvdistanceFieldNumber;
const int LaneJamSenseParams::kLaneAvstopFieldNumber;
const int LaneJamSenseParams::kLaneSpeed85FieldNumber;
const int LaneJamSenseParams::kLaneQueueLengthFieldNumber;
const int LaneJamSenseParams::kLaneStoplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneJamSenseParams::LaneJamSenseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LaneJamSenseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.LaneJamSenseParams)
}
LaneJamSenseParams::LaneJamSenseParams(const LaneJamSenseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.has_lane_entre_info()) {
    lane_entre_info_ = new ::nebulalink::perceptron3::InfoEntreLineValues(*from.lane_entre_info_);
  } else {
    lane_entre_info_ = NULL;
  }
  if (from.has_lane_end_info()) {
    lane_end_info_ = new ::nebulalink::perceptron3::InfoEndLineValues(*from.lane_end_info_);
  } else {
    lane_end_info_ = NULL;
  }
  ::memcpy(&lane_types_, &from.lane_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_stopline_) -
    reinterpret_cast<char*>(&lane_types_)) + sizeof(lane_stopline_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.LaneJamSenseParams)
}

void LaneJamSenseParams::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_entre_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_stopline_) -
      reinterpret_cast<char*>(&lane_entre_info_)) + sizeof(lane_stopline_));
}

LaneJamSenseParams::~LaneJamSenseParams() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.LaneJamSenseParams)
  SharedDtor();
}

void LaneJamSenseParams::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lane_entre_info_;
  if (this != internal_default_instance()) delete lane_end_info_;
}

void LaneJamSenseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneJamSenseParams::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneJamSenseParams& LaneJamSenseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LaneJamSenseParams.base);
  return *internal_default_instance();
}


void LaneJamSenseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.LaneJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && lane_entre_info_ != NULL) {
    delete lane_entre_info_;
  }
  lane_entre_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_end_info_ != NULL) {
    delete lane_end_info_;
  }
  lane_end_info_ = NULL;
  ::memset(&lane_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_stopline_) -
      reinterpret_cast<char*>(&lane_types_)) + sizeof(lane_stopline_));
  _internal_metadata_.Clear();
}

bool LaneJamSenseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.LaneJamSenseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.LaneJamSenseParams.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_sense_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_sense_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_avg_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_avg_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_veh_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_veh_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_space_occupancy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_space_occupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_queue_len = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_queue_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_count_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_count_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_count_flow = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_count_flow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lane_is_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_is_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_ave_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_ave_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_cur_distance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_cur_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_time_occupancy = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_time_occupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_entre_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_end_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_num = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_no = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_peron_volume = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_peron_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_no_motor_volume = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_no_motor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_minmotor_volume = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_minmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_medmotor_volume = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_medmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_maxmotor_volume = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_maxmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_pcu = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_pcu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_avspeed = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_avspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_headway = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_headway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_gap = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_avdistance = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_avdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_avstop = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_avstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_speed85 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_speed85_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_queueLength = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_queuelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_stopline = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_stopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.LaneJamSenseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.LaneJamSenseParams)
  return false;
#undef DO_
}

void LaneJamSenseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.LaneJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LaneJamSenseParams.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // int32 lane_types = 2;
  if (this->lane_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lane_types(), output);
  }

  // float lane_sense_len = 3;
  if (this->lane_sense_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lane_sense_len(), output);
  }

  // int32 lane_direction = 4;
  if (this->lane_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lane_direction(), output);
  }

  // float lane_avg_speed = 5;
  if (this->lane_avg_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lane_avg_speed(), output);
  }

  // int32 lane_veh_num = 6;
  if (this->lane_veh_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lane_veh_num(), output);
  }

  // float lane_space_occupancy = 7;
  if (this->lane_space_occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->lane_space_occupancy(), output);
  }

  // int32 lane_queue_len = 8;
  if (this->lane_queue_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lane_queue_len(), output);
  }

  // int32 lane_count_time = 9;
  if (this->lane_count_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lane_count_time(), output);
  }

  // int32 lane_count_flow = 10;
  if (this->lane_count_flow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lane_count_flow(), output);
  }

  // bool lane_is_count = 11;
  if (this->lane_is_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->lane_is_count(), output);
  }

  // int32 lane_ave_distance = 12;
  if (this->lane_ave_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lane_ave_distance(), output);
  }

  // int32 lane_cur_distance = 13;
  if (this->lane_cur_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lane_cur_distance(), output);
  }

  // float lane_time_occupancy = 14;
  if (this->lane_time_occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->lane_time_occupancy(), output);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  if (this->has_lane_entre_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_lane_entre_info(), output);
  }

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  if (this->has_lane_end_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_lane_end_info(), output);
  }

  // int32 lane_num = 17;
  if (this->lane_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lane_num(), output);
  }

  // int32 lane_no = 18;
  if (this->lane_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lane_no(), output);
  }

  // int32 lane_peron_volume = 19;
  if (this->lane_peron_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lane_peron_volume(), output);
  }

  // int32 lane_no_motor_volume = 20;
  if (this->lane_no_motor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lane_no_motor_volume(), output);
  }

  // int32 lane_minmotor_volume = 21;
  if (this->lane_minmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lane_minmotor_volume(), output);
  }

  // int32 lane_medmotor_volume = 22;
  if (this->lane_medmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->lane_medmotor_volume(), output);
  }

  // int32 lane_maxmotor_volume = 23;
  if (this->lane_maxmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->lane_maxmotor_volume(), output);
  }

  // int32 lane_pcu = 24;
  if (this->lane_pcu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->lane_pcu(), output);
  }

  // float lane_avspeed = 25;
  if (this->lane_avspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->lane_avspeed(), output);
  }

  // float lane_headway = 26;
  if (this->lane_headway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->lane_headway(), output);
  }

  // float lane_gap = 27;
  if (this->lane_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->lane_gap(), output);
  }

  // float lane_avdistance = 28;
  if (this->lane_avdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->lane_avdistance(), output);
  }

  // float lane_avstop = 29;
  if (this->lane_avstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->lane_avstop(), output);
  }

  // float lane_speed85 = 30;
  if (this->lane_speed85() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->lane_speed85(), output);
  }

  // float lane_queueLength = 31;
  if (this->lane_queuelength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->lane_queuelength(), output);
  }

  // float lane_stopline = 32;
  if (this->lane_stopline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->lane_stopline(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.LaneJamSenseParams)
}

::google::protobuf::uint8* LaneJamSenseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.LaneJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LaneJamSenseParams.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // int32 lane_types = 2;
  if (this->lane_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_types(), target);
  }

  // float lane_sense_len = 3;
  if (this->lane_sense_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lane_sense_len(), target);
  }

  // int32 lane_direction = 4;
  if (this->lane_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lane_direction(), target);
  }

  // float lane_avg_speed = 5;
  if (this->lane_avg_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lane_avg_speed(), target);
  }

  // int32 lane_veh_num = 6;
  if (this->lane_veh_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lane_veh_num(), target);
  }

  // float lane_space_occupancy = 7;
  if (this->lane_space_occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->lane_space_occupancy(), target);
  }

  // int32 lane_queue_len = 8;
  if (this->lane_queue_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lane_queue_len(), target);
  }

  // int32 lane_count_time = 9;
  if (this->lane_count_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lane_count_time(), target);
  }

  // int32 lane_count_flow = 10;
  if (this->lane_count_flow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lane_count_flow(), target);
  }

  // bool lane_is_count = 11;
  if (this->lane_is_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->lane_is_count(), target);
  }

  // int32 lane_ave_distance = 12;
  if (this->lane_ave_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lane_ave_distance(), target);
  }

  // int32 lane_cur_distance = 13;
  if (this->lane_cur_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lane_cur_distance(), target);
  }

  // float lane_time_occupancy = 14;
  if (this->lane_time_occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->lane_time_occupancy(), target);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  if (this->has_lane_entre_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_lane_entre_info(), deterministic, target);
  }

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  if (this->has_lane_end_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_lane_end_info(), deterministic, target);
  }

  // int32 lane_num = 17;
  if (this->lane_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lane_num(), target);
  }

  // int32 lane_no = 18;
  if (this->lane_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->lane_no(), target);
  }

  // int32 lane_peron_volume = 19;
  if (this->lane_peron_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->lane_peron_volume(), target);
  }

  // int32 lane_no_motor_volume = 20;
  if (this->lane_no_motor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lane_no_motor_volume(), target);
  }

  // int32 lane_minmotor_volume = 21;
  if (this->lane_minmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lane_minmotor_volume(), target);
  }

  // int32 lane_medmotor_volume = 22;
  if (this->lane_medmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->lane_medmotor_volume(), target);
  }

  // int32 lane_maxmotor_volume = 23;
  if (this->lane_maxmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->lane_maxmotor_volume(), target);
  }

  // int32 lane_pcu = 24;
  if (this->lane_pcu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->lane_pcu(), target);
  }

  // float lane_avspeed = 25;
  if (this->lane_avspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->lane_avspeed(), target);
  }

  // float lane_headway = 26;
  if (this->lane_headway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->lane_headway(), target);
  }

  // float lane_gap = 27;
  if (this->lane_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->lane_gap(), target);
  }

  // float lane_avdistance = 28;
  if (this->lane_avdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->lane_avdistance(), target);
  }

  // float lane_avstop = 29;
  if (this->lane_avstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->lane_avstop(), target);
  }

  // float lane_speed85 = 30;
  if (this->lane_speed85() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->lane_speed85(), target);
  }

  // float lane_queueLength = 31;
  if (this->lane_queuelength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->lane_queuelength(), target);
  }

  // float lane_stopline = 32;
  if (this->lane_stopline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->lane_stopline(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.LaneJamSenseParams)
  return target;
}

size_t LaneJamSenseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.LaneJamSenseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  if (this->has_lane_entre_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_entre_info_);
  }

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  if (this->has_lane_end_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_end_info_);
  }

  // int32 lane_types = 2;
  if (this->lane_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_types());
  }

  // float lane_sense_len = 3;
  if (this->lane_sense_len() != 0) {
    total_size += 1 + 4;
  }

  // int32 lane_direction = 4;
  if (this->lane_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_direction());
  }

  // float lane_avg_speed = 5;
  if (this->lane_avg_speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 lane_veh_num = 6;
  if (this->lane_veh_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_veh_num());
  }

  // float lane_space_occupancy = 7;
  if (this->lane_space_occupancy() != 0) {
    total_size += 1 + 4;
  }

  // int32 lane_queue_len = 8;
  if (this->lane_queue_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_queue_len());
  }

  // int32 lane_count_time = 9;
  if (this->lane_count_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_count_time());
  }

  // int32 lane_count_flow = 10;
  if (this->lane_count_flow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_count_flow());
  }

  // bool lane_is_count = 11;
  if (this->lane_is_count() != 0) {
    total_size += 1 + 1;
  }

  // int32 lane_ave_distance = 12;
  if (this->lane_ave_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_ave_distance());
  }

  // int32 lane_cur_distance = 13;
  if (this->lane_cur_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_cur_distance());
  }

  // float lane_time_occupancy = 14;
  if (this->lane_time_occupancy() != 0) {
    total_size += 1 + 4;
  }

  // int32 lane_num = 17;
  if (this->lane_num() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_num());
  }

  // int32 lane_no = 18;
  if (this->lane_no() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_no());
  }

  // int32 lane_peron_volume = 19;
  if (this->lane_peron_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_peron_volume());
  }

  // int32 lane_no_motor_volume = 20;
  if (this->lane_no_motor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_no_motor_volume());
  }

  // int32 lane_minmotor_volume = 21;
  if (this->lane_minmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_minmotor_volume());
  }

  // int32 lane_medmotor_volume = 22;
  if (this->lane_medmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_medmotor_volume());
  }

  // int32 lane_maxmotor_volume = 23;
  if (this->lane_maxmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_maxmotor_volume());
  }

  // int32 lane_pcu = 24;
  if (this->lane_pcu() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_pcu());
  }

  // float lane_avspeed = 25;
  if (this->lane_avspeed() != 0) {
    total_size += 2 + 4;
  }

  // float lane_headway = 26;
  if (this->lane_headway() != 0) {
    total_size += 2 + 4;
  }

  // float lane_gap = 27;
  if (this->lane_gap() != 0) {
    total_size += 2 + 4;
  }

  // float lane_avdistance = 28;
  if (this->lane_avdistance() != 0) {
    total_size += 2 + 4;
  }

  // float lane_avstop = 29;
  if (this->lane_avstop() != 0) {
    total_size += 2 + 4;
  }

  // float lane_speed85 = 30;
  if (this->lane_speed85() != 0) {
    total_size += 2 + 4;
  }

  // float lane_queueLength = 31;
  if (this->lane_queuelength() != 0) {
    total_size += 2 + 4;
  }

  // float lane_stopline = 32;
  if (this->lane_stopline() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneJamSenseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneJamSenseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneJamSenseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.LaneJamSenseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.LaneJamSenseParams)
    MergeFrom(*source);
  }
}

void LaneJamSenseParams::MergeFrom(const LaneJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.has_lane_entre_info()) {
    mutable_lane_entre_info()->::nebulalink::perceptron3::InfoEntreLineValues::MergeFrom(from.lane_entre_info());
  }
  if (from.has_lane_end_info()) {
    mutable_lane_end_info()->::nebulalink::perceptron3::InfoEndLineValues::MergeFrom(from.lane_end_info());
  }
  if (from.lane_types() != 0) {
    set_lane_types(from.lane_types());
  }
  if (from.lane_sense_len() != 0) {
    set_lane_sense_len(from.lane_sense_len());
  }
  if (from.lane_direction() != 0) {
    set_lane_direction(from.lane_direction());
  }
  if (from.lane_avg_speed() != 0) {
    set_lane_avg_speed(from.lane_avg_speed());
  }
  if (from.lane_veh_num() != 0) {
    set_lane_veh_num(from.lane_veh_num());
  }
  if (from.lane_space_occupancy() != 0) {
    set_lane_space_occupancy(from.lane_space_occupancy());
  }
  if (from.lane_queue_len() != 0) {
    set_lane_queue_len(from.lane_queue_len());
  }
  if (from.lane_count_time() != 0) {
    set_lane_count_time(from.lane_count_time());
  }
  if (from.lane_count_flow() != 0) {
    set_lane_count_flow(from.lane_count_flow());
  }
  if (from.lane_is_count() != 0) {
    set_lane_is_count(from.lane_is_count());
  }
  if (from.lane_ave_distance() != 0) {
    set_lane_ave_distance(from.lane_ave_distance());
  }
  if (from.lane_cur_distance() != 0) {
    set_lane_cur_distance(from.lane_cur_distance());
  }
  if (from.lane_time_occupancy() != 0) {
    set_lane_time_occupancy(from.lane_time_occupancy());
  }
  if (from.lane_num() != 0) {
    set_lane_num(from.lane_num());
  }
  if (from.lane_no() != 0) {
    set_lane_no(from.lane_no());
  }
  if (from.lane_peron_volume() != 0) {
    set_lane_peron_volume(from.lane_peron_volume());
  }
  if (from.lane_no_motor_volume() != 0) {
    set_lane_no_motor_volume(from.lane_no_motor_volume());
  }
  if (from.lane_minmotor_volume() != 0) {
    set_lane_minmotor_volume(from.lane_minmotor_volume());
  }
  if (from.lane_medmotor_volume() != 0) {
    set_lane_medmotor_volume(from.lane_medmotor_volume());
  }
  if (from.lane_maxmotor_volume() != 0) {
    set_lane_maxmotor_volume(from.lane_maxmotor_volume());
  }
  if (from.lane_pcu() != 0) {
    set_lane_pcu(from.lane_pcu());
  }
  if (from.lane_avspeed() != 0) {
    set_lane_avspeed(from.lane_avspeed());
  }
  if (from.lane_headway() != 0) {
    set_lane_headway(from.lane_headway());
  }
  if (from.lane_gap() != 0) {
    set_lane_gap(from.lane_gap());
  }
  if (from.lane_avdistance() != 0) {
    set_lane_avdistance(from.lane_avdistance());
  }
  if (from.lane_avstop() != 0) {
    set_lane_avstop(from.lane_avstop());
  }
  if (from.lane_speed85() != 0) {
    set_lane_speed85(from.lane_speed85());
  }
  if (from.lane_queuelength() != 0) {
    set_lane_queuelength(from.lane_queuelength());
  }
  if (from.lane_stopline() != 0) {
    set_lane_stopline(from.lane_stopline());
  }
}

void LaneJamSenseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneJamSenseParams::CopyFrom(const LaneJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.LaneJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneJamSenseParams::IsInitialized() const {
  return true;
}

void LaneJamSenseParams::Swap(LaneJamSenseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneJamSenseParams::InternalSwap(LaneJamSenseParams* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_entre_info_, other->lane_entre_info_);
  swap(lane_end_info_, other->lane_end_info_);
  swap(lane_types_, other->lane_types_);
  swap(lane_sense_len_, other->lane_sense_len_);
  swap(lane_direction_, other->lane_direction_);
  swap(lane_avg_speed_, other->lane_avg_speed_);
  swap(lane_veh_num_, other->lane_veh_num_);
  swap(lane_space_occupancy_, other->lane_space_occupancy_);
  swap(lane_queue_len_, other->lane_queue_len_);
  swap(lane_count_time_, other->lane_count_time_);
  swap(lane_count_flow_, other->lane_count_flow_);
  swap(lane_is_count_, other->lane_is_count_);
  swap(lane_ave_distance_, other->lane_ave_distance_);
  swap(lane_cur_distance_, other->lane_cur_distance_);
  swap(lane_time_occupancy_, other->lane_time_occupancy_);
  swap(lane_num_, other->lane_num_);
  swap(lane_no_, other->lane_no_);
  swap(lane_peron_volume_, other->lane_peron_volume_);
  swap(lane_no_motor_volume_, other->lane_no_motor_volume_);
  swap(lane_minmotor_volume_, other->lane_minmotor_volume_);
  swap(lane_medmotor_volume_, other->lane_medmotor_volume_);
  swap(lane_maxmotor_volume_, other->lane_maxmotor_volume_);
  swap(lane_pcu_, other->lane_pcu_);
  swap(lane_avspeed_, other->lane_avspeed_);
  swap(lane_headway_, other->lane_headway_);
  swap(lane_gap_, other->lane_gap_);
  swap(lane_avdistance_, other->lane_avdistance_);
  swap(lane_avstop_, other->lane_avstop_);
  swap(lane_speed85_, other->lane_speed85_);
  swap(lane_queuelength_, other->lane_queuelength_);
  swap(lane_stopline_, other->lane_stopline_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneJamSenseParams::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinkJamSenseParams::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_entre_info_ = const_cast< ::nebulalink::perceptron3::InfoEntreLineValues*>(
      ::nebulalink::perceptron3::InfoEntreLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_end_info_ = const_cast< ::nebulalink::perceptron3::InfoEndLineValues*>(
      ::nebulalink::perceptron3::InfoEndLineValues::internal_default_instance());
  ::nebulalink::perceptron3::_LinkJamSenseParams_default_instance_._instance.get_mutable()->link_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkJamSenseParams::kLinkIdFieldNumber;
const int LinkJamSenseParams::kLinkLenFieldNumber;
const int LinkJamSenseParams::kLinkAvgspeedFieldNumber;
const int LinkJamSenseParams::kLinkVehNumFieldNumber;
const int LinkJamSenseParams::kLinkTypeFieldNumber;
const int LinkJamSenseParams::kLinkDirectionFieldNumber;
const int LinkJamSenseParams::kLinkSpaceOccupancyFieldNumber;
const int LinkJamSenseParams::kLinkTimeOccupancyFieldNumber;
const int LinkJamSenseParams::kLinkCountTimeFieldNumber;
const int LinkJamSenseParams::kLinkCountFlowFieldNumber;
const int LinkJamSenseParams::kLinkIsCountFieldNumber;
const int LinkJamSenseParams::kLinkEntreInfoFieldNumber;
const int LinkJamSenseParams::kLinkEndInfoFieldNumber;
const int LinkJamSenseParams::kLinkDeviceidFieldNumber;
const int LinkJamSenseParams::kLinkHeadingFieldNumber;
const int LinkJamSenseParams::kLinkPhaseidFieldNumber;
const int LinkJamSenseParams::kLinkNameFieldNumber;
const int LinkJamSenseParams::kLinkNoFieldNumber;
const int LinkJamSenseParams::kLinkGpsFieldNumber;
const int LinkJamSenseParams::kLinkMeasnumFieldNumber;
const int LinkJamSenseParams::kLinkNumFieldNumber;
const int LinkJamSenseParams::kLinkMotorVolumeFieldNumber;
const int LinkJamSenseParams::kLinkPeronVolumeFieldNumber;
const int LinkJamSenseParams::kLinkNoMotorVolumeFieldNumber;
const int LinkJamSenseParams::kLinkMinmotorVolumeFieldNumber;
const int LinkJamSenseParams::kLinkMedmotorVolumeFieldNumber;
const int LinkJamSenseParams::kLinkMaxmotorVolumeFieldNumber;
const int LinkJamSenseParams::kLinkPcuFieldNumber;
const int LinkJamSenseParams::kLinkAvspeedFieldNumber;
const int LinkJamSenseParams::kLinkTimeOccupanyFieldNumber;
const int LinkJamSenseParams::kLinkHeadwayFieldNumber;
const int LinkJamSenseParams::kLinkGapFieldNumber;
const int LinkJamSenseParams::kLinkAvdistanceFieldNumber;
const int LinkJamSenseParams::kLinkAvstopFieldNumber;
const int LinkJamSenseParams::kLinkSpeed85FieldNumber;
const int LinkJamSenseParams::kLinkQueueLengthFieldNumber;
const int LinkJamSenseParams::kLinkStoplineFieldNumber;
const int LinkJamSenseParams::kLinkSpaceOccupanyFieldNumber;
const int LinkJamSenseParams::kRoadLanelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkJamSenseParams::LinkJamSenseParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LinkJamSenseParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.LinkJamSenseParams)
}
LinkJamSenseParams::LinkJamSenseParams(const LinkJamSenseParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      road_lanelist_(from.road_lanelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link_id().size() > 0) {
    link_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_id_);
  }
  link_deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link_deviceid().size() > 0) {
    link_deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_deviceid_);
  }
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.link_name().size() > 0) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_link_entre_info()) {
    link_entre_info_ = new ::nebulalink::perceptron3::InfoEntreLineValues(*from.link_entre_info_);
  } else {
    link_entre_info_ = NULL;
  }
  if (from.has_link_end_info()) {
    link_end_info_ = new ::nebulalink::perceptron3::InfoEndLineValues(*from.link_end_info_);
  } else {
    link_end_info_ = NULL;
  }
  if (from.has_link_gps()) {
    link_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.link_gps_);
  } else {
    link_gps_ = NULL;
  }
  ::memcpy(&link_len_, &from.link_len_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_space_occupany_) -
    reinterpret_cast<char*>(&link_len_)) + sizeof(link_space_occupany_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.LinkJamSenseParams)
}

void LinkJamSenseParams::SharedCtor() {
  link_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_entre_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_space_occupany_) -
      reinterpret_cast<char*>(&link_entre_info_)) + sizeof(link_space_occupany_));
}

LinkJamSenseParams::~LinkJamSenseParams() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.LinkJamSenseParams)
  SharedDtor();
}

void LinkJamSenseParams::SharedDtor() {
  link_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete link_entre_info_;
  if (this != internal_default_instance()) delete link_end_info_;
  if (this != internal_default_instance()) delete link_gps_;
}

void LinkJamSenseParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinkJamSenseParams::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkJamSenseParams& LinkJamSenseParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_LinkJamSenseParams.base);
  return *internal_default_instance();
}


void LinkJamSenseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.LinkJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_lanelist_.Clear();
  link_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && link_entre_info_ != NULL) {
    delete link_entre_info_;
  }
  link_entre_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && link_end_info_ != NULL) {
    delete link_end_info_;
  }
  link_end_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && link_gps_ != NULL) {
    delete link_gps_;
  }
  link_gps_ = NULL;
  ::memset(&link_len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_space_occupany_) -
      reinterpret_cast<char*>(&link_len_)) + sizeof(link_space_occupany_));
  _internal_metadata_.Clear();
}

bool LinkJamSenseParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.LinkJamSenseParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string link_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link_id().data(), static_cast<int>(this->link_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.LinkJamSenseParams.link_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_len = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_avgspeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_avgspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_veh_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_veh_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_direction = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_space_occupancy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_space_occupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_time_occupancy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_time_occupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_count_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_count_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_count_flow = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_count_flow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool link_is_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &link_is_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_entre_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_end_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string link_deviceid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link_deviceid().data(), static_cast<int>(this->link_deviceid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.LinkJamSenseParams.link_deviceid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_heading = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_phaseid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_phaseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string link_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.LinkJamSenseParams.link_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_no = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS link_gps = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_measnum = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_measnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_num = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_motor_volume = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_motor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_peron_volume = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_peron_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_no_motor_volume = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_no_motor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_minmotor_volume = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_minmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_medmotor_volume = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_medmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_maxmotor_volume = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_maxmotor_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 link_pcu = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_pcu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_avspeed = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_avspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_time_occupany = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_time_occupany_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_headway = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_headway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_gap = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_avdistance = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_avdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_avstop = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_avstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_speed85 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_speed85_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_queueLength = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_queuelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_stopline = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_stopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float link_space_occupany = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &link_space_occupany_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_lanelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.LinkJamSenseParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.LinkJamSenseParams)
  return false;
#undef DO_
}

void LinkJamSenseParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.LinkJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_id = 1;
  if (this->link_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_id().data(), static_cast<int>(this->link_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link_id(), output);
  }

  // float link_len = 2;
  if (this->link_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->link_len(), output);
  }

  // float link_avgspeed = 3;
  if (this->link_avgspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->link_avgspeed(), output);
  }

  // int32 link_veh_num = 4;
  if (this->link_veh_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->link_veh_num(), output);
  }

  // int32 link_type = 5;
  if (this->link_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->link_type(), output);
  }

  // int32 link_direction = 6;
  if (this->link_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->link_direction(), output);
  }

  // float link_space_occupancy = 7;
  if (this->link_space_occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->link_space_occupancy(), output);
  }

  // float link_time_occupancy = 8;
  if (this->link_time_occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->link_time_occupancy(), output);
  }

  // int32 link_count_time = 9;
  if (this->link_count_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->link_count_time(), output);
  }

  // int32 link_count_flow = 10;
  if (this->link_count_flow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->link_count_flow(), output);
  }

  // bool link_is_count = 11;
  if (this->link_is_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->link_is_count(), output);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  if (this->has_link_entre_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_link_entre_info(), output);
  }

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  if (this->has_link_end_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_link_end_info(), output);
  }

  // string link_deviceid = 14;
  if (this->link_deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_deviceid().data(), static_cast<int>(this->link_deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->link_deviceid(), output);
  }

  // int32 link_heading = 15;
  if (this->link_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->link_heading(), output);
  }

  // int32 link_phaseid = 16;
  if (this->link_phaseid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->link_phaseid(), output);
  }

  // string link_name = 17;
  if (this->link_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->link_name(), output);
  }

  // int32 link_no = 18;
  if (this->link_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->link_no(), output);
  }

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  if (this->has_link_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_link_gps(), output);
  }

  // int32 link_measnum = 20;
  if (this->link_measnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->link_measnum(), output);
  }

  // int32 link_num = 21;
  if (this->link_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->link_num(), output);
  }

  // int32 link_motor_volume = 22;
  if (this->link_motor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->link_motor_volume(), output);
  }

  // int32 link_peron_volume = 23;
  if (this->link_peron_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->link_peron_volume(), output);
  }

  // int32 link_no_motor_volume = 24;
  if (this->link_no_motor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->link_no_motor_volume(), output);
  }

  // int32 link_minmotor_volume = 25;
  if (this->link_minmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->link_minmotor_volume(), output);
  }

  // int32 link_medmotor_volume = 26;
  if (this->link_medmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->link_medmotor_volume(), output);
  }

  // int32 link_maxmotor_volume = 27;
  if (this->link_maxmotor_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->link_maxmotor_volume(), output);
  }

  // int32 link_pcu = 28;
  if (this->link_pcu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->link_pcu(), output);
  }

  // float link_avspeed = 29;
  if (this->link_avspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->link_avspeed(), output);
  }

  // float link_time_occupany = 30;
  if (this->link_time_occupany() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->link_time_occupany(), output);
  }

  // float link_headway = 31;
  if (this->link_headway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->link_headway(), output);
  }

  // float link_gap = 32;
  if (this->link_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->link_gap(), output);
  }

  // float link_avdistance = 33;
  if (this->link_avdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->link_avdistance(), output);
  }

  // float link_avstop = 34;
  if (this->link_avstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->link_avstop(), output);
  }

  // float link_speed85 = 35;
  if (this->link_speed85() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->link_speed85(), output);
  }

  // float link_queueLength = 36;
  if (this->link_queuelength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->link_queuelength(), output);
  }

  // float link_stopline = 37;
  if (this->link_stopline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->link_stopline(), output);
  }

  // float link_space_occupany = 38;
  if (this->link_space_occupany() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->link_space_occupany(), output);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_lanelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39,
      this->road_lanelist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.LinkJamSenseParams)
}

::google::protobuf::uint8* LinkJamSenseParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.LinkJamSenseParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string link_id = 1;
  if (this->link_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_id().data(), static_cast<int>(this->link_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link_id(), target);
  }

  // float link_len = 2;
  if (this->link_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->link_len(), target);
  }

  // float link_avgspeed = 3;
  if (this->link_avgspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->link_avgspeed(), target);
  }

  // int32 link_veh_num = 4;
  if (this->link_veh_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->link_veh_num(), target);
  }

  // int32 link_type = 5;
  if (this->link_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->link_type(), target);
  }

  // int32 link_direction = 6;
  if (this->link_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->link_direction(), target);
  }

  // float link_space_occupancy = 7;
  if (this->link_space_occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->link_space_occupancy(), target);
  }

  // float link_time_occupancy = 8;
  if (this->link_time_occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->link_time_occupancy(), target);
  }

  // int32 link_count_time = 9;
  if (this->link_count_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->link_count_time(), target);
  }

  // int32 link_count_flow = 10;
  if (this->link_count_flow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->link_count_flow(), target);
  }

  // bool link_is_count = 11;
  if (this->link_is_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->link_is_count(), target);
  }

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  if (this->has_link_entre_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_link_entre_info(), deterministic, target);
  }

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  if (this->has_link_end_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_link_end_info(), deterministic, target);
  }

  // string link_deviceid = 14;
  if (this->link_deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_deviceid().data(), static_cast<int>(this->link_deviceid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->link_deviceid(), target);
  }

  // int32 link_heading = 15;
  if (this->link_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->link_heading(), target);
  }

  // int32 link_phaseid = 16;
  if (this->link_phaseid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->link_phaseid(), target);
  }

  // string link_name = 17;
  if (this->link_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.LinkJamSenseParams.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->link_name(), target);
  }

  // int32 link_no = 18;
  if (this->link_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->link_no(), target);
  }

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  if (this->has_link_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_link_gps(), deterministic, target);
  }

  // int32 link_measnum = 20;
  if (this->link_measnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->link_measnum(), target);
  }

  // int32 link_num = 21;
  if (this->link_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->link_num(), target);
  }

  // int32 link_motor_volume = 22;
  if (this->link_motor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->link_motor_volume(), target);
  }

  // int32 link_peron_volume = 23;
  if (this->link_peron_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->link_peron_volume(), target);
  }

  // int32 link_no_motor_volume = 24;
  if (this->link_no_motor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->link_no_motor_volume(), target);
  }

  // int32 link_minmotor_volume = 25;
  if (this->link_minmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->link_minmotor_volume(), target);
  }

  // int32 link_medmotor_volume = 26;
  if (this->link_medmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->link_medmotor_volume(), target);
  }

  // int32 link_maxmotor_volume = 27;
  if (this->link_maxmotor_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->link_maxmotor_volume(), target);
  }

  // int32 link_pcu = 28;
  if (this->link_pcu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->link_pcu(), target);
  }

  // float link_avspeed = 29;
  if (this->link_avspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->link_avspeed(), target);
  }

  // float link_time_occupany = 30;
  if (this->link_time_occupany() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->link_time_occupany(), target);
  }

  // float link_headway = 31;
  if (this->link_headway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->link_headway(), target);
  }

  // float link_gap = 32;
  if (this->link_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->link_gap(), target);
  }

  // float link_avdistance = 33;
  if (this->link_avdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->link_avdistance(), target);
  }

  // float link_avstop = 34;
  if (this->link_avstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->link_avstop(), target);
  }

  // float link_speed85 = 35;
  if (this->link_speed85() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->link_speed85(), target);
  }

  // float link_queueLength = 36;
  if (this->link_queuelength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->link_queuelength(), target);
  }

  // float link_stopline = 37;
  if (this->link_stopline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->link_stopline(), target);
  }

  // float link_space_occupany = 38;
  if (this->link_space_occupany() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->link_space_occupany(), target);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_lanelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, this->road_lanelist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.LinkJamSenseParams)
  return target;
}

size_t LinkJamSenseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.LinkJamSenseParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->road_lanelist_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_lanelist(static_cast<int>(i)));
    }
  }

  // string link_id = 1;
  if (this->link_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_id());
  }

  // string link_deviceid = 14;
  if (this->link_deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_deviceid());
  }

  // string link_name = 17;
  if (this->link_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->link_name());
  }

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  if (this->has_link_entre_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *link_entre_info_);
  }

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  if (this->has_link_end_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *link_end_info_);
  }

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  if (this->has_link_gps()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *link_gps_);
  }

  // float link_len = 2;
  if (this->link_len() != 0) {
    total_size += 1 + 4;
  }

  // float link_avgspeed = 3;
  if (this->link_avgspeed() != 0) {
    total_size += 1 + 4;
  }

  // int32 link_veh_num = 4;
  if (this->link_veh_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_veh_num());
  }

  // int32 link_type = 5;
  if (this->link_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_type());
  }

  // int32 link_direction = 6;
  if (this->link_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_direction());
  }

  // float link_space_occupancy = 7;
  if (this->link_space_occupancy() != 0) {
    total_size += 1 + 4;
  }

  // float link_time_occupancy = 8;
  if (this->link_time_occupancy() != 0) {
    total_size += 1 + 4;
  }

  // int32 link_count_time = 9;
  if (this->link_count_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_count_time());
  }

  // int32 link_count_flow = 10;
  if (this->link_count_flow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_count_flow());
  }

  // bool link_is_count = 11;
  if (this->link_is_count() != 0) {
    total_size += 1 + 1;
  }

  // int32 link_heading = 15;
  if (this->link_heading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_heading());
  }

  // int32 link_phaseid = 16;
  if (this->link_phaseid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_phaseid());
  }

  // int32 link_no = 18;
  if (this->link_no() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_no());
  }

  // int32 link_measnum = 20;
  if (this->link_measnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_measnum());
  }

  // int32 link_num = 21;
  if (this->link_num() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_num());
  }

  // int32 link_motor_volume = 22;
  if (this->link_motor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_motor_volume());
  }

  // int32 link_peron_volume = 23;
  if (this->link_peron_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_peron_volume());
  }

  // int32 link_no_motor_volume = 24;
  if (this->link_no_motor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_no_motor_volume());
  }

  // int32 link_minmotor_volume = 25;
  if (this->link_minmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_minmotor_volume());
  }

  // int32 link_medmotor_volume = 26;
  if (this->link_medmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_medmotor_volume());
  }

  // int32 link_maxmotor_volume = 27;
  if (this->link_maxmotor_volume() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_maxmotor_volume());
  }

  // int32 link_pcu = 28;
  if (this->link_pcu() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->link_pcu());
  }

  // float link_avspeed = 29;
  if (this->link_avspeed() != 0) {
    total_size += 2 + 4;
  }

  // float link_time_occupany = 30;
  if (this->link_time_occupany() != 0) {
    total_size += 2 + 4;
  }

  // float link_headway = 31;
  if (this->link_headway() != 0) {
    total_size += 2 + 4;
  }

  // float link_gap = 32;
  if (this->link_gap() != 0) {
    total_size += 2 + 4;
  }

  // float link_avdistance = 33;
  if (this->link_avdistance() != 0) {
    total_size += 2 + 4;
  }

  // float link_avstop = 34;
  if (this->link_avstop() != 0) {
    total_size += 2 + 4;
  }

  // float link_speed85 = 35;
  if (this->link_speed85() != 0) {
    total_size += 2 + 4;
  }

  // float link_queueLength = 36;
  if (this->link_queuelength() != 0) {
    total_size += 2 + 4;
  }

  // float link_stopline = 37;
  if (this->link_stopline() != 0) {
    total_size += 2 + 4;
  }

  // float link_space_occupany = 38;
  if (this->link_space_occupany() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkJamSenseParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkJamSenseParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkJamSenseParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.LinkJamSenseParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.LinkJamSenseParams)
    MergeFrom(*source);
  }
}

void LinkJamSenseParams::MergeFrom(const LinkJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_lanelist_.MergeFrom(from.road_lanelist_);
  if (from.link_id().size() > 0) {

    link_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_id_);
  }
  if (from.link_deviceid().size() > 0) {

    link_deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_deviceid_);
  }
  if (from.link_name().size() > 0) {

    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  if (from.has_link_entre_info()) {
    mutable_link_entre_info()->::nebulalink::perceptron3::InfoEntreLineValues::MergeFrom(from.link_entre_info());
  }
  if (from.has_link_end_info()) {
    mutable_link_end_info()->::nebulalink::perceptron3::InfoEndLineValues::MergeFrom(from.link_end_info());
  }
  if (from.has_link_gps()) {
    mutable_link_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from.link_gps());
  }
  if (from.link_len() != 0) {
    set_link_len(from.link_len());
  }
  if (from.link_avgspeed() != 0) {
    set_link_avgspeed(from.link_avgspeed());
  }
  if (from.link_veh_num() != 0) {
    set_link_veh_num(from.link_veh_num());
  }
  if (from.link_type() != 0) {
    set_link_type(from.link_type());
  }
  if (from.link_direction() != 0) {
    set_link_direction(from.link_direction());
  }
  if (from.link_space_occupancy() != 0) {
    set_link_space_occupancy(from.link_space_occupancy());
  }
  if (from.link_time_occupancy() != 0) {
    set_link_time_occupancy(from.link_time_occupancy());
  }
  if (from.link_count_time() != 0) {
    set_link_count_time(from.link_count_time());
  }
  if (from.link_count_flow() != 0) {
    set_link_count_flow(from.link_count_flow());
  }
  if (from.link_is_count() != 0) {
    set_link_is_count(from.link_is_count());
  }
  if (from.link_heading() != 0) {
    set_link_heading(from.link_heading());
  }
  if (from.link_phaseid() != 0) {
    set_link_phaseid(from.link_phaseid());
  }
  if (from.link_no() != 0) {
    set_link_no(from.link_no());
  }
  if (from.link_measnum() != 0) {
    set_link_measnum(from.link_measnum());
  }
  if (from.link_num() != 0) {
    set_link_num(from.link_num());
  }
  if (from.link_motor_volume() != 0) {
    set_link_motor_volume(from.link_motor_volume());
  }
  if (from.link_peron_volume() != 0) {
    set_link_peron_volume(from.link_peron_volume());
  }
  if (from.link_no_motor_volume() != 0) {
    set_link_no_motor_volume(from.link_no_motor_volume());
  }
  if (from.link_minmotor_volume() != 0) {
    set_link_minmotor_volume(from.link_minmotor_volume());
  }
  if (from.link_medmotor_volume() != 0) {
    set_link_medmotor_volume(from.link_medmotor_volume());
  }
  if (from.link_maxmotor_volume() != 0) {
    set_link_maxmotor_volume(from.link_maxmotor_volume());
  }
  if (from.link_pcu() != 0) {
    set_link_pcu(from.link_pcu());
  }
  if (from.link_avspeed() != 0) {
    set_link_avspeed(from.link_avspeed());
  }
  if (from.link_time_occupany() != 0) {
    set_link_time_occupany(from.link_time_occupany());
  }
  if (from.link_headway() != 0) {
    set_link_headway(from.link_headway());
  }
  if (from.link_gap() != 0) {
    set_link_gap(from.link_gap());
  }
  if (from.link_avdistance() != 0) {
    set_link_avdistance(from.link_avdistance());
  }
  if (from.link_avstop() != 0) {
    set_link_avstop(from.link_avstop());
  }
  if (from.link_speed85() != 0) {
    set_link_speed85(from.link_speed85());
  }
  if (from.link_queuelength() != 0) {
    set_link_queuelength(from.link_queuelength());
  }
  if (from.link_stopline() != 0) {
    set_link_stopline(from.link_stopline());
  }
  if (from.link_space_occupany() != 0) {
    set_link_space_occupany(from.link_space_occupany());
  }
}

void LinkJamSenseParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkJamSenseParams::CopyFrom(const LinkJamSenseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.LinkJamSenseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkJamSenseParams::IsInitialized() const {
  return true;
}

void LinkJamSenseParams::Swap(LinkJamSenseParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkJamSenseParams::InternalSwap(LinkJamSenseParams* other) {
  using std::swap;
  CastToBase(&road_lanelist_)->InternalSwap(CastToBase(&other->road_lanelist_));
  link_id_.Swap(&other->link_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_deviceid_.Swap(&other->link_deviceid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(link_entre_info_, other->link_entre_info_);
  swap(link_end_info_, other->link_end_info_);
  swap(link_gps_, other->link_gps_);
  swap(link_len_, other->link_len_);
  swap(link_avgspeed_, other->link_avgspeed_);
  swap(link_veh_num_, other->link_veh_num_);
  swap(link_type_, other->link_type_);
  swap(link_direction_, other->link_direction_);
  swap(link_space_occupancy_, other->link_space_occupancy_);
  swap(link_time_occupancy_, other->link_time_occupancy_);
  swap(link_count_time_, other->link_count_time_);
  swap(link_count_flow_, other->link_count_flow_);
  swap(link_is_count_, other->link_is_count_);
  swap(link_heading_, other->link_heading_);
  swap(link_phaseid_, other->link_phaseid_);
  swap(link_no_, other->link_no_);
  swap(link_measnum_, other->link_measnum_);
  swap(link_num_, other->link_num_);
  swap(link_motor_volume_, other->link_motor_volume_);
  swap(link_peron_volume_, other->link_peron_volume_);
  swap(link_no_motor_volume_, other->link_no_motor_volume_);
  swap(link_minmotor_volume_, other->link_minmotor_volume_);
  swap(link_medmotor_volume_, other->link_medmotor_volume_);
  swap(link_maxmotor_volume_, other->link_maxmotor_volume_);
  swap(link_pcu_, other->link_pcu_);
  swap(link_avspeed_, other->link_avspeed_);
  swap(link_time_occupany_, other->link_time_occupany_);
  swap(link_headway_, other->link_headway_);
  swap(link_gap_, other->link_gap_);
  swap(link_avdistance_, other->link_avdistance_);
  swap(link_avstop_, other->link_avstop_);
  swap(link_speed85_, other->link_speed85_);
  swap(link_queuelength_, other->link_queuelength_);
  swap(link_stopline_, other->link_stopline_);
  swap(link_space_occupany_, other->link_space_occupany_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinkJamSenseParams::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptronSet::InitAsDefaultInstance() {
  ::nebulalink::perceptron3::_PerceptronSet_default_instance_._instance.get_mutable()->perception_gps_ = const_cast< ::nebulalink::perceptron3::PointGPS*>(
      ::nebulalink::perceptron3::PointGPS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptronSet::kDevideIdFieldNumber;
const int PerceptronSet::kDevideIsTrueFieldNumber;
const int PerceptronSet::kTimeStampFieldNumber;
const int PerceptronSet::kNumberFrameFieldNumber;
const int PerceptronSet::kPerceptionGpsFieldNumber;
const int PerceptronSet::kPerceptronFieldNumber;
const int PerceptronSet::kLaneJamSenseParamsFieldNumber;
const int PerceptronSet::kLinkJamSenseParamsFieldNumber;
const int PerceptronSet::kOnLineValuesFieldNumber;
const int PerceptronSet::kFrameArrayFieldNumber;
const int PerceptronSet::kEventListFieldNumber;
const int PerceptronSet::kHeartListFieldNumber;
const int PerceptronSet::kPolygonFieldNumber;
const int PerceptronSet::kObstacleFieldNumber;
const int PerceptronSet::kV2XObusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptronSet::PerceptronSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PerceptronSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nebulalink.perceptron3.PerceptronSet)
}
PerceptronSet::PerceptronSet(const PerceptronSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perceptron_(from.perceptron_),
      lane_jam_sense_params_(from.lane_jam_sense_params_),
      link_jam_sense_params_(from.link_jam_sense_params_),
      on_line_values_(from.on_line_values_),
      frame_array_(from.frame_array_),
      event_list_(from.event_list_),
      heart_list_(from.heart_list_),
      polygon_(from.polygon_),
      obstacle_(from.obstacle_),
      v2x_obus_(from.v2x_obus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devide_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devide_id().size() > 0) {
    devide_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devide_id_);
  }
  if (from.has_perception_gps()) {
    perception_gps_ = new ::nebulalink::perceptron3::PointGPS(*from.perception_gps_);
  } else {
    perception_gps_ = NULL;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_frame_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(number_frame_));
  // @@protoc_insertion_point(copy_constructor:nebulalink.perceptron3.PerceptronSet)
}

void PerceptronSet::SharedCtor() {
  devide_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&perception_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_frame_) -
      reinterpret_cast<char*>(&perception_gps_)) + sizeof(number_frame_));
}

PerceptronSet::~PerceptronSet() {
  // @@protoc_insertion_point(destructor:nebulalink.perceptron3.PerceptronSet)
  SharedDtor();
}

void PerceptronSet::SharedDtor() {
  devide_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete perception_gps_;
}

void PerceptronSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PerceptronSet::descriptor() {
  ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptronSet& PerceptronSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::scc_info_PerceptronSet.base);
  return *internal_default_instance();
}


void PerceptronSet::Clear() {
// @@protoc_insertion_point(message_clear_start:nebulalink.perceptron3.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perceptron_.Clear();
  lane_jam_sense_params_.Clear();
  link_jam_sense_params_.Clear();
  on_line_values_.Clear();
  frame_array_.Clear();
  event_list_.Clear();
  heart_list_.Clear();
  polygon_.Clear();
  obstacle_.Clear();
  v2x_obus_.Clear();
  devide_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && perception_gps_ != NULL) {
    delete perception_gps_;
  }
  perception_gps_ = NULL;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_frame_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(number_frame_));
  _internal_metadata_.Clear();
}

bool PerceptronSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nebulalink.perceptron3.PerceptronSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string devide_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devide_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devide_id().data(), static_cast<int>(this->devide_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nebulalink.perceptron3.PerceptronSet.devide_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool devide_is_true = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &devide_is_true_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nebulalink.perceptron3.PointGPS perception_gps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perception_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_perceptron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_jam_sense_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_link_jam_sense_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_on_line_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frame_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_event_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_heart_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_v2x_obus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nebulalink.perceptron3.PerceptronSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nebulalink.perceptron3.PerceptronSet)
  return false;
#undef DO_
}

void PerceptronSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nebulalink.perceptron3.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devide_id = 1;
  if (this->devide_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devide_id().data(), static_cast<int>(this->devide_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.PerceptronSet.devide_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devide_id(), output);
  }

  // bool devide_is_true = 2;
  if (this->devide_is_true() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->devide_is_true(), output);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }

  // int32 number_frame = 4;
  if (this->number_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->number_frame(), output);
  }

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  if (this->has_perception_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_perception_gps(), output);
  }

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->perceptron(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_jam_sense_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->lane_jam_sense_params(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_jam_sense_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->link_jam_sense_params(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->on_line_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->on_line_values(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->frame_array(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->event_list(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->heart_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->heart_list(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->polygon(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->obstacle(static_cast<int>(i)),
      output);
  }

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v2x_obus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->v2x_obus(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nebulalink.perceptron3.PerceptronSet)
}

::google::protobuf::uint8* PerceptronSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nebulalink.perceptron3.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devide_id = 1;
  if (this->devide_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devide_id().data(), static_cast<int>(this->devide_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nebulalink.perceptron3.PerceptronSet.devide_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devide_id(), target);
  }

  // bool devide_is_true = 2;
  if (this->devide_is_true() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->devide_is_true(), target);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }

  // int32 number_frame = 4;
  if (this->number_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->number_frame(), target);
  }

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  if (this->has_perception_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_perception_gps(), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->perceptron(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_jam_sense_params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->lane_jam_sense_params(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->link_jam_sense_params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->link_jam_sense_params(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->on_line_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->on_line_values(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->frame_array(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->event_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->heart_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->heart_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->polygon(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->obstacle(static_cast<int>(i)), deterministic, target);
  }

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->v2x_obus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->v2x_obus(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nebulalink.perceptron3.PerceptronSet)
  return target;
}

size_t PerceptronSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nebulalink.perceptron3.PerceptronSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->perceptron_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perceptron(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_jam_sense_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_jam_sense_params(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->link_jam_sense_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link_jam_sense_params(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->on_line_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->on_line_values(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame_array(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->event_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->event_list(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->heart_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->heart_list(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle(static_cast<int>(i)));
    }
  }

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->v2x_obus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->v2x_obus(static_cast<int>(i)));
    }
  }

  // string devide_id = 1;
  if (this->devide_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devide_id());
  }

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  if (this->has_perception_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *perception_gps_);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // bool devide_is_true = 2;
  if (this->devide_is_true() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_frame = 4;
  if (this->number_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_frame());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptronSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nebulalink.perceptron3.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptronSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptronSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nebulalink.perceptron3.PerceptronSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nebulalink.perceptron3.PerceptronSet)
    MergeFrom(*source);
  }
}

void PerceptronSet::MergeFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nebulalink.perceptron3.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perceptron_.MergeFrom(from.perceptron_);
  lane_jam_sense_params_.MergeFrom(from.lane_jam_sense_params_);
  link_jam_sense_params_.MergeFrom(from.link_jam_sense_params_);
  on_line_values_.MergeFrom(from.on_line_values_);
  frame_array_.MergeFrom(from.frame_array_);
  event_list_.MergeFrom(from.event_list_);
  heart_list_.MergeFrom(from.heart_list_);
  polygon_.MergeFrom(from.polygon_);
  obstacle_.MergeFrom(from.obstacle_);
  v2x_obus_.MergeFrom(from.v2x_obus_);
  if (from.devide_id().size() > 0) {

    devide_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devide_id_);
  }
  if (from.has_perception_gps()) {
    mutable_perception_gps()->::nebulalink::perceptron3::PointGPS::MergeFrom(from.perception_gps());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.devide_is_true() != 0) {
    set_devide_is_true(from.devide_is_true());
  }
  if (from.number_frame() != 0) {
    set_number_frame(from.number_frame());
  }
}

void PerceptronSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nebulalink.perceptron3.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptronSet::CopyFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nebulalink.perceptron3.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptronSet::IsInitialized() const {
  return true;
}

void PerceptronSet::Swap(PerceptronSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptronSet::InternalSwap(PerceptronSet* other) {
  using std::swap;
  CastToBase(&perceptron_)->InternalSwap(CastToBase(&other->perceptron_));
  CastToBase(&lane_jam_sense_params_)->InternalSwap(CastToBase(&other->lane_jam_sense_params_));
  CastToBase(&link_jam_sense_params_)->InternalSwap(CastToBase(&other->link_jam_sense_params_));
  CastToBase(&on_line_values_)->InternalSwap(CastToBase(&other->on_line_values_));
  CastToBase(&frame_array_)->InternalSwap(CastToBase(&other->frame_array_));
  CastToBase(&event_list_)->InternalSwap(CastToBase(&other->event_list_));
  CastToBase(&heart_list_)->InternalSwap(CastToBase(&other->heart_list_));
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
  CastToBase(&obstacle_)->InternalSwap(CastToBase(&other->obstacle_));
  CastToBase(&v2x_obus_)->InternalSwap(CastToBase(&other->v2x_obus_));
  devide_id_.Swap(&other->devide_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(perception_gps_, other->perception_gps_);
  swap(time_stamp_, other->time_stamp_);
  swap(devide_is_true_, other->devide_is_true_);
  swap(number_frame_, other->number_frame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PerceptronSet::GetMetadata() const {
  protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perceptron3
}  // namespace nebulalink
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PointGPS_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointGPS_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointGPS_CFD >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::TargetSize_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TargetSize_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TargetSize_CFD >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Acc4Way_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Acc4Way_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Acc4Way_CFD >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Motion_CFD* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Motion_CFD >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Motion_CFD >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Acc4Way* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Acc4Way >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Acc4Way >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::TargetSize* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TargetSize >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TargetSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::TimeBase* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::TimeBase >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::TimeBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PointGPS* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointGPS >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointGPS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PointDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PointDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PointDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PathPoint* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PathPoint >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PathPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::RelateLinkDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelateLinkDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelateLinkDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::RelatePathDesc* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::RelatePathDesc >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::RelatePathDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Point3* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Point3 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Point3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Point4* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Point4 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Point4 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Speed3* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Speed3 >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Speed3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Planning_PB* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Planning_PB >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Planning_PB >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PathPlanning_PB* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PathPlanning_PB >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PathPlanning_PB >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::InfoEndLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::InfoEndLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::InfoEndLineValues >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::InfoEntreLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::InfoEntreLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::InfoEntreLineValues >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::OnLineValues* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::OnLineValues >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::OnLineValues >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::FrameArray* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::FrameArray >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::FrameArray >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Nebulalink_Extend* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Nebulalink_Extend >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Nebulalink_Extend >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::V2XOBUs* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::V2XOBUs >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::V2XOBUs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::DetectorRegion* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::DetectorRegion >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::DetectorRegion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Perceptron* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Perceptron >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Perceptron >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Obstacles* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Obstacles >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Obstacles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Eventlist* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Eventlist >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Eventlist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::Heartlist* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::Heartlist >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::Heartlist >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::LaneJamSenseParams* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::LaneJamSenseParams >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::LaneJamSenseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::LinkJamSenseParams* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::LinkJamSenseParams >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::LinkJamSenseParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nebulalink::perceptron3::PerceptronSet* Arena::CreateMaybeMessage< ::nebulalink::perceptron3::PerceptronSet >(Arena* arena) {
  return Arena::CreateInternal< ::nebulalink::perceptron3::PerceptronSet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
