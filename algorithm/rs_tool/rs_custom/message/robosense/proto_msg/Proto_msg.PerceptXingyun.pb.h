// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nebulalink.perceptron3.0.5.proto

#ifndef PROTOBUF_INCLUDED_nebulalink_2eperceptron3_2e0_2e5_2eproto
#define PROTOBUF_INCLUDED_nebulalink_2eperceptron3_2e0_2e5_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto 

namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[32];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto
namespace nebulalink {
namespace perceptron3 {
class Acc4Way;
class Acc4WayDefaultTypeInternal;
extern Acc4WayDefaultTypeInternal _Acc4Way_default_instance_;
class Acc4Way_CFD;
class Acc4Way_CFDDefaultTypeInternal;
extern Acc4Way_CFDDefaultTypeInternal _Acc4Way_CFD_default_instance_;
class DetectorRegion;
class DetectorRegionDefaultTypeInternal;
extern DetectorRegionDefaultTypeInternal _DetectorRegion_default_instance_;
class Eventlist;
class EventlistDefaultTypeInternal;
extern EventlistDefaultTypeInternal _Eventlist_default_instance_;
class FrameArray;
class FrameArrayDefaultTypeInternal;
extern FrameArrayDefaultTypeInternal _FrameArray_default_instance_;
class Heartlist;
class HeartlistDefaultTypeInternal;
extern HeartlistDefaultTypeInternal _Heartlist_default_instance_;
class InfoEndLineValues;
class InfoEndLineValuesDefaultTypeInternal;
extern InfoEndLineValuesDefaultTypeInternal _InfoEndLineValues_default_instance_;
class InfoEntreLineValues;
class InfoEntreLineValuesDefaultTypeInternal;
extern InfoEntreLineValuesDefaultTypeInternal _InfoEntreLineValues_default_instance_;
class LaneJamSenseParams;
class LaneJamSenseParamsDefaultTypeInternal;
extern LaneJamSenseParamsDefaultTypeInternal _LaneJamSenseParams_default_instance_;
class LinkJamSenseParams;
class LinkJamSenseParamsDefaultTypeInternal;
extern LinkJamSenseParamsDefaultTypeInternal _LinkJamSenseParams_default_instance_;
class Motion_CFD;
class Motion_CFDDefaultTypeInternal;
extern Motion_CFDDefaultTypeInternal _Motion_CFD_default_instance_;
class Nebulalink_Extend;
class Nebulalink_ExtendDefaultTypeInternal;
extern Nebulalink_ExtendDefaultTypeInternal _Nebulalink_Extend_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class OnLineValues;
class OnLineValuesDefaultTypeInternal;
extern OnLineValuesDefaultTypeInternal _OnLineValues_default_instance_;
class PathPlanning_PB;
class PathPlanning_PBDefaultTypeInternal;
extern PathPlanning_PBDefaultTypeInternal _PathPlanning_PB_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Perceptron;
class PerceptronDefaultTypeInternal;
extern PerceptronDefaultTypeInternal _Perceptron_default_instance_;
class PerceptronSet;
class PerceptronSetDefaultTypeInternal;
extern PerceptronSetDefaultTypeInternal _PerceptronSet_default_instance_;
class Planning_PB;
class Planning_PBDefaultTypeInternal;
extern Planning_PBDefaultTypeInternal _Planning_PB_default_instance_;
class Point3;
class Point3DefaultTypeInternal;
extern Point3DefaultTypeInternal _Point3_default_instance_;
class Point4;
class Point4DefaultTypeInternal;
extern Point4DefaultTypeInternal _Point4_default_instance_;
class PointDesc;
class PointDescDefaultTypeInternal;
extern PointDescDefaultTypeInternal _PointDesc_default_instance_;
class PointGPS;
class PointGPSDefaultTypeInternal;
extern PointGPSDefaultTypeInternal _PointGPS_default_instance_;
class PointGPS_CFD;
class PointGPS_CFDDefaultTypeInternal;
extern PointGPS_CFDDefaultTypeInternal _PointGPS_CFD_default_instance_;
class RelateLinkDesc;
class RelateLinkDescDefaultTypeInternal;
extern RelateLinkDescDefaultTypeInternal _RelateLinkDesc_default_instance_;
class RelateLinkDesc_RelateLane;
class RelateLinkDesc_RelateLaneDefaultTypeInternal;
extern RelateLinkDesc_RelateLaneDefaultTypeInternal _RelateLinkDesc_RelateLane_default_instance_;
class RelatePathDesc;
class RelatePathDescDefaultTypeInternal;
extern RelatePathDescDefaultTypeInternal _RelatePathDesc_default_instance_;
class Speed3;
class Speed3DefaultTypeInternal;
extern Speed3DefaultTypeInternal _Speed3_default_instance_;
class TargetSize;
class TargetSizeDefaultTypeInternal;
extern TargetSizeDefaultTypeInternal _TargetSize_default_instance_;
class TargetSize_CFD;
class TargetSize_CFDDefaultTypeInternal;
extern TargetSize_CFDDefaultTypeInternal _TargetSize_CFD_default_instance_;
class TimeBase;
class TimeBaseDefaultTypeInternal;
extern TimeBaseDefaultTypeInternal _TimeBase_default_instance_;
class V2XOBUs;
class V2XOBUsDefaultTypeInternal;
extern V2XOBUsDefaultTypeInternal _V2XOBUs_default_instance_;
}  // namespace perceptron3
}  // namespace nebulalink
namespace google {
namespace protobuf {
template<> ::nebulalink::perceptron3::Acc4Way* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way>(Arena*);
template<> ::nebulalink::perceptron3::Acc4Way_CFD* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way_CFD>(Arena*);
template<> ::nebulalink::perceptron3::DetectorRegion* Arena::CreateMaybeMessage<::nebulalink::perceptron3::DetectorRegion>(Arena*);
template<> ::nebulalink::perceptron3::Eventlist* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Eventlist>(Arena*);
template<> ::nebulalink::perceptron3::FrameArray* Arena::CreateMaybeMessage<::nebulalink::perceptron3::FrameArray>(Arena*);
template<> ::nebulalink::perceptron3::Heartlist* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Heartlist>(Arena*);
template<> ::nebulalink::perceptron3::InfoEndLineValues* Arena::CreateMaybeMessage<::nebulalink::perceptron3::InfoEndLineValues>(Arena*);
template<> ::nebulalink::perceptron3::InfoEntreLineValues* Arena::CreateMaybeMessage<::nebulalink::perceptron3::InfoEntreLineValues>(Arena*);
template<> ::nebulalink::perceptron3::LaneJamSenseParams* Arena::CreateMaybeMessage<::nebulalink::perceptron3::LaneJamSenseParams>(Arena*);
template<> ::nebulalink::perceptron3::LinkJamSenseParams* Arena::CreateMaybeMessage<::nebulalink::perceptron3::LinkJamSenseParams>(Arena*);
template<> ::nebulalink::perceptron3::Motion_CFD* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Motion_CFD>(Arena*);
template<> ::nebulalink::perceptron3::Nebulalink_Extend* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Nebulalink_Extend>(Arena*);
template<> ::nebulalink::perceptron3::Obstacles* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Obstacles>(Arena*);
template<> ::nebulalink::perceptron3::OnLineValues* Arena::CreateMaybeMessage<::nebulalink::perceptron3::OnLineValues>(Arena*);
template<> ::nebulalink::perceptron3::PathPlanning_PB* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PathPlanning_PB>(Arena*);
template<> ::nebulalink::perceptron3::PathPoint* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PathPoint>(Arena*);
template<> ::nebulalink::perceptron3::Perceptron* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Perceptron>(Arena*);
template<> ::nebulalink::perceptron3::PerceptronSet* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PerceptronSet>(Arena*);
template<> ::nebulalink::perceptron3::Planning_PB* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Planning_PB>(Arena*);
template<> ::nebulalink::perceptron3::Point3* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Point3>(Arena*);
template<> ::nebulalink::perceptron3::Point4* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Point4>(Arena*);
template<> ::nebulalink::perceptron3::PointDesc* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PointDesc>(Arena*);
template<> ::nebulalink::perceptron3::PointGPS* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(Arena*);
template<> ::nebulalink::perceptron3::PointGPS_CFD* Arena::CreateMaybeMessage<::nebulalink::perceptron3::PointGPS_CFD>(Arena*);
template<> ::nebulalink::perceptron3::RelateLinkDesc* Arena::CreateMaybeMessage<::nebulalink::perceptron3::RelateLinkDesc>(Arena*);
template<> ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* Arena::CreateMaybeMessage<::nebulalink::perceptron3::RelateLinkDesc_RelateLane>(Arena*);
template<> ::nebulalink::perceptron3::RelatePathDesc* Arena::CreateMaybeMessage<::nebulalink::perceptron3::RelatePathDesc>(Arena*);
template<> ::nebulalink::perceptron3::Speed3* Arena::CreateMaybeMessage<::nebulalink::perceptron3::Speed3>(Arena*);
template<> ::nebulalink::perceptron3::TargetSize* Arena::CreateMaybeMessage<::nebulalink::perceptron3::TargetSize>(Arena*);
template<> ::nebulalink::perceptron3::TargetSize_CFD* Arena::CreateMaybeMessage<::nebulalink::perceptron3::TargetSize_CFD>(Arena*);
template<> ::nebulalink::perceptron3::TimeBase* Arena::CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(Arena*);
template<> ::nebulalink::perceptron3::V2XOBUs* Arena::CreateMaybeMessage<::nebulalink::perceptron3::V2XOBUs>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nebulalink {
namespace perceptron3 {

enum DetectorType {
  BREADCAST_DETECTOR = 0,
  DetectorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DetectorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DetectorType_IsValid(int value);
const DetectorType DetectorType_MIN = BREADCAST_DETECTOR;
const DetectorType DetectorType_MAX = BREADCAST_DETECTOR;
const int DetectorType_ARRAYSIZE = DetectorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectorType_descriptor();
inline const ::std::string& DetectorType_Name(DetectorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectorType_descriptor(), value);
}
inline bool DetectorType_Parse(
    const ::std::string& name, DetectorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectorType>(
    DetectorType_descriptor(), name, value);
}
// ===================================================================

class PointGPS_CFD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PointGPS_CFD) */ {
 public:
  PointGPS_CFD();
  virtual ~PointGPS_CFD();

  PointGPS_CFD(const PointGPS_CFD& from);

  inline PointGPS_CFD& operator=(const PointGPS_CFD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointGPS_CFD(PointGPS_CFD&& from) noexcept
    : PointGPS_CFD() {
    *this = ::std::move(from);
  }

  inline PointGPS_CFD& operator=(PointGPS_CFD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointGPS_CFD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointGPS_CFD* internal_default_instance() {
    return reinterpret_cast<const PointGPS_CFD*>(
               &_PointGPS_CFD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PointGPS_CFD* other);
  friend void swap(PointGPS_CFD& a, PointGPS_CFD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointGPS_CFD* New() const final {
    return CreateMaybeMessage<PointGPS_CFD>(NULL);
  }

  PointGPS_CFD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointGPS_CFD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointGPS_CFD& from);
  void MergeFrom(const PointGPS_CFD& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointGPS_CFD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double position_confidence = 1;
  void clear_position_confidence();
  static const int kPositionConfidenceFieldNumber = 1;
  double position_confidence() const;
  void set_position_confidence(double value);

  // double plevation_confidence = 2;
  void clear_plevation_confidence();
  static const int kPlevationConfidenceFieldNumber = 2;
  double plevation_confidence() const;
  void set_plevation_confidence(double value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PointGPS_CFD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double position_confidence_;
  double plevation_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetSize_CFD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.TargetSize_CFD) */ {
 public:
  TargetSize_CFD();
  virtual ~TargetSize_CFD();

  TargetSize_CFD(const TargetSize_CFD& from);

  inline TargetSize_CFD& operator=(const TargetSize_CFD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetSize_CFD(TargetSize_CFD&& from) noexcept
    : TargetSize_CFD() {
    *this = ::std::move(from);
  }

  inline TargetSize_CFD& operator=(TargetSize_CFD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetSize_CFD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetSize_CFD* internal_default_instance() {
    return reinterpret_cast<const TargetSize_CFD*>(
               &_TargetSize_CFD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TargetSize_CFD* other);
  friend void swap(TargetSize_CFD& a, TargetSize_CFD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetSize_CFD* New() const final {
    return CreateMaybeMessage<TargetSize_CFD>(NULL);
  }

  TargetSize_CFD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetSize_CFD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetSize_CFD& from);
  void MergeFrom(const TargetSize_CFD& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetSize_CFD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float object_width_cfd = 1;
  void clear_object_width_cfd();
  static const int kObjectWidthCfdFieldNumber = 1;
  float object_width_cfd() const;
  void set_object_width_cfd(float value);

  // float object_length_cfd = 2;
  void clear_object_length_cfd();
  static const int kObjectLengthCfdFieldNumber = 2;
  float object_length_cfd() const;
  void set_object_length_cfd(float value);

  // float object_height_cfd = 3;
  void clear_object_height_cfd();
  static const int kObjectHeightCfdFieldNumber = 3;
  float object_height_cfd() const;
  void set_object_height_cfd(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.TargetSize_CFD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float object_width_cfd_;
  float object_length_cfd_;
  float object_height_cfd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Acc4Way_CFD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Acc4Way_CFD) */ {
 public:
  Acc4Way_CFD();
  virtual ~Acc4Way_CFD();

  Acc4Way_CFD(const Acc4Way_CFD& from);

  inline Acc4Way_CFD& operator=(const Acc4Way_CFD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acc4Way_CFD(Acc4Way_CFD&& from) noexcept
    : Acc4Way_CFD() {
    *this = ::std::move(from);
  }

  inline Acc4Way_CFD& operator=(Acc4Way_CFD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acc4Way_CFD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acc4Way_CFD* internal_default_instance() {
    return reinterpret_cast<const Acc4Way_CFD*>(
               &_Acc4Way_CFD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Acc4Way_CFD* other);
  friend void swap(Acc4Way_CFD& a, Acc4Way_CFD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acc4Way_CFD* New() const final {
    return CreateMaybeMessage<Acc4Way_CFD>(NULL);
  }

  Acc4Way_CFD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Acc4Way_CFD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Acc4Way_CFD& from);
  void MergeFrom(const Acc4Way_CFD& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acc4Way_CFD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float lonAccConfidence = 1;
  void clear_lonaccconfidence();
  static const int kLonAccConfidenceFieldNumber = 1;
  float lonaccconfidence() const;
  void set_lonaccconfidence(float value);

  // float latAccConfidence = 2;
  void clear_lataccconfidence();
  static const int kLatAccConfidenceFieldNumber = 2;
  float lataccconfidence() const;
  void set_lataccconfidence(float value);

  // float vertAccConfidence = 3;
  void clear_vertaccconfidence();
  static const int kVertAccConfidenceFieldNumber = 3;
  float vertaccconfidence() const;
  void set_vertaccconfidence(float value);

  // float yawRateCon = 4;
  void clear_yawratecon();
  static const int kYawRateConFieldNumber = 4;
  float yawratecon() const;
  void set_yawratecon(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Acc4Way_CFD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float lonaccconfidence_;
  float lataccconfidence_;
  float vertaccconfidence_;
  float yawratecon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Motion_CFD : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Motion_CFD) */ {
 public:
  Motion_CFD();
  virtual ~Motion_CFD();

  Motion_CFD(const Motion_CFD& from);

  inline Motion_CFD& operator=(const Motion_CFD& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Motion_CFD(Motion_CFD&& from) noexcept
    : Motion_CFD() {
    *this = ::std::move(from);
  }

  inline Motion_CFD& operator=(Motion_CFD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Motion_CFD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Motion_CFD* internal_default_instance() {
    return reinterpret_cast<const Motion_CFD*>(
               &_Motion_CFD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Motion_CFD* other);
  friend void swap(Motion_CFD& a, Motion_CFD& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Motion_CFD* New() const final {
    return CreateMaybeMessage<Motion_CFD>(NULL);
  }

  Motion_CFD* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Motion_CFD>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Motion_CFD& from);
  void MergeFrom(const Motion_CFD& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion_CFD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float speedCfd = 1;
  void clear_speedcfd();
  static const int kSpeedCfdFieldNumber = 1;
  float speedcfd() const;
  void set_speedcfd(float value);

  // float headingCfd = 2;
  void clear_headingcfd();
  static const int kHeadingCfdFieldNumber = 2;
  float headingcfd() const;
  void set_headingcfd(float value);

  // float steerCfd = 3;
  void clear_steercfd();
  static const int kSteerCfdFieldNumber = 3;
  float steercfd() const;
  void set_steercfd(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Motion_CFD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float speedcfd_;
  float headingcfd_;
  float steercfd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Acc4Way : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Acc4Way) */ {
 public:
  Acc4Way();
  virtual ~Acc4Way();

  Acc4Way(const Acc4Way& from);

  inline Acc4Way& operator=(const Acc4Way& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acc4Way(Acc4Way&& from) noexcept
    : Acc4Way() {
    *this = ::std::move(from);
  }

  inline Acc4Way& operator=(Acc4Way&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acc4Way& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acc4Way* internal_default_instance() {
    return reinterpret_cast<const Acc4Way*>(
               &_Acc4Way_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Acc4Way* other);
  friend void swap(Acc4Way& a, Acc4Way& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acc4Way* New() const final {
    return CreateMaybeMessage<Acc4Way>(NULL);
  }

  Acc4Way* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Acc4Way>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Acc4Way& from);
  void MergeFrom(const Acc4Way& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acc4Way* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float acc4WayLon = 1;
  void clear_acc4waylon();
  static const int kAcc4WayLonFieldNumber = 1;
  float acc4waylon() const;
  void set_acc4waylon(float value);

  // float acc4WayLat = 2;
  void clear_acc4waylat();
  static const int kAcc4WayLatFieldNumber = 2;
  float acc4waylat() const;
  void set_acc4waylat(float value);

  // float acc4WayVert = 3;
  void clear_acc4wayvert();
  static const int kAcc4WayVertFieldNumber = 3;
  float acc4wayvert() const;
  void set_acc4wayvert(float value);

  // float acc4WayYaw = 4;
  void clear_acc4wayyaw();
  static const int kAcc4WayYawFieldNumber = 4;
  float acc4wayyaw() const;
  void set_acc4wayyaw(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Acc4Way)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float acc4waylon_;
  float acc4waylat_;
  float acc4wayvert_;
  float acc4wayyaw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.TargetSize) */ {
 public:
  TargetSize();
  virtual ~TargetSize();

  TargetSize(const TargetSize& from);

  inline TargetSize& operator=(const TargetSize& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetSize(TargetSize&& from) noexcept
    : TargetSize() {
    *this = ::std::move(from);
  }

  inline TargetSize& operator=(TargetSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetSize* internal_default_instance() {
    return reinterpret_cast<const TargetSize*>(
               &_TargetSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TargetSize* other);
  friend void swap(TargetSize& a, TargetSize& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetSize* New() const final {
    return CreateMaybeMessage<TargetSize>(NULL);
  }

  TargetSize* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetSize>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetSize& from);
  void MergeFrom(const TargetSize& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float object_width = 1;
  void clear_object_width();
  static const int kObjectWidthFieldNumber = 1;
  float object_width() const;
  void set_object_width(float value);

  // float object_length = 2;
  void clear_object_length();
  static const int kObjectLengthFieldNumber = 2;
  float object_length() const;
  void set_object_length(float value);

  // float object_height = 3;
  void clear_object_height();
  static const int kObjectHeightFieldNumber = 3;
  float object_height() const;
  void set_object_height(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.TargetSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float object_width_;
  float object_length_;
  float object_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.TimeBase) */ {
 public:
  TimeBase();
  virtual ~TimeBase();

  TimeBase(const TimeBase& from);

  inline TimeBase& operator=(const TimeBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeBase(TimeBase&& from) noexcept
    : TimeBase() {
    *this = ::std::move(from);
  }

  inline TimeBase& operator=(TimeBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeBase* internal_default_instance() {
    return reinterpret_cast<const TimeBase*>(
               &_TimeBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TimeBase* other);
  friend void swap(TimeBase& a, TimeBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeBase* New() const final {
    return CreateMaybeMessage<TimeBase>(NULL);
  }

  TimeBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeBase& from);
  void MergeFrom(const TimeBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // int32 month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // int32 day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // int32 hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::int32 hour() const;
  void set_hour(::google::protobuf::int32 value);

  // int32 min = 5;
  void clear_min();
  static const int kMinFieldNumber = 5;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // int32 second = 6;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  ::google::protobuf::int32 second() const;
  void set_second(::google::protobuf::int32 value);

  // int32 miilsecond = 7;
  void clear_miilsecond();
  static const int kMiilsecondFieldNumber = 7;
  ::google::protobuf::int32 miilsecond() const;
  void set_miilsecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.TimeBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 miilsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointGPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PointGPS) */ {
 public:
  PointGPS();
  virtual ~PointGPS();

  PointGPS(const PointGPS& from);

  inline PointGPS& operator=(const PointGPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointGPS(PointGPS&& from) noexcept
    : PointGPS() {
    *this = ::std::move(from);
  }

  inline PointGPS& operator=(PointGPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointGPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointGPS* internal_default_instance() {
    return reinterpret_cast<const PointGPS*>(
               &_PointGPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PointGPS* other);
  friend void swap(PointGPS& a, PointGPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointGPS* New() const final {
    return CreateMaybeMessage<PointGPS>(NULL);
  }

  PointGPS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointGPS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointGPS& from);
  void MergeFrom(const PointGPS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointGPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double object_longitude = 1;
  void clear_object_longitude();
  static const int kObjectLongitudeFieldNumber = 1;
  double object_longitude() const;
  void set_object_longitude(double value);

  // double object_latitude = 2;
  void clear_object_latitude();
  static const int kObjectLatitudeFieldNumber = 2;
  double object_latitude() const;
  void set_object_latitude(double value);

  // double object_elevation = 3;
  void clear_object_elevation();
  static const int kObjectElevationFieldNumber = 3;
  double object_elevation() const;
  void set_object_elevation(double value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PointGPS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double object_longitude_;
  double object_latitude_;
  double object_elevation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PointDesc) */ {
 public:
  PointDesc();
  virtual ~PointDesc();

  PointDesc(const PointDesc& from);

  inline PointDesc& operator=(const PointDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointDesc(PointDesc&& from) noexcept
    : PointDesc() {
    *this = ::std::move(from);
  }

  inline PointDesc& operator=(PointDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointDesc* internal_default_instance() {
    return reinterpret_cast<const PointDesc*>(
               &_PointDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PointDesc* other);
  friend void swap(PointDesc& a, PointDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointDesc* New() const final {
    return CreateMaybeMessage<PointDesc>(NULL);
  }

  PointDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointDesc& from);
  void MergeFrom(const PointDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
  bool has_p_accel_4way() const;
  void clear_p_accel_4way();
  static const int kPAccel4WayFieldNumber = 8;
  private:
  const ::nebulalink::perceptron3::Acc4Way& _internal_p_accel_4way() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way& p_accel_4way() const;
  ::nebulalink::perceptron3::Acc4Way* release_p_accel_4way();
  ::nebulalink::perceptron3::Acc4Way* mutable_p_accel_4way();
  void set_allocated_p_accel_4way(::nebulalink::perceptron3::Acc4Way* p_accel_4way);

  // .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
  bool has_p_pos_cfd() const;
  void clear_p_pos_cfd();
  static const int kPPosCfdFieldNumber = 14;
  private:
  const ::nebulalink::perceptron3::PointGPS_CFD& _internal_p_pos_cfd() const;
  public:
  const ::nebulalink::perceptron3::PointGPS_CFD& p_pos_cfd() const;
  ::nebulalink::perceptron3::PointGPS_CFD* release_p_pos_cfd();
  ::nebulalink::perceptron3::PointGPS_CFD* mutable_p_pos_cfd();
  void set_allocated_p_pos_cfd(::nebulalink::perceptron3::PointGPS_CFD* p_pos_cfd);

  // double p_longitude = 1;
  void clear_p_longitude();
  static const int kPLongitudeFieldNumber = 1;
  double p_longitude() const;
  void set_p_longitude(double value);

  // double p_latitude = 2;
  void clear_p_latitude();
  static const int kPLatitudeFieldNumber = 2;
  double p_latitude() const;
  void set_p_latitude(double value);

  // double p_altitude = 3;
  void clear_p_altitude();
  static const int kPAltitudeFieldNumber = 3;
  double p_altitude() const;
  void set_p_altitude(double value);

  // int32 p_NS = 4;
  void clear_p_ns();
  static const int kPNSFieldNumber = 4;
  ::google::protobuf::int32 p_ns() const;
  void set_p_ns(::google::protobuf::int32 value);

  // int32 p_EW = 5;
  void clear_p_ew();
  static const int kPEWFieldNumber = 5;
  ::google::protobuf::int32 p_ew() const;
  void set_p_ew(::google::protobuf::int32 value);

  // float p_speed = 6;
  void clear_p_speed();
  static const int kPSpeedFieldNumber = 6;
  float p_speed() const;
  void set_p_speed(float value);

  // float p_heading = 7;
  void clear_p_heading();
  static const int kPHeadingFieldNumber = 7;
  float p_heading() const;
  void set_p_heading(float value);

  // double p_dis2end = 9;
  void clear_p_dis2end();
  static const int kPDis2EndFieldNumber = 9;
  double p_dis2end() const;
  void set_p_dis2end(double value);

  // int64 p_up_region_node_id = 10;
  void clear_p_up_region_node_id();
  static const int kPUpRegionNodeIdFieldNumber = 10;
  ::google::protobuf::int64 p_up_region_node_id() const;
  void set_p_up_region_node_id(::google::protobuf::int64 value);

  // int64 p_down_region_node_id = 11;
  void clear_p_down_region_node_id();
  static const int kPDownRegionNodeIdFieldNumber = 11;
  ::google::protobuf::int64 p_down_region_node_id() const;
  void set_p_down_region_node_id(::google::protobuf::int64 value);

  // int32 p_relate_lane_id = 12;
  void clear_p_relate_lane_id();
  static const int kPRelateLaneIdFieldNumber = 12;
  ::google::protobuf::int32 p_relate_lane_id() const;
  void set_p_relate_lane_id(::google::protobuf::int32 value);

  // int32 satellite_num = 13;
  void clear_satellite_num();
  static const int kSatelliteNumFieldNumber = 13;
  ::google::protobuf::int32 satellite_num() const;
  void set_satellite_num(::google::protobuf::int32 value);

  // int32 time_offset = 15;
  void clear_time_offset();
  static const int kTimeOffsetFieldNumber = 15;
  ::google::protobuf::int32 time_offset() const;
  void set_time_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PointDesc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink::perceptron3::Acc4Way* p_accel_4way_;
  ::nebulalink::perceptron3::PointGPS_CFD* p_pos_cfd_;
  double p_longitude_;
  double p_latitude_;
  double p_altitude_;
  ::google::protobuf::int32 p_ns_;
  ::google::protobuf::int32 p_ew_;
  float p_speed_;
  float p_heading_;
  double p_dis2end_;
  ::google::protobuf::int64 p_up_region_node_id_;
  ::google::protobuf::int64 p_down_region_node_id_;
  ::google::protobuf::int32 p_relate_lane_id_;
  ::google::protobuf::int32 satellite_num_;
  ::google::protobuf::int32 time_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PathPoint* other);
  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(NULL);
  }

  PathPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulalink.perceptron3.TimeBase pp_time = 1;
  bool has_pp_time() const;
  void clear_pp_time();
  static const int kPpTimeFieldNumber = 1;
  private:
  const ::nebulalink::perceptron3::TimeBase& _internal_pp_time() const;
  public:
  const ::nebulalink::perceptron3::TimeBase& pp_time() const;
  ::nebulalink::perceptron3::TimeBase* release_pp_time();
  ::nebulalink::perceptron3::TimeBase* mutable_pp_time();
  void set_allocated_pp_time(::nebulalink::perceptron3::TimeBase* pp_time);

  // .nebulalink.perceptron3.PointDesc pp_point = 2;
  bool has_pp_point() const;
  void clear_pp_point();
  static const int kPpPointFieldNumber = 2;
  private:
  const ::nebulalink::perceptron3::PointDesc& _internal_pp_point() const;
  public:
  const ::nebulalink::perceptron3::PointDesc& pp_point() const;
  ::nebulalink::perceptron3::PointDesc* release_pp_point();
  ::nebulalink::perceptron3::PointDesc* mutable_pp_point();
  void set_allocated_pp_point(::nebulalink::perceptron3::PointDesc* pp_point);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PathPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink::perceptron3::TimeBase* pp_time_;
  ::nebulalink::perceptron3::PointDesc* pp_point_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelateLinkDesc_RelateLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.RelateLinkDesc.RelateLane) */ {
 public:
  RelateLinkDesc_RelateLane();
  virtual ~RelateLinkDesc_RelateLane();

  RelateLinkDesc_RelateLane(const RelateLinkDesc_RelateLane& from);

  inline RelateLinkDesc_RelateLane& operator=(const RelateLinkDesc_RelateLane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelateLinkDesc_RelateLane(RelateLinkDesc_RelateLane&& from) noexcept
    : RelateLinkDesc_RelateLane() {
    *this = ::std::move(from);
  }

  inline RelateLinkDesc_RelateLane& operator=(RelateLinkDesc_RelateLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelateLinkDesc_RelateLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelateLinkDesc_RelateLane* internal_default_instance() {
    return reinterpret_cast<const RelateLinkDesc_RelateLane*>(
               &_RelateLinkDesc_RelateLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RelateLinkDesc_RelateLane* other);
  friend void swap(RelateLinkDesc_RelateLane& a, RelateLinkDesc_RelateLane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelateLinkDesc_RelateLane* New() const final {
    return CreateMaybeMessage<RelateLinkDesc_RelateLane>(NULL);
  }

  RelateLinkDesc_RelateLane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelateLinkDesc_RelateLane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelateLinkDesc_RelateLane& from);
  void MergeFrom(const RelateLinkDesc_RelateLane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelateLinkDesc_RelateLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rtl_lane_id = 1;
  void clear_rtl_lane_id();
  static const int kRtlLaneIdFieldNumber = 1;
  ::google::protobuf::int32 rtl_lane_id() const;
  void set_rtl_lane_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.RelateLinkDesc.RelateLane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rtl_lane_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelateLinkDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.RelateLinkDesc) */ {
 public:
  RelateLinkDesc();
  virtual ~RelateLinkDesc();

  RelateLinkDesc(const RelateLinkDesc& from);

  inline RelateLinkDesc& operator=(const RelateLinkDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelateLinkDesc(RelateLinkDesc&& from) noexcept
    : RelateLinkDesc() {
    *this = ::std::move(from);
  }

  inline RelateLinkDesc& operator=(RelateLinkDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelateLinkDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelateLinkDesc* internal_default_instance() {
    return reinterpret_cast<const RelateLinkDesc*>(
               &_RelateLinkDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RelateLinkDesc* other);
  friend void swap(RelateLinkDesc& a, RelateLinkDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelateLinkDesc* New() const final {
    return CreateMaybeMessage<RelateLinkDesc>(NULL);
  }

  RelateLinkDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelateLinkDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelateLinkDesc& from);
  void MergeFrom(const RelateLinkDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelateLinkDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelateLinkDesc_RelateLane RelateLane;

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
  int rtl_lanes_size() const;
  void clear_rtl_lanes();
  static const int kRtlLanesFieldNumber = 3;
  ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* mutable_rtl_lanes(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >*
      mutable_rtl_lanes();
  const ::nebulalink::perceptron3::RelateLinkDesc_RelateLane& rtl_lanes(int index) const;
  ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* add_rtl_lanes();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >&
      rtl_lanes() const;

  // int32 up_region_node_id = 1;
  void clear_up_region_node_id();
  static const int kUpRegionNodeIdFieldNumber = 1;
  ::google::protobuf::int32 up_region_node_id() const;
  void set_up_region_node_id(::google::protobuf::int32 value);

  // int32 down_region_node_id = 2;
  void clear_down_region_node_id();
  static const int kDownRegionNodeIdFieldNumber = 2;
  ::google::protobuf::int32 down_region_node_id() const;
  void set_down_region_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.RelateLinkDesc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane > rtl_lanes_;
  ::google::protobuf::int32 up_region_node_id_;
  ::google::protobuf::int32 down_region_node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelatePathDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.RelatePathDesc) */ {
 public:
  RelatePathDesc();
  virtual ~RelatePathDesc();

  RelatePathDesc(const RelatePathDesc& from);

  inline RelatePathDesc& operator=(const RelatePathDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelatePathDesc(RelatePathDesc&& from) noexcept
    : RelatePathDesc() {
    *this = ::std::move(from);
  }

  inline RelatePathDesc& operator=(RelatePathDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelatePathDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatePathDesc* internal_default_instance() {
    return reinterpret_cast<const RelatePathDesc*>(
               &_RelatePathDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RelatePathDesc* other);
  friend void swap(RelatePathDesc& a, RelatePathDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelatePathDesc* New() const final {
    return CreateMaybeMessage<RelatePathDesc>(NULL);
  }

  RelatePathDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelatePathDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelatePathDesc& from);
  void MergeFrom(const RelatePathDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatePathDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
  int rpd_pathpoint_size() const;
  void clear_rpd_pathpoint();
  static const int kRpdPathPointFieldNumber = 1;
  ::nebulalink::perceptron3::PointDesc* mutable_rpd_pathpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
      mutable_rpd_pathpoint();
  const ::nebulalink::perceptron3::PointDesc& rpd_pathpoint(int index) const;
  ::nebulalink::perceptron3::PointDesc* add_rpd_pathpoint();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
      rpd_pathpoint() const;

  // float rpd_radius = 2;
  void clear_rpd_radius();
  static const int kRpdRadiusFieldNumber = 2;
  float rpd_radius() const;
  void set_rpd_radius(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.RelatePathDesc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc > rpd_pathpoint_;
  float rpd_radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Point3) */ {
 public:
  Point3();
  virtual ~Point3();

  Point3(const Point3& from);

  inline Point3& operator=(const Point3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3(Point3&& from) noexcept
    : Point3() {
    *this = ::std::move(from);
  }

  inline Point3& operator=(Point3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3* internal_default_instance() {
    return reinterpret_cast<const Point3*>(
               &_Point3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Point3* other);
  friend void swap(Point3& a, Point3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3* New() const final {
    return CreateMaybeMessage<Point3>(NULL);
  }

  Point3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point3& from);
  void MergeFrom(const Point3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Point3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Point4) */ {
 public:
  Point4();
  virtual ~Point4();

  Point4(const Point4& from);

  inline Point4& operator=(const Point4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point4(Point4&& from) noexcept
    : Point4() {
    *this = ::std::move(from);
  }

  inline Point4& operator=(Point4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point4* internal_default_instance() {
    return reinterpret_cast<const Point4*>(
               &_Point4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Point4* other);
  friend void swap(Point4& a, Point4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point4* New() const final {
    return CreateMaybeMessage<Point4>(NULL);
  }

  Point4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point4& from);
  void MergeFrom(const Point4& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 camera_x = 1;
  void clear_camera_x();
  static const int kCameraXFieldNumber = 1;
  ::google::protobuf::int32 camera_x() const;
  void set_camera_x(::google::protobuf::int32 value);

  // int32 camera_y = 2;
  void clear_camera_y();
  static const int kCameraYFieldNumber = 2;
  ::google::protobuf::int32 camera_y() const;
  void set_camera_y(::google::protobuf::int32 value);

  // int32 camera_w = 3;
  void clear_camera_w();
  static const int kCameraWFieldNumber = 3;
  ::google::protobuf::int32 camera_w() const;
  void set_camera_w(::google::protobuf::int32 value);

  // int32 camera_h = 4;
  void clear_camera_h();
  static const int kCameraHFieldNumber = 4;
  ::google::protobuf::int32 camera_h() const;
  void set_camera_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Point4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 camera_x_;
  ::google::protobuf::int32 camera_y_;
  ::google::protobuf::int32 camera_w_;
  ::google::protobuf::int32 camera_h_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Speed3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Speed3) */ {
 public:
  Speed3();
  virtual ~Speed3();

  Speed3(const Speed3& from);

  inline Speed3& operator=(const Speed3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Speed3(Speed3&& from) noexcept
    : Speed3() {
    *this = ::std::move(from);
  }

  inline Speed3& operator=(Speed3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Speed3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Speed3* internal_default_instance() {
    return reinterpret_cast<const Speed3*>(
               &_Speed3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Speed3* other);
  friend void swap(Speed3& a, Speed3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Speed3* New() const final {
    return CreateMaybeMessage<Speed3>(NULL);
  }

  Speed3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Speed3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Speed3& from);
  void MergeFrom(const Speed3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Speed3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float speed_x = 1;
  void clear_speed_x();
  static const int kSpeedXFieldNumber = 1;
  float speed_x() const;
  void set_speed_x(float value);

  // float speed_y = 2;
  void clear_speed_y();
  static const int kSpeedYFieldNumber = 2;
  float speed_y() const;
  void set_speed_y(float value);

  // float speed_z = 3;
  void clear_speed_z();
  static const int kSpeedZFieldNumber = 3;
  float speed_z() const;
  void set_speed_z(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Speed3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float speed_x_;
  float speed_y_;
  float speed_z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Planning_PB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Planning_PB) */ {
 public:
  Planning_PB();
  virtual ~Planning_PB();

  Planning_PB(const Planning_PB& from);

  inline Planning_PB& operator=(const Planning_PB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Planning_PB(Planning_PB&& from) noexcept
    : Planning_PB() {
    *this = ::std::move(from);
  }

  inline Planning_PB& operator=(Planning_PB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Planning_PB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Planning_PB* internal_default_instance() {
    return reinterpret_cast<const Planning_PB*>(
               &_Planning_PB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Planning_PB* other);
  friend void swap(Planning_PB& a, Planning_PB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Planning_PB* New() const final {
    return CreateMaybeMessage<Planning_PB>(NULL);
  }

  Planning_PB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Planning_PB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Planning_PB& from);
  void MergeFrom(const Planning_PB& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Planning_PB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
  int path_planning_size() const;
  void clear_path_planning();
  static const int kPathPlanningFieldNumber = 4;
  ::nebulalink::perceptron3::PathPlanning_PB* mutable_path_planning(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPlanning_PB >*
      mutable_path_planning();
  const ::nebulalink::perceptron3::PathPlanning_PB& path_planning(int index) const;
  ::nebulalink::perceptron3::PathPlanning_PB* add_path_planning();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPlanning_PB >&
      path_planning() const;

  // string driving_behavior = 3;
  void clear_driving_behavior();
  static const int kDrivingBehaviorFieldNumber = 3;
  const ::std::string& driving_behavior() const;
  void set_driving_behavior(const ::std::string& value);
  #if LANG_CXX11
  void set_driving_behavior(::std::string&& value);
  #endif
  void set_driving_behavior(const char* value);
  void set_driving_behavior(const char* value, size_t size);
  ::std::string* mutable_driving_behavior();
  ::std::string* release_driving_behavior();
  void set_allocated_driving_behavior(::std::string* driving_behavior);

  // int32 duration = 1;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // int32 confid = 2;
  void clear_confid();
  static const int kConfidFieldNumber = 2;
  ::google::protobuf::int32 confid() const;
  void set_confid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Planning_PB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPlanning_PB > path_planning_;
  ::google::protobuf::internal::ArenaStringPtr driving_behavior_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 confid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPlanning_PB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PathPlanning_PB) */ {
 public:
  PathPlanning_PB();
  virtual ~PathPlanning_PB();

  PathPlanning_PB(const PathPlanning_PB& from);

  inline PathPlanning_PB& operator=(const PathPlanning_PB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPlanning_PB(PathPlanning_PB&& from) noexcept
    : PathPlanning_PB() {
    *this = ::std::move(from);
  }

  inline PathPlanning_PB& operator=(PathPlanning_PB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPlanning_PB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPlanning_PB* internal_default_instance() {
    return reinterpret_cast<const PathPlanning_PB*>(
               &_PathPlanning_PB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(PathPlanning_PB* other);
  friend void swap(PathPlanning_PB& a, PathPlanning_PB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPlanning_PB* New() const final {
    return CreateMaybeMessage<PathPlanning_PB>(NULL);
  }

  PathPlanning_PB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPlanning_PB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPlanning_PB& from);
  void MergeFrom(const PathPlanning_PB& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPlanning_PB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .nebulalink.perceptron3.PointDesc pplan_pos = 1;
  bool has_pplan_pos() const;
  void clear_pplan_pos();
  static const int kPplanPosFieldNumber = 1;
  private:
  const ::nebulalink::perceptron3::PointDesc& _internal_pplan_pos() const;
  public:
  const ::nebulalink::perceptron3::PointDesc& pplan_pos() const;
  ::nebulalink::perceptron3::PointDesc* release_pplan_pos();
  ::nebulalink::perceptron3::PointDesc* mutable_pplan_pos();
  void set_allocated_pplan_pos(::nebulalink::perceptron3::PointDesc* pplan_pos);

  // .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
  bool has_pplan_acce() const;
  void clear_pplan_acce();
  static const int kPplanAcceFieldNumber = 4;
  private:
  const ::nebulalink::perceptron3::Acc4Way& _internal_pplan_acce() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way& pplan_acce() const;
  ::nebulalink::perceptron3::Acc4Way* release_pplan_acce();
  ::nebulalink::perceptron3::Acc4Way* mutable_pplan_acce();
  void set_allocated_pplan_acce(::nebulalink::perceptron3::Acc4Way* pplan_acce);

  // .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
  bool has_pplan_acce_cfd() const;
  void clear_pplan_acce_cfd();
  static const int kPplanAcceCfdFieldNumber = 5;
  private:
  const ::nebulalink::perceptron3::Acc4Way_CFD& _internal_pplan_acce_cfd() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way_CFD& pplan_acce_cfd() const;
  ::nebulalink::perceptron3::Acc4Way_CFD* release_pplan_acce_cfd();
  ::nebulalink::perceptron3::Acc4Way_CFD* mutable_pplan_acce_cfd();
  void set_allocated_pplan_acce_cfd(::nebulalink::perceptron3::Acc4Way_CFD* pplan_acce_cfd);

  // float pplan_speed_cfd = 2;
  void clear_pplan_speed_cfd();
  static const int kPplanSpeedCfdFieldNumber = 2;
  float pplan_speed_cfd() const;
  void set_pplan_speed_cfd(float value);

  // float pplan_heading_cfd = 3;
  void clear_pplan_heading_cfd();
  static const int kPplanHeadingCfdFieldNumber = 3;
  float pplan_heading_cfd() const;
  void set_pplan_heading_cfd(float value);

  // int32 estimated_time = 6;
  void clear_estimated_time();
  static const int kEstimatedTimeFieldNumber = 6;
  ::google::protobuf::int32 estimated_time() const;
  void set_estimated_time(::google::protobuf::int32 value);

  // int32 time_confidence = 7;
  void clear_time_confidence();
  static const int kTimeConfidenceFieldNumber = 7;
  ::google::protobuf::int32 time_confidence() const;
  void set_time_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PathPlanning_PB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::nebulalink::perceptron3::PointDesc* pplan_pos_;
  ::nebulalink::perceptron3::Acc4Way* pplan_acce_;
  ::nebulalink::perceptron3::Acc4Way_CFD* pplan_acce_cfd_;
  float pplan_speed_cfd_;
  float pplan_heading_cfd_;
  ::google::protobuf::int32 estimated_time_;
  ::google::protobuf::int32 time_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoEndLineValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.InfoEndLineValues) */ {
 public:
  InfoEndLineValues();
  virtual ~InfoEndLineValues();

  InfoEndLineValues(const InfoEndLineValues& from);

  inline InfoEndLineValues& operator=(const InfoEndLineValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoEndLineValues(InfoEndLineValues&& from) noexcept
    : InfoEndLineValues() {
    *this = ::std::move(from);
  }

  inline InfoEndLineValues& operator=(InfoEndLineValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoEndLineValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoEndLineValues* internal_default_instance() {
    return reinterpret_cast<const InfoEndLineValues*>(
               &_InfoEndLineValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(InfoEndLineValues* other);
  friend void swap(InfoEndLineValues& a, InfoEndLineValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoEndLineValues* New() const final {
    return CreateMaybeMessage<InfoEndLineValues>(NULL);
  }

  InfoEndLineValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoEndLineValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoEndLineValues& from);
  void MergeFrom(const InfoEndLineValues& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoEndLineValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.InfoEndLineValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoEntreLineValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.InfoEntreLineValues) */ {
 public:
  InfoEntreLineValues();
  virtual ~InfoEntreLineValues();

  InfoEntreLineValues(const InfoEntreLineValues& from);

  inline InfoEntreLineValues& operator=(const InfoEntreLineValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoEntreLineValues(InfoEntreLineValues&& from) noexcept
    : InfoEntreLineValues() {
    *this = ::std::move(from);
  }

  inline InfoEntreLineValues& operator=(InfoEntreLineValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoEntreLineValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoEntreLineValues* internal_default_instance() {
    return reinterpret_cast<const InfoEntreLineValues*>(
               &_InfoEntreLineValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(InfoEntreLineValues* other);
  friend void swap(InfoEntreLineValues& a, InfoEntreLineValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoEntreLineValues* New() const final {
    return CreateMaybeMessage<InfoEntreLineValues>(NULL);
  }

  InfoEntreLineValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoEntreLineValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoEntreLineValues& from);
  void MergeFrom(const InfoEntreLineValues& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoEntreLineValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.InfoEntreLineValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnLineValues : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.OnLineValues) */ {
 public:
  OnLineValues();
  virtual ~OnLineValues();

  OnLineValues(const OnLineValues& from);

  inline OnLineValues& operator=(const OnLineValues& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnLineValues(OnLineValues&& from) noexcept
    : OnLineValues() {
    *this = ::std::move(from);
  }

  inline OnLineValues& operator=(OnLineValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnLineValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnLineValues* internal_default_instance() {
    return reinterpret_cast<const OnLineValues*>(
               &_OnLineValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(OnLineValues* other);
  friend void swap(OnLineValues& a, OnLineValues& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnLineValues* New() const final {
    return CreateMaybeMessage<OnLineValues>(NULL);
  }

  OnLineValues* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnLineValues>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnLineValues& from);
  void MergeFrom(const OnLineValues& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnLineValues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
  int road_linklist_size() const;
  void clear_road_linklist();
  static const int kRoadLinklistFieldNumber = 24;
  ::nebulalink::perceptron3::LinkJamSenseParams* mutable_road_linklist(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >*
      mutable_road_linklist();
  const ::nebulalink::perceptron3::LinkJamSenseParams& road_linklist(int index) const;
  ::nebulalink::perceptron3::LinkJamSenseParams* add_road_linklist();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >&
      road_linklist() const;

  // string cross_name = 5;
  void clear_cross_name();
  static const int kCrossNameFieldNumber = 5;
  const ::std::string& cross_name() const;
  void set_cross_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cross_name(::std::string&& value);
  #endif
  void set_cross_name(const char* value);
  void set_cross_name(const char* value, size_t size);
  ::std::string* mutable_cross_name();
  ::std::string* release_cross_name();
  void set_allocated_cross_name(::std::string* cross_name);

  // .nebulalink.perceptron3.PointGPS pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::nebulalink::perceptron3::PointGPS& _internal_pos() const;
  public:
  const ::nebulalink::perceptron3::PointGPS& pos() const;
  ::nebulalink::perceptron3::PointGPS* release_pos();
  ::nebulalink::perceptron3::PointGPS* mutable_pos();
  void set_allocated_pos(::nebulalink::perceptron3::PointGPS* pos);

  // int32 cycleid = 1;
  void clear_cycleid();
  static const int kCycleidFieldNumber = 1;
  ::google::protobuf::int32 cycleid() const;
  void set_cycleid(::google::protobuf::int32 value);

  // int32 vehnum = 3;
  void clear_vehnum();
  static const int kVehnumFieldNumber = 3;
  ::google::protobuf::int32 vehnum() const;
  void set_vehnum(::google::protobuf::int32 value);

  // float avgSpeed = 4;
  void clear_avgspeed();
  static const int kAvgSpeedFieldNumber = 4;
  float avgspeed() const;
  void set_avgspeed(float value);

  // int32 cross_laneno = 6;
  void clear_cross_laneno();
  static const int kCrossLanenoFieldNumber = 6;
  ::google::protobuf::int32 cross_laneno() const;
  void set_cross_laneno(::google::protobuf::int32 value);

  // int32 cross_volume = 7;
  void clear_cross_volume();
  static const int kCrossVolumeFieldNumber = 7;
  ::google::protobuf::int32 cross_volume() const;
  void set_cross_volume(::google::protobuf::int32 value);

  // int32 cross_peron_volume = 8;
  void clear_cross_peron_volume();
  static const int kCrossPeronVolumeFieldNumber = 8;
  ::google::protobuf::int32 cross_peron_volume() const;
  void set_cross_peron_volume(::google::protobuf::int32 value);

  // int32 cross_no_motor_volume = 9;
  void clear_cross_no_motor_volume();
  static const int kCrossNoMotorVolumeFieldNumber = 9;
  ::google::protobuf::int32 cross_no_motor_volume() const;
  void set_cross_no_motor_volume(::google::protobuf::int32 value);

  // int32 cross_minmotor_volume = 10;
  void clear_cross_minmotor_volume();
  static const int kCrossMinmotorVolumeFieldNumber = 10;
  ::google::protobuf::int32 cross_minmotor_volume() const;
  void set_cross_minmotor_volume(::google::protobuf::int32 value);

  // int32 cross_medmotor_volume = 11;
  void clear_cross_medmotor_volume();
  static const int kCrossMedmotorVolumeFieldNumber = 11;
  ::google::protobuf::int32 cross_medmotor_volume() const;
  void set_cross_medmotor_volume(::google::protobuf::int32 value);

  // int32 cross_maxmotor_volume = 12;
  void clear_cross_maxmotor_volume();
  static const int kCrossMaxmotorVolumeFieldNumber = 12;
  ::google::protobuf::int32 cross_maxmotor_volume() const;
  void set_cross_maxmotor_volume(::google::protobuf::int32 value);

  // int32 cross_pcu = 13;
  void clear_cross_pcu();
  static const int kCrossPcuFieldNumber = 13;
  ::google::protobuf::int32 cross_pcu() const;
  void set_cross_pcu(::google::protobuf::int32 value);

  // float cross_avspeed = 14;
  void clear_cross_avspeed();
  static const int kCrossAvspeedFieldNumber = 14;
  float cross_avspeed() const;
  void set_cross_avspeed(float value);

  // float cross_time_occupany = 15;
  void clear_cross_time_occupany();
  static const int kCrossTimeOccupanyFieldNumber = 15;
  float cross_time_occupany() const;
  void set_cross_time_occupany(float value);

  // float cross_headway = 16;
  void clear_cross_headway();
  static const int kCrossHeadwayFieldNumber = 16;
  float cross_headway() const;
  void set_cross_headway(float value);

  // float cross_gap = 17;
  void clear_cross_gap();
  static const int kCrossGapFieldNumber = 17;
  float cross_gap() const;
  void set_cross_gap(float value);

  // float cross_avdistance = 18;
  void clear_cross_avdistance();
  static const int kCrossAvdistanceFieldNumber = 18;
  float cross_avdistance() const;
  void set_cross_avdistance(float value);

  // float cross_avstop = 19;
  void clear_cross_avstop();
  static const int kCrossAvstopFieldNumber = 19;
  float cross_avstop() const;
  void set_cross_avstop(float value);

  // float cross_speed85 = 20;
  void clear_cross_speed85();
  static const int kCrossSpeed85FieldNumber = 20;
  float cross_speed85() const;
  void set_cross_speed85(float value);

  // float cross_queueLength = 21;
  void clear_cross_queuelength();
  static const int kCrossQueueLengthFieldNumber = 21;
  float cross_queuelength() const;
  void set_cross_queuelength(float value);

  // float cross_stopline = 22;
  void clear_cross_stopline();
  static const int kCrossStoplineFieldNumber = 22;
  float cross_stopline() const;
  void set_cross_stopline(float value);

  // float cross_space_occupany = 23;
  void clear_cross_space_occupany();
  static const int kCrossSpaceOccupanyFieldNumber = 23;
  float cross_space_occupany() const;
  void set_cross_space_occupany(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.OnLineValues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams > road_linklist_;
  ::google::protobuf::internal::ArenaStringPtr cross_name_;
  ::nebulalink::perceptron3::PointGPS* pos_;
  ::google::protobuf::int32 cycleid_;
  ::google::protobuf::int32 vehnum_;
  float avgspeed_;
  ::google::protobuf::int32 cross_laneno_;
  ::google::protobuf::int32 cross_volume_;
  ::google::protobuf::int32 cross_peron_volume_;
  ::google::protobuf::int32 cross_no_motor_volume_;
  ::google::protobuf::int32 cross_minmotor_volume_;
  ::google::protobuf::int32 cross_medmotor_volume_;
  ::google::protobuf::int32 cross_maxmotor_volume_;
  ::google::protobuf::int32 cross_pcu_;
  float cross_avspeed_;
  float cross_time_occupany_;
  float cross_headway_;
  float cross_gap_;
  float cross_avdistance_;
  float cross_avstop_;
  float cross_speed85_;
  float cross_queuelength_;
  float cross_stopline_;
  float cross_space_occupany_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.FrameArray) */ {
 public:
  FrameArray();
  virtual ~FrameArray();

  FrameArray(const FrameArray& from);

  inline FrameArray& operator=(const FrameArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameArray(FrameArray&& from) noexcept
    : FrameArray() {
    *this = ::std::move(from);
  }

  inline FrameArray& operator=(FrameArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameArray* internal_default_instance() {
    return reinterpret_cast<const FrameArray*>(
               &_FrameArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(FrameArray* other);
  friend void swap(FrameArray& a, FrameArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameArray* New() const final {
    return CreateMaybeMessage<FrameArray>(NULL);
  }

  FrameArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameArray& from);
  void MergeFrom(const FrameArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
  int perceptron_size() const;
  void clear_perceptron();
  static const int kPerceptronFieldNumber = 1;
  ::nebulalink::perceptron3::Perceptron* mutable_perceptron(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >*
      mutable_perceptron();
  const ::nebulalink::perceptron3::Perceptron& perceptron(int index) const;
  ::nebulalink::perceptron3::Perceptron* add_perceptron();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >&
      perceptron() const;

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.FrameArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron > perceptron_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Nebulalink_Extend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Nebulalink_Extend) */ {
 public:
  Nebulalink_Extend();
  virtual ~Nebulalink_Extend();

  Nebulalink_Extend(const Nebulalink_Extend& from);

  inline Nebulalink_Extend& operator=(const Nebulalink_Extend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Nebulalink_Extend(Nebulalink_Extend&& from) noexcept
    : Nebulalink_Extend() {
    *this = ::std::move(from);
  }

  inline Nebulalink_Extend& operator=(Nebulalink_Extend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Nebulalink_Extend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nebulalink_Extend* internal_default_instance() {
    return reinterpret_cast<const Nebulalink_Extend*>(
               &_Nebulalink_Extend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Nebulalink_Extend* other);
  friend void swap(Nebulalink_Extend& a, Nebulalink_Extend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Nebulalink_Extend* New() const final {
    return CreateMaybeMessage<Nebulalink_Extend>(NULL);
  }

  Nebulalink_Extend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Nebulalink_Extend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Nebulalink_Extend& from);
  void MergeFrom(const Nebulalink_Extend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nebulalink_Extend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature = 2;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature();

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Nebulalink_Extend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > feature_;
  mutable int _feature_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class V2XOBUs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.V2XOBUs) */ {
 public:
  V2XOBUs();
  virtual ~V2XOBUs();

  V2XOBUs(const V2XOBUs& from);

  inline V2XOBUs& operator=(const V2XOBUs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V2XOBUs(V2XOBUs&& from) noexcept
    : V2XOBUs() {
    *this = ::std::move(from);
  }

  inline V2XOBUs& operator=(V2XOBUs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const V2XOBUs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V2XOBUs* internal_default_instance() {
    return reinterpret_cast<const V2XOBUs*>(
               &_V2XOBUs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(V2XOBUs* other);
  friend void swap(V2XOBUs& a, V2XOBUs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V2XOBUs* New() const final {
    return CreateMaybeMessage<V2XOBUs>(NULL);
  }

  V2XOBUs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<V2XOBUs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const V2XOBUs& from);
  void MergeFrom(const V2XOBUs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V2XOBUs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes obu_platenum = 11;
  void clear_obu_platenum();
  static const int kObuPlatenumFieldNumber = 11;
  const ::std::string& obu_platenum() const;
  void set_obu_platenum(const ::std::string& value);
  #if LANG_CXX11
  void set_obu_platenum(::std::string&& value);
  #endif
  void set_obu_platenum(const char* value);
  void set_obu_platenum(const void* value, size_t size);
  ::std::string* mutable_obu_platenum();
  ::std::string* release_obu_platenum();
  void set_allocated_obu_platenum(::std::string* obu_platenum);

  // string obu_deviceid = 12;
  void clear_obu_deviceid();
  static const int kObuDeviceidFieldNumber = 12;
  const ::std::string& obu_deviceid() const;
  void set_obu_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_obu_deviceid(::std::string&& value);
  #endif
  void set_obu_deviceid(const char* value);
  void set_obu_deviceid(const char* value, size_t size);
  ::std::string* mutable_obu_deviceid();
  ::std::string* release_obu_deviceid();
  void set_allocated_obu_deviceid(::std::string* obu_deviceid);

  // .nebulalink.perceptron3.PointDesc obu_point = 1;
  bool has_obu_point() const;
  void clear_obu_point();
  static const int kObuPointFieldNumber = 1;
  private:
  const ::nebulalink::perceptron3::PointDesc& _internal_obu_point() const;
  public:
  const ::nebulalink::perceptron3::PointDesc& obu_point() const;
  ::nebulalink::perceptron3::PointDesc* release_obu_point();
  ::nebulalink::perceptron3::PointDesc* mutable_obu_point();
  void set_allocated_obu_point(::nebulalink::perceptron3::PointDesc* obu_point);

  // .nebulalink.perceptron3.TargetSize obu_size = 10;
  bool has_obu_size() const;
  void clear_obu_size();
  static const int kObuSizeFieldNumber = 10;
  private:
  const ::nebulalink::perceptron3::TargetSize& _internal_obu_size() const;
  public:
  const ::nebulalink::perceptron3::TargetSize& obu_size() const;
  ::nebulalink::perceptron3::TargetSize* release_obu_size();
  ::nebulalink::perceptron3::TargetSize* mutable_obu_size();
  void set_allocated_obu_size(::nebulalink::perceptron3::TargetSize* obu_size);

  // int64 obu_time_stamp = 3;
  void clear_obu_time_stamp();
  static const int kObuTimeStampFieldNumber = 3;
  ::google::protobuf::int64 obu_time_stamp() const;
  void set_obu_time_stamp(::google::protobuf::int64 value);

  // float obu_wheel_angle = 2;
  void clear_obu_wheel_angle();
  static const int kObuWheelAngleFieldNumber = 2;
  float obu_wheel_angle() const;
  void set_obu_wheel_angle(float value);

  // int32 obu_veh_type = 4;
  void clear_obu_veh_type();
  static const int kObuVehTypeFieldNumber = 4;
  ::google::protobuf::int32 obu_veh_type() const;
  void set_obu_veh_type(::google::protobuf::int32 value);

  // int32 obu_fuel_type = 5;
  void clear_obu_fuel_type();
  static const int kObuFuelTypeFieldNumber = 5;
  ::google::protobuf::int32 obu_fuel_type() const;
  void set_obu_fuel_type(::google::protobuf::int32 value);

  // int32 obu_light = 6;
  void clear_obu_light();
  static const int kObuLightFieldNumber = 6;
  ::google::protobuf::int32 obu_light() const;
  void set_obu_light(::google::protobuf::int32 value);

  // int32 obu_brake_state = 7;
  void clear_obu_brake_state();
  static const int kObuBrakeStateFieldNumber = 7;
  ::google::protobuf::int32 obu_brake_state() const;
  void set_obu_brake_state(::google::protobuf::int32 value);

  // int32 obu_veh_state = 8;
  void clear_obu_veh_state();
  static const int kObuVehStateFieldNumber = 8;
  ::google::protobuf::int32 obu_veh_state() const;
  void set_obu_veh_state(::google::protobuf::int32 value);

  // float obu_cfd = 9;
  void clear_obu_cfd();
  static const int kObuCfdFieldNumber = 9;
  float obu_cfd() const;
  void set_obu_cfd(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.V2XOBUs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obu_platenum_;
  ::google::protobuf::internal::ArenaStringPtr obu_deviceid_;
  ::nebulalink::perceptron3::PointDesc* obu_point_;
  ::nebulalink::perceptron3::TargetSize* obu_size_;
  ::google::protobuf::int64 obu_time_stamp_;
  float obu_wheel_angle_;
  ::google::protobuf::int32 obu_veh_type_;
  ::google::protobuf::int32 obu_fuel_type_;
  ::google::protobuf::int32 obu_light_;
  ::google::protobuf::int32 obu_brake_state_;
  ::google::protobuf::int32 obu_veh_state_;
  float obu_cfd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectorRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.DetectorRegion) */ {
 public:
  DetectorRegion();
  virtual ~DetectorRegion();

  DetectorRegion(const DetectorRegion& from);

  inline DetectorRegion& operator=(const DetectorRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectorRegion(DetectorRegion&& from) noexcept
    : DetectorRegion() {
    *this = ::std::move(from);
  }

  inline DetectorRegion& operator=(DetectorRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectorRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectorRegion* internal_default_instance() {
    return reinterpret_cast<const DetectorRegion*>(
               &_DetectorRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DetectorRegion* other);
  friend void swap(DetectorRegion& a, DetectorRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectorRegion* New() const final {
    return CreateMaybeMessage<DetectorRegion>(NULL);
  }

  DetectorRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectorRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectorRegion& from);
  void MergeFrom(const DetectorRegion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectorRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
  int polygonpoint_size() const;
  void clear_polygonpoint();
  static const int kPolygonPointFieldNumber = 1;
  ::nebulalink::perceptron3::PointDesc* mutable_polygonpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
      mutable_polygonpoint();
  const ::nebulalink::perceptron3::PointDesc& polygonpoint(int index) const;
  ::nebulalink::perceptron3::PointDesc* add_polygonpoint();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
      polygonpoint() const;

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.DetectorRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc > polygonpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Perceptron : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Perceptron) */ {
 public:
  Perceptron();
  virtual ~Perceptron();

  Perceptron(const Perceptron& from);

  inline Perceptron& operator=(const Perceptron& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Perceptron(Perceptron&& from) noexcept
    : Perceptron() {
    *this = ::std::move(from);
  }

  inline Perceptron& operator=(Perceptron&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Perceptron& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Perceptron* internal_default_instance() {
    return reinterpret_cast<const Perceptron*>(
               &_Perceptron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Perceptron* other);
  friend void swap(Perceptron& a, Perceptron& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Perceptron* New() const final {
    return CreateMaybeMessage<Perceptron>(NULL);
  }

  Perceptron* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Perceptron>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Perceptron& from);
  void MergeFrom(const Perceptron& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Perceptron* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
  int ptc_pathpoint_history_size() const;
  void clear_ptc_pathpoint_history();
  static const int kPtcPathpointHistoryFieldNumber = 36;
  ::nebulalink::perceptron3::PathPoint* mutable_ptc_pathpoint_history(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPoint >*
      mutable_ptc_pathpoint_history();
  const ::nebulalink::perceptron3::PathPoint& ptc_pathpoint_history(int index) const;
  ::nebulalink::perceptron3::PathPoint* add_ptc_pathpoint_history();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPoint >&
      ptc_pathpoint_history() const;

  // repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
  int ptc_planning_list_size() const;
  void clear_ptc_planning_list();
  static const int kPtcPlanningListFieldNumber = 37;
  ::nebulalink::perceptron3::Planning_PB* mutable_ptc_planning_list(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Planning_PB >*
      mutable_ptc_planning_list();
  const ::nebulalink::perceptron3::Planning_PB& ptc_planning_list(int index) const;
  ::nebulalink::perceptron3::Planning_PB* add_ptc_planning_list();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Planning_PB >&
      ptc_planning_list() const;

  // repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
  int ptc_polygonpoint_size() const;
  void clear_ptc_polygonpoint();
  static const int kPtcPolygonPointFieldNumber = 38;
  ::nebulalink::perceptron3::PointDesc* mutable_ptc_polygonpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
      mutable_ptc_polygonpoint();
  const ::nebulalink::perceptron3::PointDesc& ptc_polygonpoint(int index) const;
  ::nebulalink::perceptron3::PointDesc* add_ptc_polygonpoint();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
      ptc_polygonpoint() const;

  // repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
  int nebula_extend_size() const;
  void clear_nebula_extend();
  static const int kNebulaExtendFieldNumber = 48;
  ::nebulalink::perceptron3::Nebulalink_Extend* mutable_nebula_extend(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Nebulalink_Extend >*
      mutable_nebula_extend();
  const ::nebulalink::perceptron3::Nebulalink_Extend& nebula_extend(int index) const;
  ::nebulalink::perceptron3::Nebulalink_Extend* add_nebula_extend();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Nebulalink_Extend >&
      nebula_extend() const;

  // string lane_id = 3;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 3;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // bytes plate_num = 19;
  void clear_plate_num();
  static const int kPlateNumFieldNumber = 19;
  const ::std::string& plate_num() const;
  void set_plate_num(const ::std::string& value);
  #if LANG_CXX11
  void set_plate_num(::std::string&& value);
  #endif
  void set_plate_num(const char* value);
  void set_plate_num(const void* value, size_t size);
  ::std::string* mutable_plate_num();
  ::std::string* release_plate_num();
  void set_allocated_plate_num(::std::string* plate_num);

  // string objects_identity = 20;
  void clear_objects_identity();
  static const int kObjectsIdentityFieldNumber = 20;
  const ::std::string& objects_identity() const;
  void set_objects_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_objects_identity(::std::string&& value);
  #endif
  void set_objects_identity(const char* value);
  void set_objects_identity(const char* value, size_t size);
  ::std::string* mutable_objects_identity();
  ::std::string* release_objects_identity();
  void set_allocated_objects_identity(::std::string* objects_identity);

  // string ptc_link_name = 43;
  void clear_ptc_link_name();
  static const int kPtcLinkNameFieldNumber = 43;
  const ::std::string& ptc_link_name() const;
  void set_ptc_link_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ptc_link_name(::std::string&& value);
  #endif
  void set_ptc_link_name(const char* value);
  void set_ptc_link_name(const char* value, size_t size);
  ::std::string* mutable_ptc_link_name();
  ::std::string* release_ptc_link_name();
  void set_allocated_ptc_link_name(::std::string* ptc_link_name);

  // .nebulalink.perceptron3.Point3 point3f = 6;
  bool has_point3f() const;
  void clear_point3f();
  static const int kPoint3FFieldNumber = 6;
  private:
  const ::nebulalink::perceptron3::Point3& _internal_point3f() const;
  public:
  const ::nebulalink::perceptron3::Point3& point3f() const;
  ::nebulalink::perceptron3::Point3* release_point3f();
  ::nebulalink::perceptron3::Point3* mutable_point3f();
  void set_allocated_point3f(::nebulalink::perceptron3::Point3* point3f);

  // .nebulalink.perceptron3.Point4 point4f = 7;
  bool has_point4f() const;
  void clear_point4f();
  static const int kPoint4FFieldNumber = 7;
  private:
  const ::nebulalink::perceptron3::Point4& _internal_point4f() const;
  public:
  const ::nebulalink::perceptron3::Point4& point4f() const;
  ::nebulalink::perceptron3::Point4* release_point4f();
  ::nebulalink::perceptron3::Point4* mutable_point4f();
  void set_allocated_point4f(::nebulalink::perceptron3::Point4* point4f);

  // .nebulalink.perceptron3.Speed3 speed3f = 9;
  bool has_speed3f() const;
  void clear_speed3f();
  static const int kSpeed3FFieldNumber = 9;
  private:
  const ::nebulalink::perceptron3::Speed3& _internal_speed3f() const;
  public:
  const ::nebulalink::perceptron3::Speed3& speed3f() const;
  ::nebulalink::perceptron3::Speed3* release_speed3f();
  ::nebulalink::perceptron3::Speed3* mutable_speed3f();
  void set_allocated_speed3f(::nebulalink::perceptron3::Speed3* speed3f);

  // .nebulalink.perceptron3.TargetSize target_size = 11;
  bool has_target_size() const;
  void clear_target_size();
  static const int kTargetSizeFieldNumber = 11;
  private:
  const ::nebulalink::perceptron3::TargetSize& _internal_target_size() const;
  public:
  const ::nebulalink::perceptron3::TargetSize& target_size() const;
  ::nebulalink::perceptron3::TargetSize* release_target_size();
  ::nebulalink::perceptron3::TargetSize* mutable_target_size();
  void set_allocated_target_size(::nebulalink::perceptron3::TargetSize* target_size);

  // .nebulalink.perceptron3.PointGPS point_gps = 12;
  bool has_point_gps() const;
  void clear_point_gps();
  static const int kPointGpsFieldNumber = 12;
  private:
  const ::nebulalink::perceptron3::PointGPS& _internal_point_gps() const;
  public:
  const ::nebulalink::perceptron3::PointGPS& point_gps() const;
  ::nebulalink::perceptron3::PointGPS* release_point_gps();
  ::nebulalink::perceptron3::PointGPS* mutable_point_gps();
  void set_allocated_point_gps(::nebulalink::perceptron3::PointGPS* point_gps);

  // .nebulalink.perceptron3.Acc4Way accel_4way = 22;
  bool has_accel_4way() const;
  void clear_accel_4way();
  static const int kAccel4WayFieldNumber = 22;
  private:
  const ::nebulalink::perceptron3::Acc4Way& _internal_accel_4way() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way& accel_4way() const;
  ::nebulalink::perceptron3::Acc4Way* release_accel_4way();
  ::nebulalink::perceptron3::Acc4Way* mutable_accel_4way();
  void set_allocated_accel_4way(::nebulalink::perceptron3::Acc4Way* accel_4way);

  // .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
  bool has_ptc_time_stamp() const;
  void clear_ptc_time_stamp();
  static const int kPtcTimeStampFieldNumber = 25;
  private:
  const ::nebulalink::perceptron3::TimeBase& _internal_ptc_time_stamp() const;
  public:
  const ::nebulalink::perceptron3::TimeBase& ptc_time_stamp() const;
  ::nebulalink::perceptron3::TimeBase* release_ptc_time_stamp();
  ::nebulalink::perceptron3::TimeBase* mutable_ptc_time_stamp();
  void set_allocated_ptc_time_stamp(::nebulalink::perceptron3::TimeBase* ptc_time_stamp);

  // .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
  bool has_ptc_gps_cfd() const;
  void clear_ptc_gps_cfd();
  static const int kPtcGpsCfdFieldNumber = 26;
  private:
  const ::nebulalink::perceptron3::PointGPS_CFD& _internal_ptc_gps_cfd() const;
  public:
  const ::nebulalink::perceptron3::PointGPS_CFD& ptc_gps_cfd() const;
  ::nebulalink::perceptron3::PointGPS_CFD* release_ptc_gps_cfd();
  ::nebulalink::perceptron3::PointGPS_CFD* mutable_ptc_gps_cfd();
  void set_allocated_ptc_gps_cfd(::nebulalink::perceptron3::PointGPS_CFD* ptc_gps_cfd);

  // .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
  bool has_ptc_motino_cfd() const;
  void clear_ptc_motino_cfd();
  static const int kPtcMotinoCfdFieldNumber = 29;
  private:
  const ::nebulalink::perceptron3::Motion_CFD& _internal_ptc_motino_cfd() const;
  public:
  const ::nebulalink::perceptron3::Motion_CFD& ptc_motino_cfd() const;
  ::nebulalink::perceptron3::Motion_CFD* release_ptc_motino_cfd();
  ::nebulalink::perceptron3::Motion_CFD* mutable_ptc_motino_cfd();
  void set_allocated_ptc_motino_cfd(::nebulalink::perceptron3::Motion_CFD* ptc_motino_cfd);

  // .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
  bool has_ptc_size_cfd() const;
  void clear_ptc_size_cfd();
  static const int kPtcSizeCfdFieldNumber = 31;
  private:
  const ::nebulalink::perceptron3::TargetSize_CFD& _internal_ptc_size_cfd() const;
  public:
  const ::nebulalink::perceptron3::TargetSize_CFD& ptc_size_cfd() const;
  ::nebulalink::perceptron3::TargetSize_CFD* release_ptc_size_cfd();
  ::nebulalink::perceptron3::TargetSize_CFD* mutable_ptc_size_cfd();
  void set_allocated_ptc_size_cfd(::nebulalink::perceptron3::TargetSize_CFD* ptc_size_cfd);

  // .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
  bool has_ptc_accel_4way_cfd() const;
  void clear_ptc_accel_4way_cfd();
  static const int kPtcAccel4WayCfdFieldNumber = 34;
  private:
  const ::nebulalink::perceptron3::Acc4Way_CFD& _internal_ptc_accel_4way_cfd() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way_CFD& ptc_accel_4way_cfd() const;
  ::nebulalink::perceptron3::Acc4Way_CFD* release_ptc_accel_4way_cfd();
  ::nebulalink::perceptron3::Acc4Way_CFD* mutable_ptc_accel_4way_cfd();
  void set_allocated_ptc_accel_4way_cfd(::nebulalink::perceptron3::Acc4Way_CFD* ptc_accel_4way_cfd);

  // bool is_tracker = 1;
  void clear_is_tracker();
  static const int kIsTrackerFieldNumber = 1;
  bool is_tracker() const;
  void set_is_tracker(bool value);

  // float object_confidence = 2;
  void clear_object_confidence();
  static const int kObjectConfidenceFieldNumber = 2;
  float object_confidence() const;
  void set_object_confidence(float value);

  // int32 object_class_type = 4;
  void clear_object_class_type();
  static const int kObjectClassTypeFieldNumber = 4;
  ::google::protobuf::int32 object_class_type() const;
  void set_object_class_type(::google::protobuf::int32 value);

  // int32 object_id = 5;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 5;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // float object_speed = 8;
  void clear_object_speed();
  static const int kObjectSpeedFieldNumber = 8;
  float object_speed() const;
  void set_object_speed(float value);

  // float object_acceleration = 10;
  void clear_object_acceleration();
  static const int kObjectAccelerationFieldNumber = 10;
  float object_acceleration() const;
  void set_object_acceleration(float value);

  // int32 object_NS = 13;
  void clear_object_ns();
  static const int kObjectNSFieldNumber = 13;
  ::google::protobuf::int32 object_ns() const;
  void set_object_ns(::google::protobuf::int32 value);

  // int32 object_WE = 14;
  void clear_object_we();
  static const int kObjectWEFieldNumber = 14;
  ::google::protobuf::int32 object_we() const;
  void set_object_we(::google::protobuf::int32 value);

  // float object_direction = 15;
  void clear_object_direction();
  static const int kObjectDirectionFieldNumber = 15;
  float object_direction() const;
  void set_object_direction(float value);

  // float object_heading = 16;
  void clear_object_heading();
  static const int kObjectHeadingFieldNumber = 16;
  float object_heading() const;
  void set_object_heading(float value);

  // int32 is_head_tail = 17;
  void clear_is_head_tail();
  static const int kIsHeadTailFieldNumber = 17;
  ::google::protobuf::int32 is_head_tail() const;
  void set_is_head_tail(::google::protobuf::int32 value);

  // int32 lane_type = 18;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 18;
  ::google::protobuf::int32 lane_type() const;
  void set_lane_type(::google::protobuf::int32 value);

  // int32 fuel_type = 21;
  void clear_fuel_type();
  static const int kFuelTypeFieldNumber = 21;
  ::google::protobuf::int32 fuel_type() const;
  void set_fuel_type(::google::protobuf::int32 value);

  // int32 ptc_sourcetype = 24;
  void clear_ptc_sourcetype();
  static const int kPtcSourcetypeFieldNumber = 24;
  ::google::protobuf::int32 ptc_sourcetype() const;
  void set_ptc_sourcetype(::google::protobuf::int32 value);

  // int64 obj_time_stamp = 23;
  void clear_obj_time_stamp();
  static const int kObjTimeStampFieldNumber = 23;
  ::google::protobuf::int64 obj_time_stamp() const;
  void set_obj_time_stamp(::google::protobuf::int64 value);

  // int32 ptc_tran_state = 27;
  void clear_ptc_tran_state();
  static const int kPtcTranStateFieldNumber = 27;
  ::google::protobuf::int32 ptc_tran_state() const;
  void set_ptc_tran_state(::google::protobuf::int32 value);

  // float ptc_angle = 28;
  void clear_ptc_angle();
  static const int kPtcAngleFieldNumber = 28;
  float ptc_angle() const;
  void set_ptc_angle(float value);

  // int32 ptc_veh_type = 30;
  void clear_ptc_veh_type();
  static const int kPtcVehTypeFieldNumber = 30;
  ::google::protobuf::int32 ptc_veh_type() const;
  void set_ptc_veh_type(::google::protobuf::int32 value);

  // int32 ptc_Exttype = 32;
  void clear_ptc_exttype();
  static const int kPtcExttypeFieldNumber = 32;
  ::google::protobuf::int32 ptc_exttype() const;
  void set_ptc_exttype(::google::protobuf::int32 value);

  // float ptc_Exttype_cfd = 33;
  void clear_ptc_exttype_cfd();
  static const int kPtcExttypeCfdFieldNumber = 33;
  float ptc_exttype_cfd() const;
  void set_ptc_exttype_cfd(float value);

  // int32 ptc_status_duration = 35;
  void clear_ptc_status_duration();
  static const int kPtcStatusDurationFieldNumber = 35;
  ::google::protobuf::int32 ptc_status_duration() const;
  void set_ptc_status_duration(::google::protobuf::int32 value);

  // int32 ptc_satellite = 39;
  void clear_ptc_satellite();
  static const int kPtcSatelliteFieldNumber = 39;
  ::google::protobuf::int32 ptc_satellite() const;
  void set_ptc_satellite(::google::protobuf::int32 value);

  // int32 ptc_regionid = 40;
  void clear_ptc_regionid();
  static const int kPtcRegionidFieldNumber = 40;
  ::google::protobuf::int32 ptc_regionid() const;
  void set_ptc_regionid(::google::protobuf::int32 value);

  // int32 ptc_nodeid = 41;
  void clear_ptc_nodeid();
  static const int kPtcNodeidFieldNumber = 41;
  ::google::protobuf::int32 ptc_nodeid() const;
  void set_ptc_nodeid(::google::protobuf::int32 value);

  // int32 ptc_laneid = 42;
  void clear_ptc_laneid();
  static const int kPtcLaneidFieldNumber = 42;
  ::google::protobuf::int32 ptc_laneid() const;
  void set_ptc_laneid(::google::protobuf::int32 value);

  // int32 ptc_link_width = 44;
  void clear_ptc_link_width();
  static const int kPtcLinkWidthFieldNumber = 44;
  ::google::protobuf::int32 ptc_link_width() const;
  void set_ptc_link_width(::google::protobuf::int32 value);

  // int32 ptc_veh_plate_type = 45;
  void clear_ptc_veh_plate_type();
  static const int kPtcVehPlateTypeFieldNumber = 45;
  ::google::protobuf::int32 ptc_veh_plate_type() const;
  void set_ptc_veh_plate_type(::google::protobuf::int32 value);

  // int32 ptc_veh_plate_color = 46;
  void clear_ptc_veh_plate_color();
  static const int kPtcVehPlateColorFieldNumber = 46;
  ::google::protobuf::int32 ptc_veh_plate_color() const;
  void set_ptc_veh_plate_color(::google::protobuf::int32 value);

  // int32 ptc_veh_color = 47;
  void clear_ptc_veh_color();
  static const int kPtcVehColorFieldNumber = 47;
  ::google::protobuf::int32 ptc_veh_color() const;
  void set_ptc_veh_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Perceptron)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPoint > ptc_pathpoint_history_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Planning_PB > ptc_planning_list_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc > ptc_polygonpoint_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Nebulalink_Extend > nebula_extend_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::internal::ArenaStringPtr plate_num_;
  ::google::protobuf::internal::ArenaStringPtr objects_identity_;
  ::google::protobuf::internal::ArenaStringPtr ptc_link_name_;
  ::nebulalink::perceptron3::Point3* point3f_;
  ::nebulalink::perceptron3::Point4* point4f_;
  ::nebulalink::perceptron3::Speed3* speed3f_;
  ::nebulalink::perceptron3::TargetSize* target_size_;
  ::nebulalink::perceptron3::PointGPS* point_gps_;
  ::nebulalink::perceptron3::Acc4Way* accel_4way_;
  ::nebulalink::perceptron3::TimeBase* ptc_time_stamp_;
  ::nebulalink::perceptron3::PointGPS_CFD* ptc_gps_cfd_;
  ::nebulalink::perceptron3::Motion_CFD* ptc_motino_cfd_;
  ::nebulalink::perceptron3::TargetSize_CFD* ptc_size_cfd_;
  ::nebulalink::perceptron3::Acc4Way_CFD* ptc_accel_4way_cfd_;
  bool is_tracker_;
  float object_confidence_;
  ::google::protobuf::int32 object_class_type_;
  ::google::protobuf::int32 object_id_;
  float object_speed_;
  float object_acceleration_;
  ::google::protobuf::int32 object_ns_;
  ::google::protobuf::int32 object_we_;
  float object_direction_;
  float object_heading_;
  ::google::protobuf::int32 is_head_tail_;
  ::google::protobuf::int32 lane_type_;
  ::google::protobuf::int32 fuel_type_;
  ::google::protobuf::int32 ptc_sourcetype_;
  ::google::protobuf::int64 obj_time_stamp_;
  ::google::protobuf::int32 ptc_tran_state_;
  float ptc_angle_;
  ::google::protobuf::int32 ptc_veh_type_;
  ::google::protobuf::int32 ptc_exttype_;
  float ptc_exttype_cfd_;
  ::google::protobuf::int32 ptc_status_duration_;
  ::google::protobuf::int32 ptc_satellite_;
  ::google::protobuf::int32 ptc_regionid_;
  ::google::protobuf::int32 ptc_nodeid_;
  ::google::protobuf::int32 ptc_laneid_;
  ::google::protobuf::int32 ptc_link_width_;
  ::google::protobuf::int32 ptc_veh_plate_type_;
  ::google::protobuf::int32 ptc_veh_plate_color_;
  ::google::protobuf::int32 ptc_veh_color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Obstacles* other);
  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(NULL);
  }

  Obstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
  int obs_polygonpoint_size() const;
  void clear_obs_polygonpoint();
  static const int kObsPolygonPointFieldNumber = 18;
  ::nebulalink::perceptron3::PointDesc* mutable_obs_polygonpoint(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
      mutable_obs_polygonpoint();
  const ::nebulalink::perceptron3::PointDesc& obs_polygonpoint(int index) const;
  ::nebulalink::perceptron3::PointDesc* add_obs_polygonpoint();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
      obs_polygonpoint() const;

  // .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
  bool has_obs_time_stamp() const;
  void clear_obs_time_stamp();
  static const int kObsTimeStampFieldNumber = 5;
  private:
  const ::nebulalink::perceptron3::TimeBase& _internal_obs_time_stamp() const;
  public:
  const ::nebulalink::perceptron3::TimeBase& obs_time_stamp() const;
  ::nebulalink::perceptron3::TimeBase* release_obs_time_stamp();
  ::nebulalink::perceptron3::TimeBase* mutable_obs_time_stamp();
  void set_allocated_obs_time_stamp(::nebulalink::perceptron3::TimeBase* obs_time_stamp);

  // .nebulalink.perceptron3.PointDesc obs_gps = 6;
  bool has_obs_gps() const;
  void clear_obs_gps();
  static const int kObsGpsFieldNumber = 6;
  private:
  const ::nebulalink::perceptron3::PointDesc& _internal_obs_gps() const;
  public:
  const ::nebulalink::perceptron3::PointDesc& obs_gps() const;
  ::nebulalink::perceptron3::PointDesc* release_obs_gps();
  ::nebulalink::perceptron3::PointDesc* mutable_obs_gps();
  void set_allocated_obs_gps(::nebulalink::perceptron3::PointDesc* obs_gps);

  // .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
  bool has_obs_gps_cfd() const;
  void clear_obs_gps_cfd();
  static const int kObsGpsCfdFieldNumber = 7;
  private:
  const ::nebulalink::perceptron3::PointGPS_CFD& _internal_obs_gps_cfd() const;
  public:
  const ::nebulalink::perceptron3::PointGPS_CFD& obs_gps_cfd() const;
  ::nebulalink::perceptron3::PointGPS_CFD* release_obs_gps_cfd();
  ::nebulalink::perceptron3::PointGPS_CFD* mutable_obs_gps_cfd();
  void set_allocated_obs_gps_cfd(::nebulalink::perceptron3::PointGPS_CFD* obs_gps_cfd);

  // .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
  bool has_obs_accel_4way() const;
  void clear_obs_accel_4way();
  static const int kObsAccel4WayFieldNumber = 14;
  private:
  const ::nebulalink::perceptron3::Acc4Way& _internal_obs_accel_4way() const;
  public:
  const ::nebulalink::perceptron3::Acc4Way& obs_accel_4way() const;
  ::nebulalink::perceptron3::Acc4Way* release_obs_accel_4way();
  ::nebulalink::perceptron3::Acc4Way* mutable_obs_accel_4way();
  void set_allocated_obs_accel_4way(::nebulalink::perceptron3::Acc4Way* obs_accel_4way);

  // .nebulalink.perceptron3.TargetSize obs_size = 15;
  bool has_obs_size() const;
  void clear_obs_size();
  static const int kObsSizeFieldNumber = 15;
  private:
  const ::nebulalink::perceptron3::TargetSize& _internal_obs_size() const;
  public:
  const ::nebulalink::perceptron3::TargetSize& obs_size() const;
  ::nebulalink::perceptron3::TargetSize* release_obs_size();
  ::nebulalink::perceptron3::TargetSize* mutable_obs_size();
  void set_allocated_obs_size(::nebulalink::perceptron3::TargetSize* obs_size);

  // .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
  bool has_obs_size_cfd() const;
  void clear_obs_size_cfd();
  static const int kObsSizeCfdFieldNumber = 16;
  private:
  const ::nebulalink::perceptron3::TargetSize_CFD& _internal_obs_size_cfd() const;
  public:
  const ::nebulalink::perceptron3::TargetSize_CFD& obs_size_cfd() const;
  ::nebulalink::perceptron3::TargetSize_CFD* release_obs_size_cfd();
  ::nebulalink::perceptron3::TargetSize_CFD* mutable_obs_size_cfd();
  void set_allocated_obs_size_cfd(::nebulalink::perceptron3::TargetSize_CFD* obs_size_cfd);

  // int32 obstype = 1;
  void clear_obstype();
  static const int kObstypeFieldNumber = 1;
  ::google::protobuf::int32 obstype() const;
  void set_obstype(::google::protobuf::int32 value);

  // int32 obstype_cfd = 2;
  void clear_obstype_cfd();
  static const int kObstypeCfdFieldNumber = 2;
  ::google::protobuf::int32 obstype_cfd() const;
  void set_obstype_cfd(::google::protobuf::int32 value);

  // int32 obsId = 3;
  void clear_obsid();
  static const int kObsIdFieldNumber = 3;
  ::google::protobuf::int32 obsid() const;
  void set_obsid(::google::protobuf::int32 value);

  // int32 obs_source = 4;
  void clear_obs_source();
  static const int kObsSourceFieldNumber = 4;
  ::google::protobuf::int32 obs_source() const;
  void set_obs_source(::google::protobuf::int32 value);

  // float obs_speed = 8;
  void clear_obs_speed();
  static const int kObsSpeedFieldNumber = 8;
  float obs_speed() const;
  void set_obs_speed(float value);

  // float obs_speed_cfd = 9;
  void clear_obs_speed_cfd();
  static const int kObsSpeedCfdFieldNumber = 9;
  float obs_speed_cfd() const;
  void set_obs_speed_cfd(float value);

  // float obs_heading = 10;
  void clear_obs_heading();
  static const int kObsHeadingFieldNumber = 10;
  float obs_heading() const;
  void set_obs_heading(float value);

  // float obs_heading_cfd = 11;
  void clear_obs_heading_cfd();
  static const int kObsHeadingCfdFieldNumber = 11;
  float obs_heading_cfd() const;
  void set_obs_heading_cfd(float value);

  // float obs_verSpeed = 12;
  void clear_obs_verspeed();
  static const int kObsVerSpeedFieldNumber = 12;
  float obs_verspeed() const;
  void set_obs_verspeed(float value);

  // float obs_verSpeed_cfd = 13;
  void clear_obs_verspeed_cfd();
  static const int kObsVerSpeedCfdFieldNumber = 13;
  float obs_verspeed_cfd() const;
  void set_obs_verspeed_cfd(float value);

  // int32 obs_tracking = 17;
  void clear_obs_tracking();
  static const int kObsTrackingFieldNumber = 17;
  ::google::protobuf::int32 obs_tracking() const;
  void set_obs_tracking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Obstacles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc > obs_polygonpoint_;
  ::nebulalink::perceptron3::TimeBase* obs_time_stamp_;
  ::nebulalink::perceptron3::PointDesc* obs_gps_;
  ::nebulalink::perceptron3::PointGPS_CFD* obs_gps_cfd_;
  ::nebulalink::perceptron3::Acc4Way* obs_accel_4way_;
  ::nebulalink::perceptron3::TargetSize* obs_size_;
  ::nebulalink::perceptron3::TargetSize_CFD* obs_size_cfd_;
  ::google::protobuf::int32 obstype_;
  ::google::protobuf::int32 obstype_cfd_;
  ::google::protobuf::int32 obsid_;
  ::google::protobuf::int32 obs_source_;
  float obs_speed_;
  float obs_speed_cfd_;
  float obs_heading_;
  float obs_heading_cfd_;
  float obs_verspeed_;
  float obs_verspeed_cfd_;
  ::google::protobuf::int32 obs_tracking_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Eventlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Eventlist) */ {
 public:
  Eventlist();
  virtual ~Eventlist();

  Eventlist(const Eventlist& from);

  inline Eventlist& operator=(const Eventlist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Eventlist(Eventlist&& from) noexcept
    : Eventlist() {
    *this = ::std::move(from);
  }

  inline Eventlist& operator=(Eventlist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Eventlist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Eventlist* internal_default_instance() {
    return reinterpret_cast<const Eventlist*>(
               &_Eventlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Eventlist* other);
  friend void swap(Eventlist& a, Eventlist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Eventlist* New() const final {
    return CreateMaybeMessage<Eventlist>(NULL);
  }

  Eventlist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Eventlist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Eventlist& from);
  void MergeFrom(const Eventlist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Eventlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
  int linklist_size() const;
  void clear_linklist();
  static const int kLinklistFieldNumber = 9;
  ::nebulalink::perceptron3::RelateLinkDesc* mutable_linklist(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc >*
      mutable_linklist();
  const ::nebulalink::perceptron3::RelateLinkDesc& linklist(int index) const;
  ::nebulalink::perceptron3::RelateLinkDesc* add_linklist();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc >&
      linklist() const;

  // repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
  int pathlist_size() const;
  void clear_pathlist();
  static const int kPathlistFieldNumber = 10;
  ::nebulalink::perceptron3::RelatePathDesc* mutable_pathlist(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelatePathDesc >*
      mutable_pathlist();
  const ::nebulalink::perceptron3::RelatePathDesc& pathlist(int index) const;
  ::nebulalink::perceptron3::RelatePathDesc* add_pathlist();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelatePathDesc >&
      pathlist() const;

  // string event_desc = 7;
  void clear_event_desc();
  static const int kEventDescFieldNumber = 7;
  const ::std::string& event_desc() const;
  void set_event_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_event_desc(::std::string&& value);
  #endif
  void set_event_desc(const char* value);
  void set_event_desc(const char* value, size_t size);
  ::std::string* mutable_event_desc();
  ::std::string* release_event_desc();
  void set_allocated_event_desc(::std::string* event_desc);

  // .nebulalink.perceptron3.PointGPS event_gps = 5;
  bool has_event_gps() const;
  void clear_event_gps();
  static const int kEventGpsFieldNumber = 5;
  private:
  const ::nebulalink::perceptron3::PointGPS& _internal_event_gps() const;
  public:
  const ::nebulalink::perceptron3::PointGPS& event_gps() const;
  ::nebulalink::perceptron3::PointGPS* release_event_gps();
  ::nebulalink::perceptron3::PointGPS* mutable_event_gps();
  void set_allocated_event_gps(::nebulalink::perceptron3::PointGPS* event_gps);

  // .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
  bool has_event_timestamp_start() const;
  void clear_event_timestamp_start();
  static const int kEventTimestampStartFieldNumber = 12;
  private:
  const ::nebulalink::perceptron3::TimeBase& _internal_event_timestamp_start() const;
  public:
  const ::nebulalink::perceptron3::TimeBase& event_timestamp_start() const;
  ::nebulalink::perceptron3::TimeBase* release_event_timestamp_start();
  ::nebulalink::perceptron3::TimeBase* mutable_event_timestamp_start();
  void set_allocated_event_timestamp_start(::nebulalink::perceptron3::TimeBase* event_timestamp_start);

  // .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
  bool has_event_timestamp_end() const;
  void clear_event_timestamp_end();
  static const int kEventTimestampEndFieldNumber = 13;
  private:
  const ::nebulalink::perceptron3::TimeBase& _internal_event_timestamp_end() const;
  public:
  const ::nebulalink::perceptron3::TimeBase& event_timestamp_end() const;
  ::nebulalink::perceptron3::TimeBase* release_event_timestamp_end();
  ::nebulalink::perceptron3::TimeBase* mutable_event_timestamp_end();
  void set_allocated_event_timestamp_end(::nebulalink::perceptron3::TimeBase* event_timestamp_end);

  // int32 event_id = 1;
  void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int32 event_id() const;
  void set_event_id(::google::protobuf::int32 value);

  // int32 event_status = 2;
  void clear_event_status();
  static const int kEventStatusFieldNumber = 2;
  ::google::protobuf::int32 event_status() const;
  void set_event_status(::google::protobuf::int32 value);

  // int32 event_type = 3;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  ::google::protobuf::int32 event_type() const;
  void set_event_type(::google::protobuf::int32 value);

  // int32 rte_source = 4;
  void clear_rte_source();
  static const int kRteSourceFieldNumber = 4;
  ::google::protobuf::int32 rte_source() const;
  void set_rte_source(::google::protobuf::int32 value);

  // float event_radius = 6;
  void clear_event_radius();
  static const int kEventRadiusFieldNumber = 6;
  float event_radius() const;
  void set_event_radius(float value);

  // int32 event_priority = 8;
  void clear_event_priority();
  static const int kEventPriorityFieldNumber = 8;
  ::google::protobuf::int32 event_priority() const;
  void set_event_priority(::google::protobuf::int32 value);

  // int32 event_confid = 11;
  void clear_event_confid();
  static const int kEventConfidFieldNumber = 11;
  ::google::protobuf::int32 event_confid() const;
  void set_event_confid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Eventlist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc > linklist_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelatePathDesc > pathlist_;
  ::google::protobuf::internal::ArenaStringPtr event_desc_;
  ::nebulalink::perceptron3::PointGPS* event_gps_;
  ::nebulalink::perceptron3::TimeBase* event_timestamp_start_;
  ::nebulalink::perceptron3::TimeBase* event_timestamp_end_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 event_status_;
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 rte_source_;
  float event_radius_;
  ::google::protobuf::int32 event_priority_;
  ::google::protobuf::int32 event_confid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Heartlist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.Heartlist) */ {
 public:
  Heartlist();
  virtual ~Heartlist();

  Heartlist(const Heartlist& from);

  inline Heartlist& operator=(const Heartlist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Heartlist(Heartlist&& from) noexcept
    : Heartlist() {
    *this = ::std::move(from);
  }

  inline Heartlist& operator=(Heartlist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartlist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Heartlist* internal_default_instance() {
    return reinterpret_cast<const Heartlist*>(
               &_Heartlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(Heartlist* other);
  friend void swap(Heartlist& a, Heartlist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Heartlist* New() const final {
    return CreateMaybeMessage<Heartlist>(NULL);
  }

  Heartlist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Heartlist>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Heartlist& from);
  void MergeFrom(const Heartlist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartlist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err_device_id = 2;
  void clear_err_device_id();
  static const int kErrDeviceIdFieldNumber = 2;
  const ::std::string& err_device_id() const;
  void set_err_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_err_device_id(::std::string&& value);
  #endif
  void set_err_device_id(const char* value);
  void set_err_device_id(const char* value, size_t size);
  ::std::string* mutable_err_device_id();
  ::std::string* release_err_device_id();
  void set_allocated_err_device_id(::std::string* err_device_id);

  // string err_desc = 5;
  void clear_err_desc();
  static const int kErrDescFieldNumber = 5;
  const ::std::string& err_desc() const;
  void set_err_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_err_desc(::std::string&& value);
  #endif
  void set_err_desc(const char* value);
  void set_err_desc(const char* value, size_t size);
  ::std::string* mutable_err_desc();
  ::std::string* release_err_desc();
  void set_allocated_err_desc(::std::string* err_desc);

  // string err_device_version = 8;
  void clear_err_device_version();
  static const int kErrDeviceVersionFieldNumber = 8;
  const ::std::string& err_device_version() const;
  void set_err_device_version(const ::std::string& value);
  #if LANG_CXX11
  void set_err_device_version(::std::string&& value);
  #endif
  void set_err_device_version(const char* value);
  void set_err_device_version(const char* value, size_t size);
  ::std::string* mutable_err_device_version();
  ::std::string* release_err_device_version();
  void set_allocated_err_device_version(::std::string* err_device_version);

  // int32 device_status = 1;
  void clear_device_status();
  static const int kDeviceStatusFieldNumber = 1;
  ::google::protobuf::int32 device_status() const;
  void set_device_status(::google::protobuf::int32 value);

  // int32 err_code = 3;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 3;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // int64 heart_time = 4;
  void clear_heart_time();
  static const int kHeartTimeFieldNumber = 4;
  ::google::protobuf::int64 heart_time() const;
  void set_heart_time(::google::protobuf::int64 value);

  // int32 err_level = 6;
  void clear_err_level();
  static const int kErrLevelFieldNumber = 6;
  ::google::protobuf::int32 err_level() const;
  void set_err_level(::google::protobuf::int32 value);

  // int32 err_device_type = 7;
  void clear_err_device_type();
  static const int kErrDeviceTypeFieldNumber = 7;
  ::google::protobuf::int32 err_device_type() const;
  void set_err_device_type(::google::protobuf::int32 value);

  // float device_temp = 9;
  void clear_device_temp();
  static const int kDeviceTempFieldNumber = 9;
  float device_temp() const;
  void set_device_temp(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.Heartlist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_device_id_;
  ::google::protobuf::internal::ArenaStringPtr err_desc_;
  ::google::protobuf::internal::ArenaStringPtr err_device_version_;
  ::google::protobuf::int32 device_status_;
  ::google::protobuf::int32 err_code_;
  ::google::protobuf::int64 heart_time_;
  ::google::protobuf::int32 err_level_;
  ::google::protobuf::int32 err_device_type_;
  float device_temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneJamSenseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.LaneJamSenseParams) */ {
 public:
  LaneJamSenseParams();
  virtual ~LaneJamSenseParams();

  LaneJamSenseParams(const LaneJamSenseParams& from);

  inline LaneJamSenseParams& operator=(const LaneJamSenseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneJamSenseParams(LaneJamSenseParams&& from) noexcept
    : LaneJamSenseParams() {
    *this = ::std::move(from);
  }

  inline LaneJamSenseParams& operator=(LaneJamSenseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneJamSenseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneJamSenseParams* internal_default_instance() {
    return reinterpret_cast<const LaneJamSenseParams*>(
               &_LaneJamSenseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(LaneJamSenseParams* other);
  friend void swap(LaneJamSenseParams& a, LaneJamSenseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneJamSenseParams* New() const final {
    return CreateMaybeMessage<LaneJamSenseParams>(NULL);
  }

  LaneJamSenseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneJamSenseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneJamSenseParams& from);
  void MergeFrom(const LaneJamSenseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneJamSenseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
  bool has_lane_entre_info() const;
  void clear_lane_entre_info();
  static const int kLaneEntreInfoFieldNumber = 15;
  private:
  const ::nebulalink::perceptron3::InfoEntreLineValues& _internal_lane_entre_info() const;
  public:
  const ::nebulalink::perceptron3::InfoEntreLineValues& lane_entre_info() const;
  ::nebulalink::perceptron3::InfoEntreLineValues* release_lane_entre_info();
  ::nebulalink::perceptron3::InfoEntreLineValues* mutable_lane_entre_info();
  void set_allocated_lane_entre_info(::nebulalink::perceptron3::InfoEntreLineValues* lane_entre_info);

  // .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
  bool has_lane_end_info() const;
  void clear_lane_end_info();
  static const int kLaneEndInfoFieldNumber = 16;
  private:
  const ::nebulalink::perceptron3::InfoEndLineValues& _internal_lane_end_info() const;
  public:
  const ::nebulalink::perceptron3::InfoEndLineValues& lane_end_info() const;
  ::nebulalink::perceptron3::InfoEndLineValues* release_lane_end_info();
  ::nebulalink::perceptron3::InfoEndLineValues* mutable_lane_end_info();
  void set_allocated_lane_end_info(::nebulalink::perceptron3::InfoEndLineValues* lane_end_info);

  // int32 lane_types = 2;
  void clear_lane_types();
  static const int kLaneTypesFieldNumber = 2;
  ::google::protobuf::int32 lane_types() const;
  void set_lane_types(::google::protobuf::int32 value);

  // float lane_sense_len = 3;
  void clear_lane_sense_len();
  static const int kLaneSenseLenFieldNumber = 3;
  float lane_sense_len() const;
  void set_lane_sense_len(float value);

  // int32 lane_direction = 4;
  void clear_lane_direction();
  static const int kLaneDirectionFieldNumber = 4;
  ::google::protobuf::int32 lane_direction() const;
  void set_lane_direction(::google::protobuf::int32 value);

  // float lane_avg_speed = 5;
  void clear_lane_avg_speed();
  static const int kLaneAvgSpeedFieldNumber = 5;
  float lane_avg_speed() const;
  void set_lane_avg_speed(float value);

  // int32 lane_veh_num = 6;
  void clear_lane_veh_num();
  static const int kLaneVehNumFieldNumber = 6;
  ::google::protobuf::int32 lane_veh_num() const;
  void set_lane_veh_num(::google::protobuf::int32 value);

  // float lane_space_occupancy = 7;
  void clear_lane_space_occupancy();
  static const int kLaneSpaceOccupancyFieldNumber = 7;
  float lane_space_occupancy() const;
  void set_lane_space_occupancy(float value);

  // int32 lane_queue_len = 8;
  void clear_lane_queue_len();
  static const int kLaneQueueLenFieldNumber = 8;
  ::google::protobuf::int32 lane_queue_len() const;
  void set_lane_queue_len(::google::protobuf::int32 value);

  // int32 lane_count_time = 9;
  void clear_lane_count_time();
  static const int kLaneCountTimeFieldNumber = 9;
  ::google::protobuf::int32 lane_count_time() const;
  void set_lane_count_time(::google::protobuf::int32 value);

  // int32 lane_count_flow = 10;
  void clear_lane_count_flow();
  static const int kLaneCountFlowFieldNumber = 10;
  ::google::protobuf::int32 lane_count_flow() const;
  void set_lane_count_flow(::google::protobuf::int32 value);

  // bool lane_is_count = 11;
  void clear_lane_is_count();
  static const int kLaneIsCountFieldNumber = 11;
  bool lane_is_count() const;
  void set_lane_is_count(bool value);

  // int32 lane_ave_distance = 12;
  void clear_lane_ave_distance();
  static const int kLaneAveDistanceFieldNumber = 12;
  ::google::protobuf::int32 lane_ave_distance() const;
  void set_lane_ave_distance(::google::protobuf::int32 value);

  // int32 lane_cur_distance = 13;
  void clear_lane_cur_distance();
  static const int kLaneCurDistanceFieldNumber = 13;
  ::google::protobuf::int32 lane_cur_distance() const;
  void set_lane_cur_distance(::google::protobuf::int32 value);

  // float lane_time_occupancy = 14;
  void clear_lane_time_occupancy();
  static const int kLaneTimeOccupancyFieldNumber = 14;
  float lane_time_occupancy() const;
  void set_lane_time_occupancy(float value);

  // int32 lane_num = 17;
  void clear_lane_num();
  static const int kLaneNumFieldNumber = 17;
  ::google::protobuf::int32 lane_num() const;
  void set_lane_num(::google::protobuf::int32 value);

  // int32 lane_no = 18;
  void clear_lane_no();
  static const int kLaneNoFieldNumber = 18;
  ::google::protobuf::int32 lane_no() const;
  void set_lane_no(::google::protobuf::int32 value);

  // int32 lane_peron_volume = 19;
  void clear_lane_peron_volume();
  static const int kLanePeronVolumeFieldNumber = 19;
  ::google::protobuf::int32 lane_peron_volume() const;
  void set_lane_peron_volume(::google::protobuf::int32 value);

  // int32 lane_no_motor_volume = 20;
  void clear_lane_no_motor_volume();
  static const int kLaneNoMotorVolumeFieldNumber = 20;
  ::google::protobuf::int32 lane_no_motor_volume() const;
  void set_lane_no_motor_volume(::google::protobuf::int32 value);

  // int32 lane_minmotor_volume = 21;
  void clear_lane_minmotor_volume();
  static const int kLaneMinmotorVolumeFieldNumber = 21;
  ::google::protobuf::int32 lane_minmotor_volume() const;
  void set_lane_minmotor_volume(::google::protobuf::int32 value);

  // int32 lane_medmotor_volume = 22;
  void clear_lane_medmotor_volume();
  static const int kLaneMedmotorVolumeFieldNumber = 22;
  ::google::protobuf::int32 lane_medmotor_volume() const;
  void set_lane_medmotor_volume(::google::protobuf::int32 value);

  // int32 lane_maxmotor_volume = 23;
  void clear_lane_maxmotor_volume();
  static const int kLaneMaxmotorVolumeFieldNumber = 23;
  ::google::protobuf::int32 lane_maxmotor_volume() const;
  void set_lane_maxmotor_volume(::google::protobuf::int32 value);

  // int32 lane_pcu = 24;
  void clear_lane_pcu();
  static const int kLanePcuFieldNumber = 24;
  ::google::protobuf::int32 lane_pcu() const;
  void set_lane_pcu(::google::protobuf::int32 value);

  // float lane_avspeed = 25;
  void clear_lane_avspeed();
  static const int kLaneAvspeedFieldNumber = 25;
  float lane_avspeed() const;
  void set_lane_avspeed(float value);

  // float lane_headway = 26;
  void clear_lane_headway();
  static const int kLaneHeadwayFieldNumber = 26;
  float lane_headway() const;
  void set_lane_headway(float value);

  // float lane_gap = 27;
  void clear_lane_gap();
  static const int kLaneGapFieldNumber = 27;
  float lane_gap() const;
  void set_lane_gap(float value);

  // float lane_avdistance = 28;
  void clear_lane_avdistance();
  static const int kLaneAvdistanceFieldNumber = 28;
  float lane_avdistance() const;
  void set_lane_avdistance(float value);

  // float lane_avstop = 29;
  void clear_lane_avstop();
  static const int kLaneAvstopFieldNumber = 29;
  float lane_avstop() const;
  void set_lane_avstop(float value);

  // float lane_speed85 = 30;
  void clear_lane_speed85();
  static const int kLaneSpeed85FieldNumber = 30;
  float lane_speed85() const;
  void set_lane_speed85(float value);

  // float lane_queueLength = 31;
  void clear_lane_queuelength();
  static const int kLaneQueueLengthFieldNumber = 31;
  float lane_queuelength() const;
  void set_lane_queuelength(float value);

  // float lane_stopline = 32;
  void clear_lane_stopline();
  static const int kLaneStoplineFieldNumber = 32;
  float lane_stopline() const;
  void set_lane_stopline(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.LaneJamSenseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::nebulalink::perceptron3::InfoEntreLineValues* lane_entre_info_;
  ::nebulalink::perceptron3::InfoEndLineValues* lane_end_info_;
  ::google::protobuf::int32 lane_types_;
  float lane_sense_len_;
  ::google::protobuf::int32 lane_direction_;
  float lane_avg_speed_;
  ::google::protobuf::int32 lane_veh_num_;
  float lane_space_occupancy_;
  ::google::protobuf::int32 lane_queue_len_;
  ::google::protobuf::int32 lane_count_time_;
  ::google::protobuf::int32 lane_count_flow_;
  bool lane_is_count_;
  ::google::protobuf::int32 lane_ave_distance_;
  ::google::protobuf::int32 lane_cur_distance_;
  float lane_time_occupancy_;
  ::google::protobuf::int32 lane_num_;
  ::google::protobuf::int32 lane_no_;
  ::google::protobuf::int32 lane_peron_volume_;
  ::google::protobuf::int32 lane_no_motor_volume_;
  ::google::protobuf::int32 lane_minmotor_volume_;
  ::google::protobuf::int32 lane_medmotor_volume_;
  ::google::protobuf::int32 lane_maxmotor_volume_;
  ::google::protobuf::int32 lane_pcu_;
  float lane_avspeed_;
  float lane_headway_;
  float lane_gap_;
  float lane_avdistance_;
  float lane_avstop_;
  float lane_speed85_;
  float lane_queuelength_;
  float lane_stopline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinkJamSenseParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.LinkJamSenseParams) */ {
 public:
  LinkJamSenseParams();
  virtual ~LinkJamSenseParams();

  LinkJamSenseParams(const LinkJamSenseParams& from);

  inline LinkJamSenseParams& operator=(const LinkJamSenseParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinkJamSenseParams(LinkJamSenseParams&& from) noexcept
    : LinkJamSenseParams() {
    *this = ::std::move(from);
  }

  inline LinkJamSenseParams& operator=(LinkJamSenseParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkJamSenseParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkJamSenseParams* internal_default_instance() {
    return reinterpret_cast<const LinkJamSenseParams*>(
               &_LinkJamSenseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(LinkJamSenseParams* other);
  friend void swap(LinkJamSenseParams& a, LinkJamSenseParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinkJamSenseParams* New() const final {
    return CreateMaybeMessage<LinkJamSenseParams>(NULL);
  }

  LinkJamSenseParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinkJamSenseParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinkJamSenseParams& from);
  void MergeFrom(const LinkJamSenseParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkJamSenseParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
  int road_lanelist_size() const;
  void clear_road_lanelist();
  static const int kRoadLanelistFieldNumber = 39;
  ::nebulalink::perceptron3::LaneJamSenseParams* mutable_road_lanelist(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >*
      mutable_road_lanelist();
  const ::nebulalink::perceptron3::LaneJamSenseParams& road_lanelist(int index) const;
  ::nebulalink::perceptron3::LaneJamSenseParams* add_road_lanelist();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >&
      road_lanelist() const;

  // string link_id = 1;
  void clear_link_id();
  static const int kLinkIdFieldNumber = 1;
  const ::std::string& link_id() const;
  void set_link_id(const ::std::string& value);
  #if LANG_CXX11
  void set_link_id(::std::string&& value);
  #endif
  void set_link_id(const char* value);
  void set_link_id(const char* value, size_t size);
  ::std::string* mutable_link_id();
  ::std::string* release_link_id();
  void set_allocated_link_id(::std::string* link_id);

  // string link_deviceid = 14;
  void clear_link_deviceid();
  static const int kLinkDeviceidFieldNumber = 14;
  const ::std::string& link_deviceid() const;
  void set_link_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_link_deviceid(::std::string&& value);
  #endif
  void set_link_deviceid(const char* value);
  void set_link_deviceid(const char* value, size_t size);
  ::std::string* mutable_link_deviceid();
  ::std::string* release_link_deviceid();
  void set_allocated_link_deviceid(::std::string* link_deviceid);

  // string link_name = 17;
  void clear_link_name();
  static const int kLinkNameFieldNumber = 17;
  const ::std::string& link_name() const;
  void set_link_name(const ::std::string& value);
  #if LANG_CXX11
  void set_link_name(::std::string&& value);
  #endif
  void set_link_name(const char* value);
  void set_link_name(const char* value, size_t size);
  ::std::string* mutable_link_name();
  ::std::string* release_link_name();
  void set_allocated_link_name(::std::string* link_name);

  // .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
  bool has_link_entre_info() const;
  void clear_link_entre_info();
  static const int kLinkEntreInfoFieldNumber = 12;
  private:
  const ::nebulalink::perceptron3::InfoEntreLineValues& _internal_link_entre_info() const;
  public:
  const ::nebulalink::perceptron3::InfoEntreLineValues& link_entre_info() const;
  ::nebulalink::perceptron3::InfoEntreLineValues* release_link_entre_info();
  ::nebulalink::perceptron3::InfoEntreLineValues* mutable_link_entre_info();
  void set_allocated_link_entre_info(::nebulalink::perceptron3::InfoEntreLineValues* link_entre_info);

  // .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
  bool has_link_end_info() const;
  void clear_link_end_info();
  static const int kLinkEndInfoFieldNumber = 13;
  private:
  const ::nebulalink::perceptron3::InfoEndLineValues& _internal_link_end_info() const;
  public:
  const ::nebulalink::perceptron3::InfoEndLineValues& link_end_info() const;
  ::nebulalink::perceptron3::InfoEndLineValues* release_link_end_info();
  ::nebulalink::perceptron3::InfoEndLineValues* mutable_link_end_info();
  void set_allocated_link_end_info(::nebulalink::perceptron3::InfoEndLineValues* link_end_info);

  // .nebulalink.perceptron3.PointGPS link_gps = 19;
  bool has_link_gps() const;
  void clear_link_gps();
  static const int kLinkGpsFieldNumber = 19;
  private:
  const ::nebulalink::perceptron3::PointGPS& _internal_link_gps() const;
  public:
  const ::nebulalink::perceptron3::PointGPS& link_gps() const;
  ::nebulalink::perceptron3::PointGPS* release_link_gps();
  ::nebulalink::perceptron3::PointGPS* mutable_link_gps();
  void set_allocated_link_gps(::nebulalink::perceptron3::PointGPS* link_gps);

  // float link_len = 2;
  void clear_link_len();
  static const int kLinkLenFieldNumber = 2;
  float link_len() const;
  void set_link_len(float value);

  // float link_avgspeed = 3;
  void clear_link_avgspeed();
  static const int kLinkAvgspeedFieldNumber = 3;
  float link_avgspeed() const;
  void set_link_avgspeed(float value);

  // int32 link_veh_num = 4;
  void clear_link_veh_num();
  static const int kLinkVehNumFieldNumber = 4;
  ::google::protobuf::int32 link_veh_num() const;
  void set_link_veh_num(::google::protobuf::int32 value);

  // int32 link_type = 5;
  void clear_link_type();
  static const int kLinkTypeFieldNumber = 5;
  ::google::protobuf::int32 link_type() const;
  void set_link_type(::google::protobuf::int32 value);

  // int32 link_direction = 6;
  void clear_link_direction();
  static const int kLinkDirectionFieldNumber = 6;
  ::google::protobuf::int32 link_direction() const;
  void set_link_direction(::google::protobuf::int32 value);

  // float link_space_occupancy = 7;
  void clear_link_space_occupancy();
  static const int kLinkSpaceOccupancyFieldNumber = 7;
  float link_space_occupancy() const;
  void set_link_space_occupancy(float value);

  // float link_time_occupancy = 8;
  void clear_link_time_occupancy();
  static const int kLinkTimeOccupancyFieldNumber = 8;
  float link_time_occupancy() const;
  void set_link_time_occupancy(float value);

  // int32 link_count_time = 9;
  void clear_link_count_time();
  static const int kLinkCountTimeFieldNumber = 9;
  ::google::protobuf::int32 link_count_time() const;
  void set_link_count_time(::google::protobuf::int32 value);

  // int32 link_count_flow = 10;
  void clear_link_count_flow();
  static const int kLinkCountFlowFieldNumber = 10;
  ::google::protobuf::int32 link_count_flow() const;
  void set_link_count_flow(::google::protobuf::int32 value);

  // bool link_is_count = 11;
  void clear_link_is_count();
  static const int kLinkIsCountFieldNumber = 11;
  bool link_is_count() const;
  void set_link_is_count(bool value);

  // int32 link_heading = 15;
  void clear_link_heading();
  static const int kLinkHeadingFieldNumber = 15;
  ::google::protobuf::int32 link_heading() const;
  void set_link_heading(::google::protobuf::int32 value);

  // int32 link_phaseid = 16;
  void clear_link_phaseid();
  static const int kLinkPhaseidFieldNumber = 16;
  ::google::protobuf::int32 link_phaseid() const;
  void set_link_phaseid(::google::protobuf::int32 value);

  // int32 link_no = 18;
  void clear_link_no();
  static const int kLinkNoFieldNumber = 18;
  ::google::protobuf::int32 link_no() const;
  void set_link_no(::google::protobuf::int32 value);

  // int32 link_measnum = 20;
  void clear_link_measnum();
  static const int kLinkMeasnumFieldNumber = 20;
  ::google::protobuf::int32 link_measnum() const;
  void set_link_measnum(::google::protobuf::int32 value);

  // int32 link_num = 21;
  void clear_link_num();
  static const int kLinkNumFieldNumber = 21;
  ::google::protobuf::int32 link_num() const;
  void set_link_num(::google::protobuf::int32 value);

  // int32 link_motor_volume = 22;
  void clear_link_motor_volume();
  static const int kLinkMotorVolumeFieldNumber = 22;
  ::google::protobuf::int32 link_motor_volume() const;
  void set_link_motor_volume(::google::protobuf::int32 value);

  // int32 link_peron_volume = 23;
  void clear_link_peron_volume();
  static const int kLinkPeronVolumeFieldNumber = 23;
  ::google::protobuf::int32 link_peron_volume() const;
  void set_link_peron_volume(::google::protobuf::int32 value);

  // int32 link_no_motor_volume = 24;
  void clear_link_no_motor_volume();
  static const int kLinkNoMotorVolumeFieldNumber = 24;
  ::google::protobuf::int32 link_no_motor_volume() const;
  void set_link_no_motor_volume(::google::protobuf::int32 value);

  // int32 link_minmotor_volume = 25;
  void clear_link_minmotor_volume();
  static const int kLinkMinmotorVolumeFieldNumber = 25;
  ::google::protobuf::int32 link_minmotor_volume() const;
  void set_link_minmotor_volume(::google::protobuf::int32 value);

  // int32 link_medmotor_volume = 26;
  void clear_link_medmotor_volume();
  static const int kLinkMedmotorVolumeFieldNumber = 26;
  ::google::protobuf::int32 link_medmotor_volume() const;
  void set_link_medmotor_volume(::google::protobuf::int32 value);

  // int32 link_maxmotor_volume = 27;
  void clear_link_maxmotor_volume();
  static const int kLinkMaxmotorVolumeFieldNumber = 27;
  ::google::protobuf::int32 link_maxmotor_volume() const;
  void set_link_maxmotor_volume(::google::protobuf::int32 value);

  // int32 link_pcu = 28;
  void clear_link_pcu();
  static const int kLinkPcuFieldNumber = 28;
  ::google::protobuf::int32 link_pcu() const;
  void set_link_pcu(::google::protobuf::int32 value);

  // float link_avspeed = 29;
  void clear_link_avspeed();
  static const int kLinkAvspeedFieldNumber = 29;
  float link_avspeed() const;
  void set_link_avspeed(float value);

  // float link_time_occupany = 30;
  void clear_link_time_occupany();
  static const int kLinkTimeOccupanyFieldNumber = 30;
  float link_time_occupany() const;
  void set_link_time_occupany(float value);

  // float link_headway = 31;
  void clear_link_headway();
  static const int kLinkHeadwayFieldNumber = 31;
  float link_headway() const;
  void set_link_headway(float value);

  // float link_gap = 32;
  void clear_link_gap();
  static const int kLinkGapFieldNumber = 32;
  float link_gap() const;
  void set_link_gap(float value);

  // float link_avdistance = 33;
  void clear_link_avdistance();
  static const int kLinkAvdistanceFieldNumber = 33;
  float link_avdistance() const;
  void set_link_avdistance(float value);

  // float link_avstop = 34;
  void clear_link_avstop();
  static const int kLinkAvstopFieldNumber = 34;
  float link_avstop() const;
  void set_link_avstop(float value);

  // float link_speed85 = 35;
  void clear_link_speed85();
  static const int kLinkSpeed85FieldNumber = 35;
  float link_speed85() const;
  void set_link_speed85(float value);

  // float link_queueLength = 36;
  void clear_link_queuelength();
  static const int kLinkQueueLengthFieldNumber = 36;
  float link_queuelength() const;
  void set_link_queuelength(float value);

  // float link_stopline = 37;
  void clear_link_stopline();
  static const int kLinkStoplineFieldNumber = 37;
  float link_stopline() const;
  void set_link_stopline(float value);

  // float link_space_occupany = 38;
  void clear_link_space_occupany();
  static const int kLinkSpaceOccupanyFieldNumber = 38;
  float link_space_occupany() const;
  void set_link_space_occupany(float value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.LinkJamSenseParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams > road_lanelist_;
  ::google::protobuf::internal::ArenaStringPtr link_id_;
  ::google::protobuf::internal::ArenaStringPtr link_deviceid_;
  ::google::protobuf::internal::ArenaStringPtr link_name_;
  ::nebulalink::perceptron3::InfoEntreLineValues* link_entre_info_;
  ::nebulalink::perceptron3::InfoEndLineValues* link_end_info_;
  ::nebulalink::perceptron3::PointGPS* link_gps_;
  float link_len_;
  float link_avgspeed_;
  ::google::protobuf::int32 link_veh_num_;
  ::google::protobuf::int32 link_type_;
  ::google::protobuf::int32 link_direction_;
  float link_space_occupancy_;
  float link_time_occupancy_;
  ::google::protobuf::int32 link_count_time_;
  ::google::protobuf::int32 link_count_flow_;
  bool link_is_count_;
  ::google::protobuf::int32 link_heading_;
  ::google::protobuf::int32 link_phaseid_;
  ::google::protobuf::int32 link_no_;
  ::google::protobuf::int32 link_measnum_;
  ::google::protobuf::int32 link_num_;
  ::google::protobuf::int32 link_motor_volume_;
  ::google::protobuf::int32 link_peron_volume_;
  ::google::protobuf::int32 link_no_motor_volume_;
  ::google::protobuf::int32 link_minmotor_volume_;
  ::google::protobuf::int32 link_medmotor_volume_;
  ::google::protobuf::int32 link_maxmotor_volume_;
  ::google::protobuf::int32 link_pcu_;
  float link_avspeed_;
  float link_time_occupany_;
  float link_headway_;
  float link_gap_;
  float link_avdistance_;
  float link_avstop_;
  float link_speed85_;
  float link_queuelength_;
  float link_stopline_;
  float link_space_occupany_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptronSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nebulalink.perceptron3.PerceptronSet) */ {
 public:
  PerceptronSet();
  virtual ~PerceptronSet();

  PerceptronSet(const PerceptronSet& from);

  inline PerceptronSet& operator=(const PerceptronSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptronSet(PerceptronSet&& from) noexcept
    : PerceptronSet() {
    *this = ::std::move(from);
  }

  inline PerceptronSet& operator=(PerceptronSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptronSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptronSet* internal_default_instance() {
    return reinterpret_cast<const PerceptronSet*>(
               &_PerceptronSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(PerceptronSet* other);
  friend void swap(PerceptronSet& a, PerceptronSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptronSet* New() const final {
    return CreateMaybeMessage<PerceptronSet>(NULL);
  }

  PerceptronSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptronSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptronSet& from);
  void MergeFrom(const PerceptronSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptronSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
  int perceptron_size() const;
  void clear_perceptron();
  static const int kPerceptronFieldNumber = 6;
  ::nebulalink::perceptron3::Perceptron* mutable_perceptron(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >*
      mutable_perceptron();
  const ::nebulalink::perceptron3::Perceptron& perceptron(int index) const;
  ::nebulalink::perceptron3::Perceptron* add_perceptron();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >&
      perceptron() const;

  // repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
  int lane_jam_sense_params_size() const;
  void clear_lane_jam_sense_params();
  static const int kLaneJamSenseParamsFieldNumber = 7;
  ::nebulalink::perceptron3::LaneJamSenseParams* mutable_lane_jam_sense_params(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >*
      mutable_lane_jam_sense_params();
  const ::nebulalink::perceptron3::LaneJamSenseParams& lane_jam_sense_params(int index) const;
  ::nebulalink::perceptron3::LaneJamSenseParams* add_lane_jam_sense_params();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >&
      lane_jam_sense_params() const;

  // repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
  int link_jam_sense_params_size() const;
  void clear_link_jam_sense_params();
  static const int kLinkJamSenseParamsFieldNumber = 8;
  ::nebulalink::perceptron3::LinkJamSenseParams* mutable_link_jam_sense_params(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >*
      mutable_link_jam_sense_params();
  const ::nebulalink::perceptron3::LinkJamSenseParams& link_jam_sense_params(int index) const;
  ::nebulalink::perceptron3::LinkJamSenseParams* add_link_jam_sense_params();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >&
      link_jam_sense_params() const;

  // repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
  int on_line_values_size() const;
  void clear_on_line_values();
  static const int kOnLineValuesFieldNumber = 9;
  ::nebulalink::perceptron3::OnLineValues* mutable_on_line_values(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::OnLineValues >*
      mutable_on_line_values();
  const ::nebulalink::perceptron3::OnLineValues& on_line_values(int index) const;
  ::nebulalink::perceptron3::OnLineValues* add_on_line_values();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::OnLineValues >&
      on_line_values() const;

  // repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
  int frame_array_size() const;
  void clear_frame_array();
  static const int kFrameArrayFieldNumber = 10;
  ::nebulalink::perceptron3::FrameArray* mutable_frame_array(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::FrameArray >*
      mutable_frame_array();
  const ::nebulalink::perceptron3::FrameArray& frame_array(int index) const;
  ::nebulalink::perceptron3::FrameArray* add_frame_array();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::FrameArray >&
      frame_array() const;

  // repeated .nebulalink.perceptron3.Eventlist event_list = 11;
  int event_list_size() const;
  void clear_event_list();
  static const int kEventListFieldNumber = 11;
  ::nebulalink::perceptron3::Eventlist* mutable_event_list(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Eventlist >*
      mutable_event_list();
  const ::nebulalink::perceptron3::Eventlist& event_list(int index) const;
  ::nebulalink::perceptron3::Eventlist* add_event_list();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Eventlist >&
      event_list() const;

  // repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
  int heart_list_size() const;
  void clear_heart_list();
  static const int kHeartListFieldNumber = 12;
  ::nebulalink::perceptron3::Heartlist* mutable_heart_list(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Heartlist >*
      mutable_heart_list();
  const ::nebulalink::perceptron3::Heartlist& heart_list(int index) const;
  ::nebulalink::perceptron3::Heartlist* add_heart_list();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Heartlist >&
      heart_list() const;

  // repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 13;
  ::nebulalink::perceptron3::DetectorRegion* mutable_polygon(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::DetectorRegion >*
      mutable_polygon();
  const ::nebulalink::perceptron3::DetectorRegion& polygon(int index) const;
  ::nebulalink::perceptron3::DetectorRegion* add_polygon();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::DetectorRegion >&
      polygon() const;

  // repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
  int obstacle_size() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 14;
  ::nebulalink::perceptron3::Obstacles* mutable_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Obstacles >*
      mutable_obstacle();
  const ::nebulalink::perceptron3::Obstacles& obstacle(int index) const;
  ::nebulalink::perceptron3::Obstacles* add_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Obstacles >&
      obstacle() const;

  // repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
  int v2x_obus_size() const;
  void clear_v2x_obus();
  static const int kV2XObusFieldNumber = 15;
  ::nebulalink::perceptron3::V2XOBUs* mutable_v2x_obus(int index);
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::V2XOBUs >*
      mutable_v2x_obus();
  const ::nebulalink::perceptron3::V2XOBUs& v2x_obus(int index) const;
  ::nebulalink::perceptron3::V2XOBUs* add_v2x_obus();
  const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::V2XOBUs >&
      v2x_obus() const;

  // string devide_id = 1;
  void clear_devide_id();
  static const int kDevideIdFieldNumber = 1;
  const ::std::string& devide_id() const;
  void set_devide_id(const ::std::string& value);
  #if LANG_CXX11
  void set_devide_id(::std::string&& value);
  #endif
  void set_devide_id(const char* value);
  void set_devide_id(const char* value, size_t size);
  ::std::string* mutable_devide_id();
  ::std::string* release_devide_id();
  void set_allocated_devide_id(::std::string* devide_id);

  // .nebulalink.perceptron3.PointGPS perception_gps = 5;
  bool has_perception_gps() const;
  void clear_perception_gps();
  static const int kPerceptionGpsFieldNumber = 5;
  private:
  const ::nebulalink::perceptron3::PointGPS& _internal_perception_gps() const;
  public:
  const ::nebulalink::perceptron3::PointGPS& perception_gps() const;
  ::nebulalink::perceptron3::PointGPS* release_perception_gps();
  ::nebulalink::perceptron3::PointGPS* mutable_perception_gps();
  void set_allocated_perception_gps(::nebulalink::perceptron3::PointGPS* perception_gps);

  // int64 time_stamp = 3;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::int64 time_stamp() const;
  void set_time_stamp(::google::protobuf::int64 value);

  // bool devide_is_true = 2;
  void clear_devide_is_true();
  static const int kDevideIsTrueFieldNumber = 2;
  bool devide_is_true() const;
  void set_devide_is_true(bool value);

  // int32 number_frame = 4;
  void clear_number_frame();
  static const int kNumberFrameFieldNumber = 4;
  ::google::protobuf::int32 number_frame() const;
  void set_number_frame(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nebulalink.perceptron3.PerceptronSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron > perceptron_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams > lane_jam_sense_params_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams > link_jam_sense_params_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::OnLineValues > on_line_values_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::FrameArray > frame_array_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Eventlist > event_list_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Heartlist > heart_list_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::DetectorRegion > polygon_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Obstacles > obstacle_;
  ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::V2XOBUs > v2x_obus_;
  ::google::protobuf::internal::ArenaStringPtr devide_id_;
  ::nebulalink::perceptron3::PointGPS* perception_gps_;
  ::google::protobuf::int64 time_stamp_;
  bool devide_is_true_;
  ::google::protobuf::int32 number_frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nebulalink_2eperceptron3_2e0_2e5_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointGPS_CFD

// double position_confidence = 1;
inline void PointGPS_CFD::clear_position_confidence() {
  position_confidence_ = 0;
}
inline double PointGPS_CFD::position_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointGPS_CFD.position_confidence)
  return position_confidence_;
}
inline void PointGPS_CFD::set_position_confidence(double value) {
  
  position_confidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointGPS_CFD.position_confidence)
}

// double plevation_confidence = 2;
inline void PointGPS_CFD::clear_plevation_confidence() {
  plevation_confidence_ = 0;
}
inline double PointGPS_CFD::plevation_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointGPS_CFD.plevation_confidence)
  return plevation_confidence_;
}
inline void PointGPS_CFD::set_plevation_confidence(double value) {
  
  plevation_confidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointGPS_CFD.plevation_confidence)
}

// -------------------------------------------------------------------

// TargetSize_CFD

// float object_width_cfd = 1;
inline void TargetSize_CFD::clear_object_width_cfd() {
  object_width_cfd_ = 0;
}
inline float TargetSize_CFD::object_width_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize_CFD.object_width_cfd)
  return object_width_cfd_;
}
inline void TargetSize_CFD::set_object_width_cfd(float value) {
  
  object_width_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize_CFD.object_width_cfd)
}

// float object_length_cfd = 2;
inline void TargetSize_CFD::clear_object_length_cfd() {
  object_length_cfd_ = 0;
}
inline float TargetSize_CFD::object_length_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize_CFD.object_length_cfd)
  return object_length_cfd_;
}
inline void TargetSize_CFD::set_object_length_cfd(float value) {
  
  object_length_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize_CFD.object_length_cfd)
}

// float object_height_cfd = 3;
inline void TargetSize_CFD::clear_object_height_cfd() {
  object_height_cfd_ = 0;
}
inline float TargetSize_CFD::object_height_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize_CFD.object_height_cfd)
  return object_height_cfd_;
}
inline void TargetSize_CFD::set_object_height_cfd(float value) {
  
  object_height_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize_CFD.object_height_cfd)
}

// -------------------------------------------------------------------

// Acc4Way_CFD

// float lonAccConfidence = 1;
inline void Acc4Way_CFD::clear_lonaccconfidence() {
  lonaccconfidence_ = 0;
}
inline float Acc4Way_CFD::lonaccconfidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way_CFD.lonAccConfidence)
  return lonaccconfidence_;
}
inline void Acc4Way_CFD::set_lonaccconfidence(float value) {
  
  lonaccconfidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way_CFD.lonAccConfidence)
}

// float latAccConfidence = 2;
inline void Acc4Way_CFD::clear_lataccconfidence() {
  lataccconfidence_ = 0;
}
inline float Acc4Way_CFD::lataccconfidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way_CFD.latAccConfidence)
  return lataccconfidence_;
}
inline void Acc4Way_CFD::set_lataccconfidence(float value) {
  
  lataccconfidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way_CFD.latAccConfidence)
}

// float vertAccConfidence = 3;
inline void Acc4Way_CFD::clear_vertaccconfidence() {
  vertaccconfidence_ = 0;
}
inline float Acc4Way_CFD::vertaccconfidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way_CFD.vertAccConfidence)
  return vertaccconfidence_;
}
inline void Acc4Way_CFD::set_vertaccconfidence(float value) {
  
  vertaccconfidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way_CFD.vertAccConfidence)
}

// float yawRateCon = 4;
inline void Acc4Way_CFD::clear_yawratecon() {
  yawratecon_ = 0;
}
inline float Acc4Way_CFD::yawratecon() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way_CFD.yawRateCon)
  return yawratecon_;
}
inline void Acc4Way_CFD::set_yawratecon(float value) {
  
  yawratecon_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way_CFD.yawRateCon)
}

// -------------------------------------------------------------------

// Motion_CFD

// float speedCfd = 1;
inline void Motion_CFD::clear_speedcfd() {
  speedcfd_ = 0;
}
inline float Motion_CFD::speedcfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Motion_CFD.speedCfd)
  return speedcfd_;
}
inline void Motion_CFD::set_speedcfd(float value) {
  
  speedcfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Motion_CFD.speedCfd)
}

// float headingCfd = 2;
inline void Motion_CFD::clear_headingcfd() {
  headingcfd_ = 0;
}
inline float Motion_CFD::headingcfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Motion_CFD.headingCfd)
  return headingcfd_;
}
inline void Motion_CFD::set_headingcfd(float value) {
  
  headingcfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Motion_CFD.headingCfd)
}

// float steerCfd = 3;
inline void Motion_CFD::clear_steercfd() {
  steercfd_ = 0;
}
inline float Motion_CFD::steercfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Motion_CFD.steerCfd)
  return steercfd_;
}
inline void Motion_CFD::set_steercfd(float value) {
  
  steercfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Motion_CFD.steerCfd)
}

// -------------------------------------------------------------------

// Acc4Way

// float acc4WayLon = 1;
inline void Acc4Way::clear_acc4waylon() {
  acc4waylon_ = 0;
}
inline float Acc4Way::acc4waylon() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way.acc4WayLon)
  return acc4waylon_;
}
inline void Acc4Way::set_acc4waylon(float value) {
  
  acc4waylon_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way.acc4WayLon)
}

// float acc4WayLat = 2;
inline void Acc4Way::clear_acc4waylat() {
  acc4waylat_ = 0;
}
inline float Acc4Way::acc4waylat() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way.acc4WayLat)
  return acc4waylat_;
}
inline void Acc4Way::set_acc4waylat(float value) {
  
  acc4waylat_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way.acc4WayLat)
}

// float acc4WayVert = 3;
inline void Acc4Way::clear_acc4wayvert() {
  acc4wayvert_ = 0;
}
inline float Acc4Way::acc4wayvert() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way.acc4WayVert)
  return acc4wayvert_;
}
inline void Acc4Way::set_acc4wayvert(float value) {
  
  acc4wayvert_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way.acc4WayVert)
}

// float acc4WayYaw = 4;
inline void Acc4Way::clear_acc4wayyaw() {
  acc4wayyaw_ = 0;
}
inline float Acc4Way::acc4wayyaw() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Acc4Way.acc4WayYaw)
  return acc4wayyaw_;
}
inline void Acc4Way::set_acc4wayyaw(float value) {
  
  acc4wayyaw_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Acc4Way.acc4WayYaw)
}

// -------------------------------------------------------------------

// TargetSize

// float object_width = 1;
inline void TargetSize::clear_object_width() {
  object_width_ = 0;
}
inline float TargetSize::object_width() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize.object_width)
  return object_width_;
}
inline void TargetSize::set_object_width(float value) {
  
  object_width_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize.object_width)
}

// float object_length = 2;
inline void TargetSize::clear_object_length() {
  object_length_ = 0;
}
inline float TargetSize::object_length() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize.object_length)
  return object_length_;
}
inline void TargetSize::set_object_length(float value) {
  
  object_length_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize.object_length)
}

// float object_height = 3;
inline void TargetSize::clear_object_height() {
  object_height_ = 0;
}
inline float TargetSize::object_height() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TargetSize.object_height)
  return object_height_;
}
inline void TargetSize::set_object_height(float value) {
  
  object_height_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TargetSize.object_height)
}

// -------------------------------------------------------------------

// TimeBase

// int32 year = 1;
inline void TimeBase::clear_year() {
  year_ = 0;
}
inline ::google::protobuf::int32 TimeBase::year() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.year)
  return year_;
}
inline void TimeBase::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.year)
}

// int32 month = 2;
inline void TimeBase::clear_month() {
  month_ = 0;
}
inline ::google::protobuf::int32 TimeBase::month() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.month)
  return month_;
}
inline void TimeBase::set_month(::google::protobuf::int32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.month)
}

// int32 day = 3;
inline void TimeBase::clear_day() {
  day_ = 0;
}
inline ::google::protobuf::int32 TimeBase::day() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.day)
  return day_;
}
inline void TimeBase::set_day(::google::protobuf::int32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.day)
}

// int32 hour = 4;
inline void TimeBase::clear_hour() {
  hour_ = 0;
}
inline ::google::protobuf::int32 TimeBase::hour() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.hour)
  return hour_;
}
inline void TimeBase::set_hour(::google::protobuf::int32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.hour)
}

// int32 min = 5;
inline void TimeBase::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 TimeBase::min() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.min)
  return min_;
}
inline void TimeBase::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.min)
}

// int32 second = 6;
inline void TimeBase::clear_second() {
  second_ = 0;
}
inline ::google::protobuf::int32 TimeBase::second() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.second)
  return second_;
}
inline void TimeBase::set_second(::google::protobuf::int32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.second)
}

// int32 miilsecond = 7;
inline void TimeBase::clear_miilsecond() {
  miilsecond_ = 0;
}
inline ::google::protobuf::int32 TimeBase::miilsecond() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.TimeBase.miilsecond)
  return miilsecond_;
}
inline void TimeBase::set_miilsecond(::google::protobuf::int32 value) {
  
  miilsecond_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.TimeBase.miilsecond)
}

// -------------------------------------------------------------------

// PointGPS

// double object_longitude = 1;
inline void PointGPS::clear_object_longitude() {
  object_longitude_ = 0;
}
inline double PointGPS::object_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointGPS.object_longitude)
  return object_longitude_;
}
inline void PointGPS::set_object_longitude(double value) {
  
  object_longitude_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointGPS.object_longitude)
}

// double object_latitude = 2;
inline void PointGPS::clear_object_latitude() {
  object_latitude_ = 0;
}
inline double PointGPS::object_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointGPS.object_latitude)
  return object_latitude_;
}
inline void PointGPS::set_object_latitude(double value) {
  
  object_latitude_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointGPS.object_latitude)
}

// double object_elevation = 3;
inline void PointGPS::clear_object_elevation() {
  object_elevation_ = 0;
}
inline double PointGPS::object_elevation() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointGPS.object_elevation)
  return object_elevation_;
}
inline void PointGPS::set_object_elevation(double value) {
  
  object_elevation_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointGPS.object_elevation)
}

// -------------------------------------------------------------------

// PointDesc

// double p_longitude = 1;
inline void PointDesc::clear_p_longitude() {
  p_longitude_ = 0;
}
inline double PointDesc::p_longitude() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_longitude)
  return p_longitude_;
}
inline void PointDesc::set_p_longitude(double value) {
  
  p_longitude_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_longitude)
}

// double p_latitude = 2;
inline void PointDesc::clear_p_latitude() {
  p_latitude_ = 0;
}
inline double PointDesc::p_latitude() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_latitude)
  return p_latitude_;
}
inline void PointDesc::set_p_latitude(double value) {
  
  p_latitude_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_latitude)
}

// double p_altitude = 3;
inline void PointDesc::clear_p_altitude() {
  p_altitude_ = 0;
}
inline double PointDesc::p_altitude() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_altitude)
  return p_altitude_;
}
inline void PointDesc::set_p_altitude(double value) {
  
  p_altitude_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_altitude)
}

// int32 p_NS = 4;
inline void PointDesc::clear_p_ns() {
  p_ns_ = 0;
}
inline ::google::protobuf::int32 PointDesc::p_ns() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_NS)
  return p_ns_;
}
inline void PointDesc::set_p_ns(::google::protobuf::int32 value) {
  
  p_ns_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_NS)
}

// int32 p_EW = 5;
inline void PointDesc::clear_p_ew() {
  p_ew_ = 0;
}
inline ::google::protobuf::int32 PointDesc::p_ew() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_EW)
  return p_ew_;
}
inline void PointDesc::set_p_ew(::google::protobuf::int32 value) {
  
  p_ew_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_EW)
}

// float p_speed = 6;
inline void PointDesc::clear_p_speed() {
  p_speed_ = 0;
}
inline float PointDesc::p_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_speed)
  return p_speed_;
}
inline void PointDesc::set_p_speed(float value) {
  
  p_speed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_speed)
}

// float p_heading = 7;
inline void PointDesc::clear_p_heading() {
  p_heading_ = 0;
}
inline float PointDesc::p_heading() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_heading)
  return p_heading_;
}
inline void PointDesc::set_p_heading(float value) {
  
  p_heading_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_heading)
}

// .nebulalink.perceptron3.Acc4Way p_accel_4way = 8;
inline bool PointDesc::has_p_accel_4way() const {
  return this != internal_default_instance() && p_accel_4way_ != NULL;
}
inline void PointDesc::clear_p_accel_4way() {
  if (GetArenaNoVirtual() == NULL && p_accel_4way_ != NULL) {
    delete p_accel_4way_;
  }
  p_accel_4way_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way& PointDesc::_internal_p_accel_4way() const {
  return *p_accel_4way_;
}
inline const ::nebulalink::perceptron3::Acc4Way& PointDesc::p_accel_4way() const {
  const ::nebulalink::perceptron3::Acc4Way* p = p_accel_4way_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_accel_4way)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way*>(
      &::nebulalink::perceptron3::_Acc4Way_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way* PointDesc::release_p_accel_4way() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PointDesc.p_accel_4way)
  
  ::nebulalink::perceptron3::Acc4Way* temp = p_accel_4way_;
  p_accel_4way_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way* PointDesc::mutable_p_accel_4way() {
  
  if (p_accel_4way_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way>(GetArenaNoVirtual());
    p_accel_4way_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PointDesc.p_accel_4way)
  return p_accel_4way_;
}
inline void PointDesc::set_allocated_p_accel_4way(::nebulalink::perceptron3::Acc4Way* p_accel_4way) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_accel_4way_;
  }
  if (p_accel_4way) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_accel_4way = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_accel_4way, submessage_arena);
    }
    
  } else {
    
  }
  p_accel_4way_ = p_accel_4way;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PointDesc.p_accel_4way)
}

// double p_dis2end = 9;
inline void PointDesc::clear_p_dis2end() {
  p_dis2end_ = 0;
}
inline double PointDesc::p_dis2end() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_dis2end)
  return p_dis2end_;
}
inline void PointDesc::set_p_dis2end(double value) {
  
  p_dis2end_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_dis2end)
}

// int64 p_up_region_node_id = 10;
inline void PointDesc::clear_p_up_region_node_id() {
  p_up_region_node_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PointDesc::p_up_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_up_region_node_id)
  return p_up_region_node_id_;
}
inline void PointDesc::set_p_up_region_node_id(::google::protobuf::int64 value) {
  
  p_up_region_node_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_up_region_node_id)
}

// int64 p_down_region_node_id = 11;
inline void PointDesc::clear_p_down_region_node_id() {
  p_down_region_node_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PointDesc::p_down_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_down_region_node_id)
  return p_down_region_node_id_;
}
inline void PointDesc::set_p_down_region_node_id(::google::protobuf::int64 value) {
  
  p_down_region_node_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_down_region_node_id)
}

// int32 p_relate_lane_id = 12;
inline void PointDesc::clear_p_relate_lane_id() {
  p_relate_lane_id_ = 0;
}
inline ::google::protobuf::int32 PointDesc::p_relate_lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_relate_lane_id)
  return p_relate_lane_id_;
}
inline void PointDesc::set_p_relate_lane_id(::google::protobuf::int32 value) {
  
  p_relate_lane_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.p_relate_lane_id)
}

// int32 satellite_num = 13;
inline void PointDesc::clear_satellite_num() {
  satellite_num_ = 0;
}
inline ::google::protobuf::int32 PointDesc::satellite_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.satellite_num)
  return satellite_num_;
}
inline void PointDesc::set_satellite_num(::google::protobuf::int32 value) {
  
  satellite_num_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.satellite_num)
}

// .nebulalink.perceptron3.PointGPS_CFD p_pos_cfd = 14;
inline bool PointDesc::has_p_pos_cfd() const {
  return this != internal_default_instance() && p_pos_cfd_ != NULL;
}
inline void PointDesc::clear_p_pos_cfd() {
  if (GetArenaNoVirtual() == NULL && p_pos_cfd_ != NULL) {
    delete p_pos_cfd_;
  }
  p_pos_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& PointDesc::_internal_p_pos_cfd() const {
  return *p_pos_cfd_;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& PointDesc::p_pos_cfd() const {
  const ::nebulalink::perceptron3::PointGPS_CFD* p = p_pos_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.p_pos_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS_CFD*>(
      &::nebulalink::perceptron3::_PointGPS_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS_CFD* PointDesc::release_p_pos_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PointDesc.p_pos_cfd)
  
  ::nebulalink::perceptron3::PointGPS_CFD* temp = p_pos_cfd_;
  p_pos_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS_CFD* PointDesc::mutable_p_pos_cfd() {
  
  if (p_pos_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS_CFD>(GetArenaNoVirtual());
    p_pos_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PointDesc.p_pos_cfd)
  return p_pos_cfd_;
}
inline void PointDesc::set_allocated_p_pos_cfd(::nebulalink::perceptron3::PointGPS_CFD* p_pos_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_pos_cfd_;
  }
  if (p_pos_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_pos_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_pos_cfd, submessage_arena);
    }
    
  } else {
    
  }
  p_pos_cfd_ = p_pos_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PointDesc.p_pos_cfd)
}

// int32 time_offset = 15;
inline void PointDesc::clear_time_offset() {
  time_offset_ = 0;
}
inline ::google::protobuf::int32 PointDesc::time_offset() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PointDesc.time_offset)
  return time_offset_;
}
inline void PointDesc::set_time_offset(::google::protobuf::int32 value) {
  
  time_offset_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PointDesc.time_offset)
}

// -------------------------------------------------------------------

// PathPoint

// .nebulalink.perceptron3.TimeBase pp_time = 1;
inline bool PathPoint::has_pp_time() const {
  return this != internal_default_instance() && pp_time_ != NULL;
}
inline void PathPoint::clear_pp_time() {
  if (GetArenaNoVirtual() == NULL && pp_time_ != NULL) {
    delete pp_time_;
  }
  pp_time_ = NULL;
}
inline const ::nebulalink::perceptron3::TimeBase& PathPoint::_internal_pp_time() const {
  return *pp_time_;
}
inline const ::nebulalink::perceptron3::TimeBase& PathPoint::pp_time() const {
  const ::nebulalink::perceptron3::TimeBase* p = pp_time_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPoint.pp_time)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TimeBase*>(
      &::nebulalink::perceptron3::_TimeBase_default_instance_);
}
inline ::nebulalink::perceptron3::TimeBase* PathPoint::release_pp_time() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PathPoint.pp_time)
  
  ::nebulalink::perceptron3::TimeBase* temp = pp_time_;
  pp_time_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TimeBase* PathPoint::mutable_pp_time() {
  
  if (pp_time_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(GetArenaNoVirtual());
    pp_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PathPoint.pp_time)
  return pp_time_;
}
inline void PathPoint::set_allocated_pp_time(::nebulalink::perceptron3::TimeBase* pp_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pp_time_;
  }
  if (pp_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pp_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pp_time, submessage_arena);
    }
    
  } else {
    
  }
  pp_time_ = pp_time;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PathPoint.pp_time)
}

// .nebulalink.perceptron3.PointDesc pp_point = 2;
inline bool PathPoint::has_pp_point() const {
  return this != internal_default_instance() && pp_point_ != NULL;
}
inline void PathPoint::clear_pp_point() {
  if (GetArenaNoVirtual() == NULL && pp_point_ != NULL) {
    delete pp_point_;
  }
  pp_point_ = NULL;
}
inline const ::nebulalink::perceptron3::PointDesc& PathPoint::_internal_pp_point() const {
  return *pp_point_;
}
inline const ::nebulalink::perceptron3::PointDesc& PathPoint::pp_point() const {
  const ::nebulalink::perceptron3::PointDesc* p = pp_point_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPoint.pp_point)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointDesc*>(
      &::nebulalink::perceptron3::_PointDesc_default_instance_);
}
inline ::nebulalink::perceptron3::PointDesc* PathPoint::release_pp_point() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PathPoint.pp_point)
  
  ::nebulalink::perceptron3::PointDesc* temp = pp_point_;
  pp_point_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointDesc* PathPoint::mutable_pp_point() {
  
  if (pp_point_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointDesc>(GetArenaNoVirtual());
    pp_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PathPoint.pp_point)
  return pp_point_;
}
inline void PathPoint::set_allocated_pp_point(::nebulalink::perceptron3::PointDesc* pp_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pp_point_;
  }
  if (pp_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pp_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pp_point, submessage_arena);
    }
    
  } else {
    
  }
  pp_point_ = pp_point;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PathPoint.pp_point)
}

// -------------------------------------------------------------------

// RelateLinkDesc_RelateLane

// int32 rtl_lane_id = 1;
inline void RelateLinkDesc_RelateLane::clear_rtl_lane_id() {
  rtl_lane_id_ = 0;
}
inline ::google::protobuf::int32 RelateLinkDesc_RelateLane::rtl_lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelateLinkDesc.RelateLane.rtl_lane_id)
  return rtl_lane_id_;
}
inline void RelateLinkDesc_RelateLane::set_rtl_lane_id(::google::protobuf::int32 value) {
  
  rtl_lane_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.RelateLinkDesc.RelateLane.rtl_lane_id)
}

// -------------------------------------------------------------------

// RelateLinkDesc

// int32 up_region_node_id = 1;
inline void RelateLinkDesc::clear_up_region_node_id() {
  up_region_node_id_ = 0;
}
inline ::google::protobuf::int32 RelateLinkDesc::up_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelateLinkDesc.up_region_node_id)
  return up_region_node_id_;
}
inline void RelateLinkDesc::set_up_region_node_id(::google::protobuf::int32 value) {
  
  up_region_node_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.RelateLinkDesc.up_region_node_id)
}

// int32 down_region_node_id = 2;
inline void RelateLinkDesc::clear_down_region_node_id() {
  down_region_node_id_ = 0;
}
inline ::google::protobuf::int32 RelateLinkDesc::down_region_node_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelateLinkDesc.down_region_node_id)
  return down_region_node_id_;
}
inline void RelateLinkDesc::set_down_region_node_id(::google::protobuf::int32 value) {
  
  down_region_node_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.RelateLinkDesc.down_region_node_id)
}

// repeated .nebulalink.perceptron3.RelateLinkDesc.RelateLane rtl_lanes = 3;
inline int RelateLinkDesc::rtl_lanes_size() const {
  return rtl_lanes_.size();
}
inline void RelateLinkDesc::clear_rtl_lanes() {
  rtl_lanes_.Clear();
}
inline ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* RelateLinkDesc::mutable_rtl_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.RelateLinkDesc.rtl_lanes)
  return rtl_lanes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >*
RelateLinkDesc::mutable_rtl_lanes() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.RelateLinkDesc.rtl_lanes)
  return &rtl_lanes_;
}
inline const ::nebulalink::perceptron3::RelateLinkDesc_RelateLane& RelateLinkDesc::rtl_lanes(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelateLinkDesc.rtl_lanes)
  return rtl_lanes_.Get(index);
}
inline ::nebulalink::perceptron3::RelateLinkDesc_RelateLane* RelateLinkDesc::add_rtl_lanes() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.RelateLinkDesc.rtl_lanes)
  return rtl_lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc_RelateLane >&
RelateLinkDesc::rtl_lanes() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.RelateLinkDesc.rtl_lanes)
  return rtl_lanes_;
}

// -------------------------------------------------------------------

// RelatePathDesc

// repeated .nebulalink.perceptron3.PointDesc rpd_pathPoint = 1;
inline int RelatePathDesc::rpd_pathpoint_size() const {
  return rpd_pathpoint_.size();
}
inline void RelatePathDesc::clear_rpd_pathpoint() {
  rpd_pathpoint_.Clear();
}
inline ::nebulalink::perceptron3::PointDesc* RelatePathDesc::mutable_rpd_pathpoint(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.RelatePathDesc.rpd_pathPoint)
  return rpd_pathpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
RelatePathDesc::mutable_rpd_pathpoint() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.RelatePathDesc.rpd_pathPoint)
  return &rpd_pathpoint_;
}
inline const ::nebulalink::perceptron3::PointDesc& RelatePathDesc::rpd_pathpoint(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelatePathDesc.rpd_pathPoint)
  return rpd_pathpoint_.Get(index);
}
inline ::nebulalink::perceptron3::PointDesc* RelatePathDesc::add_rpd_pathpoint() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.RelatePathDesc.rpd_pathPoint)
  return rpd_pathpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
RelatePathDesc::rpd_pathpoint() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.RelatePathDesc.rpd_pathPoint)
  return rpd_pathpoint_;
}

// float rpd_radius = 2;
inline void RelatePathDesc::clear_rpd_radius() {
  rpd_radius_ = 0;
}
inline float RelatePathDesc::rpd_radius() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.RelatePathDesc.rpd_radius)
  return rpd_radius_;
}
inline void RelatePathDesc::set_rpd_radius(float value) {
  
  rpd_radius_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.RelatePathDesc.rpd_radius)
}

// -------------------------------------------------------------------

// Point3

// float x = 1;
inline void Point3::clear_x() {
  x_ = 0;
}
inline float Point3::x() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point3.x)
  return x_;
}
inline void Point3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point3.x)
}

// float y = 2;
inline void Point3::clear_y() {
  y_ = 0;
}
inline float Point3::y() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point3.y)
  return y_;
}
inline void Point3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point3.y)
}

// float z = 3;
inline void Point3::clear_z() {
  z_ = 0;
}
inline float Point3::z() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point3.z)
  return z_;
}
inline void Point3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point3.z)
}

// -------------------------------------------------------------------

// Point4

// int32 camera_x = 1;
inline void Point4::clear_camera_x() {
  camera_x_ = 0;
}
inline ::google::protobuf::int32 Point4::camera_x() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point4.camera_x)
  return camera_x_;
}
inline void Point4::set_camera_x(::google::protobuf::int32 value) {
  
  camera_x_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point4.camera_x)
}

// int32 camera_y = 2;
inline void Point4::clear_camera_y() {
  camera_y_ = 0;
}
inline ::google::protobuf::int32 Point4::camera_y() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point4.camera_y)
  return camera_y_;
}
inline void Point4::set_camera_y(::google::protobuf::int32 value) {
  
  camera_y_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point4.camera_y)
}

// int32 camera_w = 3;
inline void Point4::clear_camera_w() {
  camera_w_ = 0;
}
inline ::google::protobuf::int32 Point4::camera_w() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point4.camera_w)
  return camera_w_;
}
inline void Point4::set_camera_w(::google::protobuf::int32 value) {
  
  camera_w_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point4.camera_w)
}

// int32 camera_h = 4;
inline void Point4::clear_camera_h() {
  camera_h_ = 0;
}
inline ::google::protobuf::int32 Point4::camera_h() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Point4.camera_h)
  return camera_h_;
}
inline void Point4::set_camera_h(::google::protobuf::int32 value) {
  
  camera_h_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Point4.camera_h)
}

// -------------------------------------------------------------------

// Speed3

// float speed_x = 1;
inline void Speed3::clear_speed_x() {
  speed_x_ = 0;
}
inline float Speed3::speed_x() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Speed3.speed_x)
  return speed_x_;
}
inline void Speed3::set_speed_x(float value) {
  
  speed_x_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Speed3.speed_x)
}

// float speed_y = 2;
inline void Speed3::clear_speed_y() {
  speed_y_ = 0;
}
inline float Speed3::speed_y() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Speed3.speed_y)
  return speed_y_;
}
inline void Speed3::set_speed_y(float value) {
  
  speed_y_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Speed3.speed_y)
}

// float speed_z = 3;
inline void Speed3::clear_speed_z() {
  speed_z_ = 0;
}
inline float Speed3::speed_z() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Speed3.speed_z)
  return speed_z_;
}
inline void Speed3::set_speed_z(float value) {
  
  speed_z_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Speed3.speed_z)
}

// -------------------------------------------------------------------

// Planning_PB

// int32 duration = 1;
inline void Planning_PB::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 Planning_PB::duration() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Planning_PB.duration)
  return duration_;
}
inline void Planning_PB::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Planning_PB.duration)
}

// int32 confid = 2;
inline void Planning_PB::clear_confid() {
  confid_ = 0;
}
inline ::google::protobuf::int32 Planning_PB::confid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Planning_PB.confid)
  return confid_;
}
inline void Planning_PB::set_confid(::google::protobuf::int32 value) {
  
  confid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Planning_PB.confid)
}

// string driving_behavior = 3;
inline void Planning_PB::clear_driving_behavior() {
  driving_behavior_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Planning_PB::driving_behavior() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Planning_PB.driving_behavior)
  return driving_behavior_.GetNoArena();
}
inline void Planning_PB::set_driving_behavior(const ::std::string& value) {
  
  driving_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Planning_PB.driving_behavior)
}
#if LANG_CXX11
inline void Planning_PB::set_driving_behavior(::std::string&& value) {
  
  driving_behavior_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Planning_PB.driving_behavior)
}
#endif
inline void Planning_PB::set_driving_behavior(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  driving_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Planning_PB.driving_behavior)
}
inline void Planning_PB::set_driving_behavior(const char* value, size_t size) {
  
  driving_behavior_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Planning_PB.driving_behavior)
}
inline ::std::string* Planning_PB::mutable_driving_behavior() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Planning_PB.driving_behavior)
  return driving_behavior_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Planning_PB::release_driving_behavior() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Planning_PB.driving_behavior)
  
  return driving_behavior_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Planning_PB::set_allocated_driving_behavior(::std::string* driving_behavior) {
  if (driving_behavior != NULL) {
    
  } else {
    
  }
  driving_behavior_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driving_behavior);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Planning_PB.driving_behavior)
}

// repeated .nebulalink.perceptron3.PathPlanning_PB path_planning = 4;
inline int Planning_PB::path_planning_size() const {
  return path_planning_.size();
}
inline void Planning_PB::clear_path_planning() {
  path_planning_.Clear();
}
inline ::nebulalink::perceptron3::PathPlanning_PB* Planning_PB::mutable_path_planning(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Planning_PB.path_planning)
  return path_planning_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPlanning_PB >*
Planning_PB::mutable_path_planning() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Planning_PB.path_planning)
  return &path_planning_;
}
inline const ::nebulalink::perceptron3::PathPlanning_PB& Planning_PB::path_planning(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Planning_PB.path_planning)
  return path_planning_.Get(index);
}
inline ::nebulalink::perceptron3::PathPlanning_PB* Planning_PB::add_path_planning() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Planning_PB.path_planning)
  return path_planning_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPlanning_PB >&
Planning_PB::path_planning() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Planning_PB.path_planning)
  return path_planning_;
}

// -------------------------------------------------------------------

// PathPlanning_PB

// .nebulalink.perceptron3.PointDesc pplan_pos = 1;
inline bool PathPlanning_PB::has_pplan_pos() const {
  return this != internal_default_instance() && pplan_pos_ != NULL;
}
inline void PathPlanning_PB::clear_pplan_pos() {
  if (GetArenaNoVirtual() == NULL && pplan_pos_ != NULL) {
    delete pplan_pos_;
  }
  pplan_pos_ = NULL;
}
inline const ::nebulalink::perceptron3::PointDesc& PathPlanning_PB::_internal_pplan_pos() const {
  return *pplan_pos_;
}
inline const ::nebulalink::perceptron3::PointDesc& PathPlanning_PB::pplan_pos() const {
  const ::nebulalink::perceptron3::PointDesc* p = pplan_pos_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.pplan_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointDesc*>(
      &::nebulalink::perceptron3::_PointDesc_default_instance_);
}
inline ::nebulalink::perceptron3::PointDesc* PathPlanning_PB::release_pplan_pos() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PathPlanning_PB.pplan_pos)
  
  ::nebulalink::perceptron3::PointDesc* temp = pplan_pos_;
  pplan_pos_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointDesc* PathPlanning_PB::mutable_pplan_pos() {
  
  if (pplan_pos_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointDesc>(GetArenaNoVirtual());
    pplan_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PathPlanning_PB.pplan_pos)
  return pplan_pos_;
}
inline void PathPlanning_PB::set_allocated_pplan_pos(::nebulalink::perceptron3::PointDesc* pplan_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pplan_pos_;
  }
  if (pplan_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pplan_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pplan_pos, submessage_arena);
    }
    
  } else {
    
  }
  pplan_pos_ = pplan_pos;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PathPlanning_PB.pplan_pos)
}

// float pplan_speed_cfd = 2;
inline void PathPlanning_PB::clear_pplan_speed_cfd() {
  pplan_speed_cfd_ = 0;
}
inline float PathPlanning_PB::pplan_speed_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.pplan_speed_cfd)
  return pplan_speed_cfd_;
}
inline void PathPlanning_PB::set_pplan_speed_cfd(float value) {
  
  pplan_speed_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PathPlanning_PB.pplan_speed_cfd)
}

// float pplan_heading_cfd = 3;
inline void PathPlanning_PB::clear_pplan_heading_cfd() {
  pplan_heading_cfd_ = 0;
}
inline float PathPlanning_PB::pplan_heading_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.pplan_heading_cfd)
  return pplan_heading_cfd_;
}
inline void PathPlanning_PB::set_pplan_heading_cfd(float value) {
  
  pplan_heading_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PathPlanning_PB.pplan_heading_cfd)
}

// .nebulalink.perceptron3.Acc4Way pplan_acce = 4;
inline bool PathPlanning_PB::has_pplan_acce() const {
  return this != internal_default_instance() && pplan_acce_ != NULL;
}
inline void PathPlanning_PB::clear_pplan_acce() {
  if (GetArenaNoVirtual() == NULL && pplan_acce_ != NULL) {
    delete pplan_acce_;
  }
  pplan_acce_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way& PathPlanning_PB::_internal_pplan_acce() const {
  return *pplan_acce_;
}
inline const ::nebulalink::perceptron3::Acc4Way& PathPlanning_PB::pplan_acce() const {
  const ::nebulalink::perceptron3::Acc4Way* p = pplan_acce_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.pplan_acce)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way*>(
      &::nebulalink::perceptron3::_Acc4Way_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way* PathPlanning_PB::release_pplan_acce() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PathPlanning_PB.pplan_acce)
  
  ::nebulalink::perceptron3::Acc4Way* temp = pplan_acce_;
  pplan_acce_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way* PathPlanning_PB::mutable_pplan_acce() {
  
  if (pplan_acce_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way>(GetArenaNoVirtual());
    pplan_acce_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PathPlanning_PB.pplan_acce)
  return pplan_acce_;
}
inline void PathPlanning_PB::set_allocated_pplan_acce(::nebulalink::perceptron3::Acc4Way* pplan_acce) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pplan_acce_;
  }
  if (pplan_acce) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pplan_acce = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pplan_acce, submessage_arena);
    }
    
  } else {
    
  }
  pplan_acce_ = pplan_acce;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PathPlanning_PB.pplan_acce)
}

// .nebulalink.perceptron3.Acc4Way_CFD pplan_acce_cfd = 5;
inline bool PathPlanning_PB::has_pplan_acce_cfd() const {
  return this != internal_default_instance() && pplan_acce_cfd_ != NULL;
}
inline void PathPlanning_PB::clear_pplan_acce_cfd() {
  if (GetArenaNoVirtual() == NULL && pplan_acce_cfd_ != NULL) {
    delete pplan_acce_cfd_;
  }
  pplan_acce_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way_CFD& PathPlanning_PB::_internal_pplan_acce_cfd() const {
  return *pplan_acce_cfd_;
}
inline const ::nebulalink::perceptron3::Acc4Way_CFD& PathPlanning_PB::pplan_acce_cfd() const {
  const ::nebulalink::perceptron3::Acc4Way_CFD* p = pplan_acce_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.pplan_acce_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way_CFD*>(
      &::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way_CFD* PathPlanning_PB::release_pplan_acce_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PathPlanning_PB.pplan_acce_cfd)
  
  ::nebulalink::perceptron3::Acc4Way_CFD* temp = pplan_acce_cfd_;
  pplan_acce_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way_CFD* PathPlanning_PB::mutable_pplan_acce_cfd() {
  
  if (pplan_acce_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way_CFD>(GetArenaNoVirtual());
    pplan_acce_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PathPlanning_PB.pplan_acce_cfd)
  return pplan_acce_cfd_;
}
inline void PathPlanning_PB::set_allocated_pplan_acce_cfd(::nebulalink::perceptron3::Acc4Way_CFD* pplan_acce_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pplan_acce_cfd_;
  }
  if (pplan_acce_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pplan_acce_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pplan_acce_cfd, submessage_arena);
    }
    
  } else {
    
  }
  pplan_acce_cfd_ = pplan_acce_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PathPlanning_PB.pplan_acce_cfd)
}

// int32 estimated_time = 6;
inline void PathPlanning_PB::clear_estimated_time() {
  estimated_time_ = 0;
}
inline ::google::protobuf::int32 PathPlanning_PB::estimated_time() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.estimated_time)
  return estimated_time_;
}
inline void PathPlanning_PB::set_estimated_time(::google::protobuf::int32 value) {
  
  estimated_time_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PathPlanning_PB.estimated_time)
}

// int32 time_confidence = 7;
inline void PathPlanning_PB::clear_time_confidence() {
  time_confidence_ = 0;
}
inline ::google::protobuf::int32 PathPlanning_PB::time_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PathPlanning_PB.time_confidence)
  return time_confidence_;
}
inline void PathPlanning_PB::set_time_confidence(::google::protobuf::int32 value) {
  
  time_confidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PathPlanning_PB.time_confidence)
}

// -------------------------------------------------------------------

// InfoEndLineValues

// -------------------------------------------------------------------

// InfoEntreLineValues

// -------------------------------------------------------------------

// OnLineValues

// int32 cycleid = 1;
inline void OnLineValues::clear_cycleid() {
  cycleid_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cycleid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cycleid)
  return cycleid_;
}
inline void OnLineValues::set_cycleid(::google::protobuf::int32 value) {
  
  cycleid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cycleid)
}

// .nebulalink.perceptron3.PointGPS pos = 2;
inline bool OnLineValues::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void OnLineValues::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS& OnLineValues::_internal_pos() const {
  return *pos_;
}
inline const ::nebulalink::perceptron3::PointGPS& OnLineValues::pos() const {
  const ::nebulalink::perceptron3::PointGPS* p = pos_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS*>(
      &::nebulalink::perceptron3::_PointGPS_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS* OnLineValues::release_pos() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.OnLineValues.pos)
  
  ::nebulalink::perceptron3::PointGPS* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS* OnLineValues::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.OnLineValues.pos)
  return pos_;
}
inline void OnLineValues::set_allocated_pos(::nebulalink::perceptron3::PointGPS* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.OnLineValues.pos)
}

// int32 vehnum = 3;
inline void OnLineValues::clear_vehnum() {
  vehnum_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::vehnum() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.vehnum)
  return vehnum_;
}
inline void OnLineValues::set_vehnum(::google::protobuf::int32 value) {
  
  vehnum_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.vehnum)
}

// float avgSpeed = 4;
inline void OnLineValues::clear_avgspeed() {
  avgspeed_ = 0;
}
inline float OnLineValues::avgspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.avgSpeed)
  return avgspeed_;
}
inline void OnLineValues::set_avgspeed(float value) {
  
  avgspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.avgSpeed)
}

// string cross_name = 5;
inline void OnLineValues::clear_cross_name() {
  cross_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnLineValues::cross_name() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_name)
  return cross_name_.GetNoArena();
}
inline void OnLineValues::set_cross_name(const ::std::string& value) {
  
  cross_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_name)
}
#if LANG_CXX11
inline void OnLineValues::set_cross_name(::std::string&& value) {
  
  cross_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.OnLineValues.cross_name)
}
#endif
inline void OnLineValues::set_cross_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cross_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.OnLineValues.cross_name)
}
inline void OnLineValues::set_cross_name(const char* value, size_t size) {
  
  cross_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.OnLineValues.cross_name)
}
inline ::std::string* OnLineValues::mutable_cross_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.OnLineValues.cross_name)
  return cross_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnLineValues::release_cross_name() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.OnLineValues.cross_name)
  
  return cross_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnLineValues::set_allocated_cross_name(::std::string* cross_name) {
  if (cross_name != NULL) {
    
  } else {
    
  }
  cross_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cross_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.OnLineValues.cross_name)
}

// int32 cross_laneno = 6;
inline void OnLineValues::clear_cross_laneno() {
  cross_laneno_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_laneno() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_laneno)
  return cross_laneno_;
}
inline void OnLineValues::set_cross_laneno(::google::protobuf::int32 value) {
  
  cross_laneno_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_laneno)
}

// int32 cross_volume = 7;
inline void OnLineValues::clear_cross_volume() {
  cross_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_volume)
  return cross_volume_;
}
inline void OnLineValues::set_cross_volume(::google::protobuf::int32 value) {
  
  cross_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_volume)
}

// int32 cross_peron_volume = 8;
inline void OnLineValues::clear_cross_peron_volume() {
  cross_peron_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_peron_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_peron_volume)
  return cross_peron_volume_;
}
inline void OnLineValues::set_cross_peron_volume(::google::protobuf::int32 value) {
  
  cross_peron_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_peron_volume)
}

// int32 cross_no_motor_volume = 9;
inline void OnLineValues::clear_cross_no_motor_volume() {
  cross_no_motor_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_no_motor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_no_motor_volume)
  return cross_no_motor_volume_;
}
inline void OnLineValues::set_cross_no_motor_volume(::google::protobuf::int32 value) {
  
  cross_no_motor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_no_motor_volume)
}

// int32 cross_minmotor_volume = 10;
inline void OnLineValues::clear_cross_minmotor_volume() {
  cross_minmotor_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_minmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_minmotor_volume)
  return cross_minmotor_volume_;
}
inline void OnLineValues::set_cross_minmotor_volume(::google::protobuf::int32 value) {
  
  cross_minmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_minmotor_volume)
}

// int32 cross_medmotor_volume = 11;
inline void OnLineValues::clear_cross_medmotor_volume() {
  cross_medmotor_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_medmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_medmotor_volume)
  return cross_medmotor_volume_;
}
inline void OnLineValues::set_cross_medmotor_volume(::google::protobuf::int32 value) {
  
  cross_medmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_medmotor_volume)
}

// int32 cross_maxmotor_volume = 12;
inline void OnLineValues::clear_cross_maxmotor_volume() {
  cross_maxmotor_volume_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_maxmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_maxmotor_volume)
  return cross_maxmotor_volume_;
}
inline void OnLineValues::set_cross_maxmotor_volume(::google::protobuf::int32 value) {
  
  cross_maxmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_maxmotor_volume)
}

// int32 cross_pcu = 13;
inline void OnLineValues::clear_cross_pcu() {
  cross_pcu_ = 0;
}
inline ::google::protobuf::int32 OnLineValues::cross_pcu() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_pcu)
  return cross_pcu_;
}
inline void OnLineValues::set_cross_pcu(::google::protobuf::int32 value) {
  
  cross_pcu_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_pcu)
}

// float cross_avspeed = 14;
inline void OnLineValues::clear_cross_avspeed() {
  cross_avspeed_ = 0;
}
inline float OnLineValues::cross_avspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_avspeed)
  return cross_avspeed_;
}
inline void OnLineValues::set_cross_avspeed(float value) {
  
  cross_avspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_avspeed)
}

// float cross_time_occupany = 15;
inline void OnLineValues::clear_cross_time_occupany() {
  cross_time_occupany_ = 0;
}
inline float OnLineValues::cross_time_occupany() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_time_occupany)
  return cross_time_occupany_;
}
inline void OnLineValues::set_cross_time_occupany(float value) {
  
  cross_time_occupany_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_time_occupany)
}

// float cross_headway = 16;
inline void OnLineValues::clear_cross_headway() {
  cross_headway_ = 0;
}
inline float OnLineValues::cross_headway() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_headway)
  return cross_headway_;
}
inline void OnLineValues::set_cross_headway(float value) {
  
  cross_headway_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_headway)
}

// float cross_gap = 17;
inline void OnLineValues::clear_cross_gap() {
  cross_gap_ = 0;
}
inline float OnLineValues::cross_gap() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_gap)
  return cross_gap_;
}
inline void OnLineValues::set_cross_gap(float value) {
  
  cross_gap_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_gap)
}

// float cross_avdistance = 18;
inline void OnLineValues::clear_cross_avdistance() {
  cross_avdistance_ = 0;
}
inline float OnLineValues::cross_avdistance() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_avdistance)
  return cross_avdistance_;
}
inline void OnLineValues::set_cross_avdistance(float value) {
  
  cross_avdistance_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_avdistance)
}

// float cross_avstop = 19;
inline void OnLineValues::clear_cross_avstop() {
  cross_avstop_ = 0;
}
inline float OnLineValues::cross_avstop() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_avstop)
  return cross_avstop_;
}
inline void OnLineValues::set_cross_avstop(float value) {
  
  cross_avstop_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_avstop)
}

// float cross_speed85 = 20;
inline void OnLineValues::clear_cross_speed85() {
  cross_speed85_ = 0;
}
inline float OnLineValues::cross_speed85() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_speed85)
  return cross_speed85_;
}
inline void OnLineValues::set_cross_speed85(float value) {
  
  cross_speed85_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_speed85)
}

// float cross_queueLength = 21;
inline void OnLineValues::clear_cross_queuelength() {
  cross_queuelength_ = 0;
}
inline float OnLineValues::cross_queuelength() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_queueLength)
  return cross_queuelength_;
}
inline void OnLineValues::set_cross_queuelength(float value) {
  
  cross_queuelength_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_queueLength)
}

// float cross_stopline = 22;
inline void OnLineValues::clear_cross_stopline() {
  cross_stopline_ = 0;
}
inline float OnLineValues::cross_stopline() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_stopline)
  return cross_stopline_;
}
inline void OnLineValues::set_cross_stopline(float value) {
  
  cross_stopline_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_stopline)
}

// float cross_space_occupany = 23;
inline void OnLineValues::clear_cross_space_occupany() {
  cross_space_occupany_ = 0;
}
inline float OnLineValues::cross_space_occupany() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.cross_space_occupany)
  return cross_space_occupany_;
}
inline void OnLineValues::set_cross_space_occupany(float value) {
  
  cross_space_occupany_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.OnLineValues.cross_space_occupany)
}

// repeated .nebulalink.perceptron3.LinkJamSenseParams road_linklist = 24;
inline int OnLineValues::road_linklist_size() const {
  return road_linklist_.size();
}
inline void OnLineValues::clear_road_linklist() {
  road_linklist_.Clear();
}
inline ::nebulalink::perceptron3::LinkJamSenseParams* OnLineValues::mutable_road_linklist(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.OnLineValues.road_linklist)
  return road_linklist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >*
OnLineValues::mutable_road_linklist() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.OnLineValues.road_linklist)
  return &road_linklist_;
}
inline const ::nebulalink::perceptron3::LinkJamSenseParams& OnLineValues::road_linklist(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.OnLineValues.road_linklist)
  return road_linklist_.Get(index);
}
inline ::nebulalink::perceptron3::LinkJamSenseParams* OnLineValues::add_road_linklist() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.OnLineValues.road_linklist)
  return road_linklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >&
OnLineValues::road_linklist() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.OnLineValues.road_linklist)
  return road_linklist_;
}

// -------------------------------------------------------------------

// FrameArray

// repeated .nebulalink.perceptron3.Perceptron perceptron = 1;
inline int FrameArray::perceptron_size() const {
  return perceptron_.size();
}
inline void FrameArray::clear_perceptron() {
  perceptron_.Clear();
}
inline ::nebulalink::perceptron3::Perceptron* FrameArray::mutable_perceptron(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.FrameArray.perceptron)
  return perceptron_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >*
FrameArray::mutable_perceptron() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.FrameArray.perceptron)
  return &perceptron_;
}
inline const ::nebulalink::perceptron3::Perceptron& FrameArray::perceptron(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.FrameArray.perceptron)
  return perceptron_.Get(index);
}
inline ::nebulalink::perceptron3::Perceptron* FrameArray::add_perceptron() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.FrameArray.perceptron)
  return perceptron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >&
FrameArray::perceptron() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.FrameArray.perceptron)
  return perceptron_;
}

// -------------------------------------------------------------------

// Nebulalink_Extend

// string version = 1;
inline void Nebulalink_Extend::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Nebulalink_Extend::version() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Nebulalink_Extend.version)
  return version_.GetNoArena();
}
inline void Nebulalink_Extend::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Nebulalink_Extend.version)
}
#if LANG_CXX11
inline void Nebulalink_Extend::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Nebulalink_Extend.version)
}
#endif
inline void Nebulalink_Extend::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Nebulalink_Extend.version)
}
inline void Nebulalink_Extend::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Nebulalink_Extend.version)
}
inline ::std::string* Nebulalink_Extend::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Nebulalink_Extend.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Nebulalink_Extend::release_version() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Nebulalink_Extend.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Nebulalink_Extend::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Nebulalink_Extend.version)
}

// repeated float feature = 2;
inline int Nebulalink_Extend::feature_size() const {
  return feature_.size();
}
inline void Nebulalink_Extend::clear_feature() {
  feature_.Clear();
}
inline float Nebulalink_Extend::feature(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Nebulalink_Extend.feature)
  return feature_.Get(index);
}
inline void Nebulalink_Extend::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Nebulalink_Extend.feature)
}
inline void Nebulalink_Extend::add_feature(float value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Nebulalink_Extend.feature)
}
inline const ::google::protobuf::RepeatedField< float >&
Nebulalink_Extend::feature() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Nebulalink_Extend.feature)
  return feature_;
}
inline ::google::protobuf::RepeatedField< float >*
Nebulalink_Extend::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Nebulalink_Extend.feature)
  return &feature_;
}

// -------------------------------------------------------------------

// V2XOBUs

// .nebulalink.perceptron3.PointDesc obu_point = 1;
inline bool V2XOBUs::has_obu_point() const {
  return this != internal_default_instance() && obu_point_ != NULL;
}
inline void V2XOBUs::clear_obu_point() {
  if (GetArenaNoVirtual() == NULL && obu_point_ != NULL) {
    delete obu_point_;
  }
  obu_point_ = NULL;
}
inline const ::nebulalink::perceptron3::PointDesc& V2XOBUs::_internal_obu_point() const {
  return *obu_point_;
}
inline const ::nebulalink::perceptron3::PointDesc& V2XOBUs::obu_point() const {
  const ::nebulalink::perceptron3::PointDesc* p = obu_point_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_point)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointDesc*>(
      &::nebulalink::perceptron3::_PointDesc_default_instance_);
}
inline ::nebulalink::perceptron3::PointDesc* V2XOBUs::release_obu_point() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.V2XOBUs.obu_point)
  
  ::nebulalink::perceptron3::PointDesc* temp = obu_point_;
  obu_point_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointDesc* V2XOBUs::mutable_obu_point() {
  
  if (obu_point_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointDesc>(GetArenaNoVirtual());
    obu_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.V2XOBUs.obu_point)
  return obu_point_;
}
inline void V2XOBUs::set_allocated_obu_point(::nebulalink::perceptron3::PointDesc* obu_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obu_point_;
  }
  if (obu_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obu_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obu_point, submessage_arena);
    }
    
  } else {
    
  }
  obu_point_ = obu_point;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.V2XOBUs.obu_point)
}

// float obu_wheel_angle = 2;
inline void V2XOBUs::clear_obu_wheel_angle() {
  obu_wheel_angle_ = 0;
}
inline float V2XOBUs::obu_wheel_angle() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_wheel_angle)
  return obu_wheel_angle_;
}
inline void V2XOBUs::set_obu_wheel_angle(float value) {
  
  obu_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_wheel_angle)
}

// int64 obu_time_stamp = 3;
inline void V2XOBUs::clear_obu_time_stamp() {
  obu_time_stamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 V2XOBUs::obu_time_stamp() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_time_stamp)
  return obu_time_stamp_;
}
inline void V2XOBUs::set_obu_time_stamp(::google::protobuf::int64 value) {
  
  obu_time_stamp_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_time_stamp)
}

// int32 obu_veh_type = 4;
inline void V2XOBUs::clear_obu_veh_type() {
  obu_veh_type_ = 0;
}
inline ::google::protobuf::int32 V2XOBUs::obu_veh_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_veh_type)
  return obu_veh_type_;
}
inline void V2XOBUs::set_obu_veh_type(::google::protobuf::int32 value) {
  
  obu_veh_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_veh_type)
}

// int32 obu_fuel_type = 5;
inline void V2XOBUs::clear_obu_fuel_type() {
  obu_fuel_type_ = 0;
}
inline ::google::protobuf::int32 V2XOBUs::obu_fuel_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_fuel_type)
  return obu_fuel_type_;
}
inline void V2XOBUs::set_obu_fuel_type(::google::protobuf::int32 value) {
  
  obu_fuel_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_fuel_type)
}

// int32 obu_light = 6;
inline void V2XOBUs::clear_obu_light() {
  obu_light_ = 0;
}
inline ::google::protobuf::int32 V2XOBUs::obu_light() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_light)
  return obu_light_;
}
inline void V2XOBUs::set_obu_light(::google::protobuf::int32 value) {
  
  obu_light_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_light)
}

// int32 obu_brake_state = 7;
inline void V2XOBUs::clear_obu_brake_state() {
  obu_brake_state_ = 0;
}
inline ::google::protobuf::int32 V2XOBUs::obu_brake_state() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_brake_state)
  return obu_brake_state_;
}
inline void V2XOBUs::set_obu_brake_state(::google::protobuf::int32 value) {
  
  obu_brake_state_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_brake_state)
}

// int32 obu_veh_state = 8;
inline void V2XOBUs::clear_obu_veh_state() {
  obu_veh_state_ = 0;
}
inline ::google::protobuf::int32 V2XOBUs::obu_veh_state() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_veh_state)
  return obu_veh_state_;
}
inline void V2XOBUs::set_obu_veh_state(::google::protobuf::int32 value) {
  
  obu_veh_state_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_veh_state)
}

// float obu_cfd = 9;
inline void V2XOBUs::clear_obu_cfd() {
  obu_cfd_ = 0;
}
inline float V2XOBUs::obu_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_cfd)
  return obu_cfd_;
}
inline void V2XOBUs::set_obu_cfd(float value) {
  
  obu_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_cfd)
}

// .nebulalink.perceptron3.TargetSize obu_size = 10;
inline bool V2XOBUs::has_obu_size() const {
  return this != internal_default_instance() && obu_size_ != NULL;
}
inline void V2XOBUs::clear_obu_size() {
  if (GetArenaNoVirtual() == NULL && obu_size_ != NULL) {
    delete obu_size_;
  }
  obu_size_ = NULL;
}
inline const ::nebulalink::perceptron3::TargetSize& V2XOBUs::_internal_obu_size() const {
  return *obu_size_;
}
inline const ::nebulalink::perceptron3::TargetSize& V2XOBUs::obu_size() const {
  const ::nebulalink::perceptron3::TargetSize* p = obu_size_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_size)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TargetSize*>(
      &::nebulalink::perceptron3::_TargetSize_default_instance_);
}
inline ::nebulalink::perceptron3::TargetSize* V2XOBUs::release_obu_size() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.V2XOBUs.obu_size)
  
  ::nebulalink::perceptron3::TargetSize* temp = obu_size_;
  obu_size_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TargetSize* V2XOBUs::mutable_obu_size() {
  
  if (obu_size_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TargetSize>(GetArenaNoVirtual());
    obu_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.V2XOBUs.obu_size)
  return obu_size_;
}
inline void V2XOBUs::set_allocated_obu_size(::nebulalink::perceptron3::TargetSize* obu_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obu_size_;
  }
  if (obu_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obu_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obu_size, submessage_arena);
    }
    
  } else {
    
  }
  obu_size_ = obu_size;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.V2XOBUs.obu_size)
}

// bytes obu_platenum = 11;
inline void V2XOBUs::clear_obu_platenum() {
  obu_platenum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& V2XOBUs::obu_platenum() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_platenum)
  return obu_platenum_.GetNoArena();
}
inline void V2XOBUs::set_obu_platenum(const ::std::string& value) {
  
  obu_platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_platenum)
}
#if LANG_CXX11
inline void V2XOBUs::set_obu_platenum(::std::string&& value) {
  
  obu_platenum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.V2XOBUs.obu_platenum)
}
#endif
inline void V2XOBUs::set_obu_platenum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obu_platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.V2XOBUs.obu_platenum)
}
inline void V2XOBUs::set_obu_platenum(const void* value, size_t size) {
  
  obu_platenum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.V2XOBUs.obu_platenum)
}
inline ::std::string* V2XOBUs::mutable_obu_platenum() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.V2XOBUs.obu_platenum)
  return obu_platenum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V2XOBUs::release_obu_platenum() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.V2XOBUs.obu_platenum)
  
  return obu_platenum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V2XOBUs::set_allocated_obu_platenum(::std::string* obu_platenum) {
  if (obu_platenum != NULL) {
    
  } else {
    
  }
  obu_platenum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obu_platenum);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.V2XOBUs.obu_platenum)
}

// string obu_deviceid = 12;
inline void V2XOBUs::clear_obu_deviceid() {
  obu_deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& V2XOBUs::obu_deviceid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
  return obu_deviceid_.GetNoArena();
}
inline void V2XOBUs::set_obu_deviceid(const ::std::string& value) {
  
  obu_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
}
#if LANG_CXX11
inline void V2XOBUs::set_obu_deviceid(::std::string&& value) {
  
  obu_deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
}
#endif
inline void V2XOBUs::set_obu_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obu_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
}
inline void V2XOBUs::set_obu_deviceid(const char* value, size_t size) {
  
  obu_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
}
inline ::std::string* V2XOBUs::mutable_obu_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
  return obu_deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V2XOBUs::release_obu_deviceid() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
  
  return obu_deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V2XOBUs::set_allocated_obu_deviceid(::std::string* obu_deviceid) {
  if (obu_deviceid != NULL) {
    
  } else {
    
  }
  obu_deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obu_deviceid);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.V2XOBUs.obu_deviceid)
}

// -------------------------------------------------------------------

// DetectorRegion

// repeated .nebulalink.perceptron3.PointDesc polygonPoint = 1;
inline int DetectorRegion::polygonpoint_size() const {
  return polygonpoint_.size();
}
inline void DetectorRegion::clear_polygonpoint() {
  polygonpoint_.Clear();
}
inline ::nebulalink::perceptron3::PointDesc* DetectorRegion::mutable_polygonpoint(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.DetectorRegion.polygonPoint)
  return polygonpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
DetectorRegion::mutable_polygonpoint() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.DetectorRegion.polygonPoint)
  return &polygonpoint_;
}
inline const ::nebulalink::perceptron3::PointDesc& DetectorRegion::polygonpoint(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.DetectorRegion.polygonPoint)
  return polygonpoint_.Get(index);
}
inline ::nebulalink::perceptron3::PointDesc* DetectorRegion::add_polygonpoint() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.DetectorRegion.polygonPoint)
  return polygonpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
DetectorRegion::polygonpoint() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.DetectorRegion.polygonPoint)
  return polygonpoint_;
}

// -------------------------------------------------------------------

// Perceptron

// bool is_tracker = 1;
inline void Perceptron::clear_is_tracker() {
  is_tracker_ = false;
}
inline bool Perceptron::is_tracker() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.is_tracker)
  return is_tracker_;
}
inline void Perceptron::set_is_tracker(bool value) {
  
  is_tracker_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.is_tracker)
}

// float object_confidence = 2;
inline void Perceptron::clear_object_confidence() {
  object_confidence_ = 0;
}
inline float Perceptron::object_confidence() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_confidence)
  return object_confidence_;
}
inline void Perceptron::set_object_confidence(float value) {
  
  object_confidence_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_confidence)
}

// string lane_id = 3;
inline void Perceptron::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perceptron::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.lane_id)
  return lane_id_.GetNoArena();
}
inline void Perceptron::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.lane_id)
}
#if LANG_CXX11
inline void Perceptron::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Perceptron.lane_id)
}
#endif
inline void Perceptron::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Perceptron.lane_id)
}
inline void Perceptron::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Perceptron.lane_id)
}
inline ::std::string* Perceptron::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perceptron::release_lane_id() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perceptron::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.lane_id)
}

// int32 object_class_type = 4;
inline void Perceptron::clear_object_class_type() {
  object_class_type_ = 0;
}
inline ::google::protobuf::int32 Perceptron::object_class_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_class_type)
  return object_class_type_;
}
inline void Perceptron::set_object_class_type(::google::protobuf::int32 value) {
  
  object_class_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_class_type)
}

// int32 object_id = 5;
inline void Perceptron::clear_object_id() {
  object_id_ = 0;
}
inline ::google::protobuf::int32 Perceptron::object_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_id)
  return object_id_;
}
inline void Perceptron::set_object_id(::google::protobuf::int32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_id)
}

// .nebulalink.perceptron3.Point3 point3f = 6;
inline bool Perceptron::has_point3f() const {
  return this != internal_default_instance() && point3f_ != NULL;
}
inline void Perceptron::clear_point3f() {
  if (GetArenaNoVirtual() == NULL && point3f_ != NULL) {
    delete point3f_;
  }
  point3f_ = NULL;
}
inline const ::nebulalink::perceptron3::Point3& Perceptron::_internal_point3f() const {
  return *point3f_;
}
inline const ::nebulalink::perceptron3::Point3& Perceptron::point3f() const {
  const ::nebulalink::perceptron3::Point3* p = point3f_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.point3f)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Point3*>(
      &::nebulalink::perceptron3::_Point3_default_instance_);
}
inline ::nebulalink::perceptron3::Point3* Perceptron::release_point3f() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.point3f)
  
  ::nebulalink::perceptron3::Point3* temp = point3f_;
  point3f_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Point3* Perceptron::mutable_point3f() {
  
  if (point3f_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Point3>(GetArenaNoVirtual());
    point3f_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.point3f)
  return point3f_;
}
inline void Perceptron::set_allocated_point3f(::nebulalink::perceptron3::Point3* point3f) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point3f_;
  }
  if (point3f) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point3f = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point3f, submessage_arena);
    }
    
  } else {
    
  }
  point3f_ = point3f;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.point3f)
}

// .nebulalink.perceptron3.Point4 point4f = 7;
inline bool Perceptron::has_point4f() const {
  return this != internal_default_instance() && point4f_ != NULL;
}
inline void Perceptron::clear_point4f() {
  if (GetArenaNoVirtual() == NULL && point4f_ != NULL) {
    delete point4f_;
  }
  point4f_ = NULL;
}
inline const ::nebulalink::perceptron3::Point4& Perceptron::_internal_point4f() const {
  return *point4f_;
}
inline const ::nebulalink::perceptron3::Point4& Perceptron::point4f() const {
  const ::nebulalink::perceptron3::Point4* p = point4f_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.point4f)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Point4*>(
      &::nebulalink::perceptron3::_Point4_default_instance_);
}
inline ::nebulalink::perceptron3::Point4* Perceptron::release_point4f() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.point4f)
  
  ::nebulalink::perceptron3::Point4* temp = point4f_;
  point4f_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Point4* Perceptron::mutable_point4f() {
  
  if (point4f_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Point4>(GetArenaNoVirtual());
    point4f_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.point4f)
  return point4f_;
}
inline void Perceptron::set_allocated_point4f(::nebulalink::perceptron3::Point4* point4f) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point4f_;
  }
  if (point4f) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point4f = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point4f, submessage_arena);
    }
    
  } else {
    
  }
  point4f_ = point4f;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.point4f)
}

// float object_speed = 8;
inline void Perceptron::clear_object_speed() {
  object_speed_ = 0;
}
inline float Perceptron::object_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_speed)
  return object_speed_;
}
inline void Perceptron::set_object_speed(float value) {
  
  object_speed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_speed)
}

// .nebulalink.perceptron3.Speed3 speed3f = 9;
inline bool Perceptron::has_speed3f() const {
  return this != internal_default_instance() && speed3f_ != NULL;
}
inline void Perceptron::clear_speed3f() {
  if (GetArenaNoVirtual() == NULL && speed3f_ != NULL) {
    delete speed3f_;
  }
  speed3f_ = NULL;
}
inline const ::nebulalink::perceptron3::Speed3& Perceptron::_internal_speed3f() const {
  return *speed3f_;
}
inline const ::nebulalink::perceptron3::Speed3& Perceptron::speed3f() const {
  const ::nebulalink::perceptron3::Speed3* p = speed3f_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.speed3f)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Speed3*>(
      &::nebulalink::perceptron3::_Speed3_default_instance_);
}
inline ::nebulalink::perceptron3::Speed3* Perceptron::release_speed3f() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.speed3f)
  
  ::nebulalink::perceptron3::Speed3* temp = speed3f_;
  speed3f_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Speed3* Perceptron::mutable_speed3f() {
  
  if (speed3f_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Speed3>(GetArenaNoVirtual());
    speed3f_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.speed3f)
  return speed3f_;
}
inline void Perceptron::set_allocated_speed3f(::nebulalink::perceptron3::Speed3* speed3f) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed3f_;
  }
  if (speed3f) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed3f = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed3f, submessage_arena);
    }
    
  } else {
    
  }
  speed3f_ = speed3f;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.speed3f)
}

// float object_acceleration = 10;
inline void Perceptron::clear_object_acceleration() {
  object_acceleration_ = 0;
}
inline float Perceptron::object_acceleration() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_acceleration)
  return object_acceleration_;
}
inline void Perceptron::set_object_acceleration(float value) {
  
  object_acceleration_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_acceleration)
}

// .nebulalink.perceptron3.TargetSize target_size = 11;
inline bool Perceptron::has_target_size() const {
  return this != internal_default_instance() && target_size_ != NULL;
}
inline void Perceptron::clear_target_size() {
  if (GetArenaNoVirtual() == NULL && target_size_ != NULL) {
    delete target_size_;
  }
  target_size_ = NULL;
}
inline const ::nebulalink::perceptron3::TargetSize& Perceptron::_internal_target_size() const {
  return *target_size_;
}
inline const ::nebulalink::perceptron3::TargetSize& Perceptron::target_size() const {
  const ::nebulalink::perceptron3::TargetSize* p = target_size_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.target_size)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TargetSize*>(
      &::nebulalink::perceptron3::_TargetSize_default_instance_);
}
inline ::nebulalink::perceptron3::TargetSize* Perceptron::release_target_size() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.target_size)
  
  ::nebulalink::perceptron3::TargetSize* temp = target_size_;
  target_size_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TargetSize* Perceptron::mutable_target_size() {
  
  if (target_size_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TargetSize>(GetArenaNoVirtual());
    target_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.target_size)
  return target_size_;
}
inline void Perceptron::set_allocated_target_size(::nebulalink::perceptron3::TargetSize* target_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_size_;
  }
  if (target_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_size, submessage_arena);
    }
    
  } else {
    
  }
  target_size_ = target_size;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.target_size)
}

// .nebulalink.perceptron3.PointGPS point_gps = 12;
inline bool Perceptron::has_point_gps() const {
  return this != internal_default_instance() && point_gps_ != NULL;
}
inline void Perceptron::clear_point_gps() {
  if (GetArenaNoVirtual() == NULL && point_gps_ != NULL) {
    delete point_gps_;
  }
  point_gps_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS& Perceptron::_internal_point_gps() const {
  return *point_gps_;
}
inline const ::nebulalink::perceptron3::PointGPS& Perceptron::point_gps() const {
  const ::nebulalink::perceptron3::PointGPS* p = point_gps_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.point_gps)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS*>(
      &::nebulalink::perceptron3::_PointGPS_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS* Perceptron::release_point_gps() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.point_gps)
  
  ::nebulalink::perceptron3::PointGPS* temp = point_gps_;
  point_gps_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS* Perceptron::mutable_point_gps() {
  
  if (point_gps_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(GetArenaNoVirtual());
    point_gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.point_gps)
  return point_gps_;
}
inline void Perceptron::set_allocated_point_gps(::nebulalink::perceptron3::PointGPS* point_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_gps_;
  }
  if (point_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point_gps, submessage_arena);
    }
    
  } else {
    
  }
  point_gps_ = point_gps;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.point_gps)
}

// int32 object_NS = 13;
inline void Perceptron::clear_object_ns() {
  object_ns_ = 0;
}
inline ::google::protobuf::int32 Perceptron::object_ns() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_NS)
  return object_ns_;
}
inline void Perceptron::set_object_ns(::google::protobuf::int32 value) {
  
  object_ns_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_NS)
}

// int32 object_WE = 14;
inline void Perceptron::clear_object_we() {
  object_we_ = 0;
}
inline ::google::protobuf::int32 Perceptron::object_we() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_WE)
  return object_we_;
}
inline void Perceptron::set_object_we(::google::protobuf::int32 value) {
  
  object_we_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_WE)
}

// float object_direction = 15;
inline void Perceptron::clear_object_direction() {
  object_direction_ = 0;
}
inline float Perceptron::object_direction() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_direction)
  return object_direction_;
}
inline void Perceptron::set_object_direction(float value) {
  
  object_direction_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_direction)
}

// float object_heading = 16;
inline void Perceptron::clear_object_heading() {
  object_heading_ = 0;
}
inline float Perceptron::object_heading() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.object_heading)
  return object_heading_;
}
inline void Perceptron::set_object_heading(float value) {
  
  object_heading_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.object_heading)
}

// int32 is_head_tail = 17;
inline void Perceptron::clear_is_head_tail() {
  is_head_tail_ = 0;
}
inline ::google::protobuf::int32 Perceptron::is_head_tail() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.is_head_tail)
  return is_head_tail_;
}
inline void Perceptron::set_is_head_tail(::google::protobuf::int32 value) {
  
  is_head_tail_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.is_head_tail)
}

// int32 lane_type = 18;
inline void Perceptron::clear_lane_type() {
  lane_type_ = 0;
}
inline ::google::protobuf::int32 Perceptron::lane_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.lane_type)
  return lane_type_;
}
inline void Perceptron::set_lane_type(::google::protobuf::int32 value) {
  
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.lane_type)
}

// bytes plate_num = 19;
inline void Perceptron::clear_plate_num() {
  plate_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perceptron::plate_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.plate_num)
  return plate_num_.GetNoArena();
}
inline void Perceptron::set_plate_num(const ::std::string& value) {
  
  plate_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.plate_num)
}
#if LANG_CXX11
inline void Perceptron::set_plate_num(::std::string&& value) {
  
  plate_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Perceptron.plate_num)
}
#endif
inline void Perceptron::set_plate_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plate_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Perceptron.plate_num)
}
inline void Perceptron::set_plate_num(const void* value, size_t size) {
  
  plate_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Perceptron.plate_num)
}
inline ::std::string* Perceptron::mutable_plate_num() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.plate_num)
  return plate_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perceptron::release_plate_num() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.plate_num)
  
  return plate_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perceptron::set_allocated_plate_num(::std::string* plate_num) {
  if (plate_num != NULL) {
    
  } else {
    
  }
  plate_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plate_num);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.plate_num)
}

// string objects_identity = 20;
inline void Perceptron::clear_objects_identity() {
  objects_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perceptron::objects_identity() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.objects_identity)
  return objects_identity_.GetNoArena();
}
inline void Perceptron::set_objects_identity(const ::std::string& value) {
  
  objects_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.objects_identity)
}
#if LANG_CXX11
inline void Perceptron::set_objects_identity(::std::string&& value) {
  
  objects_identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Perceptron.objects_identity)
}
#endif
inline void Perceptron::set_objects_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  objects_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Perceptron.objects_identity)
}
inline void Perceptron::set_objects_identity(const char* value, size_t size) {
  
  objects_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Perceptron.objects_identity)
}
inline ::std::string* Perceptron::mutable_objects_identity() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.objects_identity)
  return objects_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perceptron::release_objects_identity() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.objects_identity)
  
  return objects_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perceptron::set_allocated_objects_identity(::std::string* objects_identity) {
  if (objects_identity != NULL) {
    
  } else {
    
  }
  objects_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objects_identity);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.objects_identity)
}

// int32 fuel_type = 21;
inline void Perceptron::clear_fuel_type() {
  fuel_type_ = 0;
}
inline ::google::protobuf::int32 Perceptron::fuel_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.fuel_type)
  return fuel_type_;
}
inline void Perceptron::set_fuel_type(::google::protobuf::int32 value) {
  
  fuel_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.fuel_type)
}

// .nebulalink.perceptron3.Acc4Way accel_4way = 22;
inline bool Perceptron::has_accel_4way() const {
  return this != internal_default_instance() && accel_4way_ != NULL;
}
inline void Perceptron::clear_accel_4way() {
  if (GetArenaNoVirtual() == NULL && accel_4way_ != NULL) {
    delete accel_4way_;
  }
  accel_4way_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way& Perceptron::_internal_accel_4way() const {
  return *accel_4way_;
}
inline const ::nebulalink::perceptron3::Acc4Way& Perceptron::accel_4way() const {
  const ::nebulalink::perceptron3::Acc4Way* p = accel_4way_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.accel_4way)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way*>(
      &::nebulalink::perceptron3::_Acc4Way_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way* Perceptron::release_accel_4way() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.accel_4way)
  
  ::nebulalink::perceptron3::Acc4Way* temp = accel_4way_;
  accel_4way_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way* Perceptron::mutable_accel_4way() {
  
  if (accel_4way_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way>(GetArenaNoVirtual());
    accel_4way_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.accel_4way)
  return accel_4way_;
}
inline void Perceptron::set_allocated_accel_4way(::nebulalink::perceptron3::Acc4Way* accel_4way) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_4way_;
  }
  if (accel_4way) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accel_4way = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel_4way, submessage_arena);
    }
    
  } else {
    
  }
  accel_4way_ = accel_4way;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.accel_4way)
}

// int64 obj_time_stamp = 23;
inline void Perceptron::clear_obj_time_stamp() {
  obj_time_stamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Perceptron::obj_time_stamp() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.obj_time_stamp)
  return obj_time_stamp_;
}
inline void Perceptron::set_obj_time_stamp(::google::protobuf::int64 value) {
  
  obj_time_stamp_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.obj_time_stamp)
}

// int32 ptc_sourcetype = 24;
inline void Perceptron::clear_ptc_sourcetype() {
  ptc_sourcetype_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_sourcetype() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_sourcetype)
  return ptc_sourcetype_;
}
inline void Perceptron::set_ptc_sourcetype(::google::protobuf::int32 value) {
  
  ptc_sourcetype_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_sourcetype)
}

// .nebulalink.perceptron3.TimeBase ptc_time_stamp = 25;
inline bool Perceptron::has_ptc_time_stamp() const {
  return this != internal_default_instance() && ptc_time_stamp_ != NULL;
}
inline void Perceptron::clear_ptc_time_stamp() {
  if (GetArenaNoVirtual() == NULL && ptc_time_stamp_ != NULL) {
    delete ptc_time_stamp_;
  }
  ptc_time_stamp_ = NULL;
}
inline const ::nebulalink::perceptron3::TimeBase& Perceptron::_internal_ptc_time_stamp() const {
  return *ptc_time_stamp_;
}
inline const ::nebulalink::perceptron3::TimeBase& Perceptron::ptc_time_stamp() const {
  const ::nebulalink::perceptron3::TimeBase* p = ptc_time_stamp_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_time_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TimeBase*>(
      &::nebulalink::perceptron3::_TimeBase_default_instance_);
}
inline ::nebulalink::perceptron3::TimeBase* Perceptron::release_ptc_time_stamp() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_time_stamp)
  
  ::nebulalink::perceptron3::TimeBase* temp = ptc_time_stamp_;
  ptc_time_stamp_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TimeBase* Perceptron::mutable_ptc_time_stamp() {
  
  if (ptc_time_stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(GetArenaNoVirtual());
    ptc_time_stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_time_stamp)
  return ptc_time_stamp_;
}
inline void Perceptron::set_allocated_ptc_time_stamp(::nebulalink::perceptron3::TimeBase* ptc_time_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptc_time_stamp_;
  }
  if (ptc_time_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptc_time_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptc_time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  ptc_time_stamp_ = ptc_time_stamp;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_time_stamp)
}

// .nebulalink.perceptron3.PointGPS_CFD ptc_gps_cfd = 26;
inline bool Perceptron::has_ptc_gps_cfd() const {
  return this != internal_default_instance() && ptc_gps_cfd_ != NULL;
}
inline void Perceptron::clear_ptc_gps_cfd() {
  if (GetArenaNoVirtual() == NULL && ptc_gps_cfd_ != NULL) {
    delete ptc_gps_cfd_;
  }
  ptc_gps_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& Perceptron::_internal_ptc_gps_cfd() const {
  return *ptc_gps_cfd_;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& Perceptron::ptc_gps_cfd() const {
  const ::nebulalink::perceptron3::PointGPS_CFD* p = ptc_gps_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_gps_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS_CFD*>(
      &::nebulalink::perceptron3::_PointGPS_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS_CFD* Perceptron::release_ptc_gps_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_gps_cfd)
  
  ::nebulalink::perceptron3::PointGPS_CFD* temp = ptc_gps_cfd_;
  ptc_gps_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS_CFD* Perceptron::mutable_ptc_gps_cfd() {
  
  if (ptc_gps_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS_CFD>(GetArenaNoVirtual());
    ptc_gps_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_gps_cfd)
  return ptc_gps_cfd_;
}
inline void Perceptron::set_allocated_ptc_gps_cfd(::nebulalink::perceptron3::PointGPS_CFD* ptc_gps_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptc_gps_cfd_;
  }
  if (ptc_gps_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptc_gps_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptc_gps_cfd, submessage_arena);
    }
    
  } else {
    
  }
  ptc_gps_cfd_ = ptc_gps_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_gps_cfd)
}

// int32 ptc_tran_state = 27;
inline void Perceptron::clear_ptc_tran_state() {
  ptc_tran_state_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_tran_state() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_tran_state)
  return ptc_tran_state_;
}
inline void Perceptron::set_ptc_tran_state(::google::protobuf::int32 value) {
  
  ptc_tran_state_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_tran_state)
}

// float ptc_angle = 28;
inline void Perceptron::clear_ptc_angle() {
  ptc_angle_ = 0;
}
inline float Perceptron::ptc_angle() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_angle)
  return ptc_angle_;
}
inline void Perceptron::set_ptc_angle(float value) {
  
  ptc_angle_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_angle)
}

// .nebulalink.perceptron3.Motion_CFD ptc_motino_cfd = 29;
inline bool Perceptron::has_ptc_motino_cfd() const {
  return this != internal_default_instance() && ptc_motino_cfd_ != NULL;
}
inline void Perceptron::clear_ptc_motino_cfd() {
  if (GetArenaNoVirtual() == NULL && ptc_motino_cfd_ != NULL) {
    delete ptc_motino_cfd_;
  }
  ptc_motino_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::Motion_CFD& Perceptron::_internal_ptc_motino_cfd() const {
  return *ptc_motino_cfd_;
}
inline const ::nebulalink::perceptron3::Motion_CFD& Perceptron::ptc_motino_cfd() const {
  const ::nebulalink::perceptron3::Motion_CFD* p = ptc_motino_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_motino_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Motion_CFD*>(
      &::nebulalink::perceptron3::_Motion_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::Motion_CFD* Perceptron::release_ptc_motino_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_motino_cfd)
  
  ::nebulalink::perceptron3::Motion_CFD* temp = ptc_motino_cfd_;
  ptc_motino_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Motion_CFD* Perceptron::mutable_ptc_motino_cfd() {
  
  if (ptc_motino_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Motion_CFD>(GetArenaNoVirtual());
    ptc_motino_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_motino_cfd)
  return ptc_motino_cfd_;
}
inline void Perceptron::set_allocated_ptc_motino_cfd(::nebulalink::perceptron3::Motion_CFD* ptc_motino_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptc_motino_cfd_;
  }
  if (ptc_motino_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptc_motino_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptc_motino_cfd, submessage_arena);
    }
    
  } else {
    
  }
  ptc_motino_cfd_ = ptc_motino_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_motino_cfd)
}

// int32 ptc_veh_type = 30;
inline void Perceptron::clear_ptc_veh_type() {
  ptc_veh_type_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_veh_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_veh_type)
  return ptc_veh_type_;
}
inline void Perceptron::set_ptc_veh_type(::google::protobuf::int32 value) {
  
  ptc_veh_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_veh_type)
}

// .nebulalink.perceptron3.TargetSize_CFD ptc_size_cfd = 31;
inline bool Perceptron::has_ptc_size_cfd() const {
  return this != internal_default_instance() && ptc_size_cfd_ != NULL;
}
inline void Perceptron::clear_ptc_size_cfd() {
  if (GetArenaNoVirtual() == NULL && ptc_size_cfd_ != NULL) {
    delete ptc_size_cfd_;
  }
  ptc_size_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::TargetSize_CFD& Perceptron::_internal_ptc_size_cfd() const {
  return *ptc_size_cfd_;
}
inline const ::nebulalink::perceptron3::TargetSize_CFD& Perceptron::ptc_size_cfd() const {
  const ::nebulalink::perceptron3::TargetSize_CFD* p = ptc_size_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_size_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TargetSize_CFD*>(
      &::nebulalink::perceptron3::_TargetSize_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::TargetSize_CFD* Perceptron::release_ptc_size_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_size_cfd)
  
  ::nebulalink::perceptron3::TargetSize_CFD* temp = ptc_size_cfd_;
  ptc_size_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TargetSize_CFD* Perceptron::mutable_ptc_size_cfd() {
  
  if (ptc_size_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TargetSize_CFD>(GetArenaNoVirtual());
    ptc_size_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_size_cfd)
  return ptc_size_cfd_;
}
inline void Perceptron::set_allocated_ptc_size_cfd(::nebulalink::perceptron3::TargetSize_CFD* ptc_size_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptc_size_cfd_;
  }
  if (ptc_size_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptc_size_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptc_size_cfd, submessage_arena);
    }
    
  } else {
    
  }
  ptc_size_cfd_ = ptc_size_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_size_cfd)
}

// int32 ptc_Exttype = 32;
inline void Perceptron::clear_ptc_exttype() {
  ptc_exttype_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_exttype() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_Exttype)
  return ptc_exttype_;
}
inline void Perceptron::set_ptc_exttype(::google::protobuf::int32 value) {
  
  ptc_exttype_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_Exttype)
}

// float ptc_Exttype_cfd = 33;
inline void Perceptron::clear_ptc_exttype_cfd() {
  ptc_exttype_cfd_ = 0;
}
inline float Perceptron::ptc_exttype_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_Exttype_cfd)
  return ptc_exttype_cfd_;
}
inline void Perceptron::set_ptc_exttype_cfd(float value) {
  
  ptc_exttype_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_Exttype_cfd)
}

// .nebulalink.perceptron3.Acc4Way_CFD ptc_accel_4way_cfd = 34;
inline bool Perceptron::has_ptc_accel_4way_cfd() const {
  return this != internal_default_instance() && ptc_accel_4way_cfd_ != NULL;
}
inline void Perceptron::clear_ptc_accel_4way_cfd() {
  if (GetArenaNoVirtual() == NULL && ptc_accel_4way_cfd_ != NULL) {
    delete ptc_accel_4way_cfd_;
  }
  ptc_accel_4way_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way_CFD& Perceptron::_internal_ptc_accel_4way_cfd() const {
  return *ptc_accel_4way_cfd_;
}
inline const ::nebulalink::perceptron3::Acc4Way_CFD& Perceptron::ptc_accel_4way_cfd() const {
  const ::nebulalink::perceptron3::Acc4Way_CFD* p = ptc_accel_4way_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_accel_4way_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way_CFD*>(
      &::nebulalink::perceptron3::_Acc4Way_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way_CFD* Perceptron::release_ptc_accel_4way_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_accel_4way_cfd)
  
  ::nebulalink::perceptron3::Acc4Way_CFD* temp = ptc_accel_4way_cfd_;
  ptc_accel_4way_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way_CFD* Perceptron::mutable_ptc_accel_4way_cfd() {
  
  if (ptc_accel_4way_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way_CFD>(GetArenaNoVirtual());
    ptc_accel_4way_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_accel_4way_cfd)
  return ptc_accel_4way_cfd_;
}
inline void Perceptron::set_allocated_ptc_accel_4way_cfd(::nebulalink::perceptron3::Acc4Way_CFD* ptc_accel_4way_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptc_accel_4way_cfd_;
  }
  if (ptc_accel_4way_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptc_accel_4way_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptc_accel_4way_cfd, submessage_arena);
    }
    
  } else {
    
  }
  ptc_accel_4way_cfd_ = ptc_accel_4way_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_accel_4way_cfd)
}

// int32 ptc_status_duration = 35;
inline void Perceptron::clear_ptc_status_duration() {
  ptc_status_duration_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_status_duration() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_status_duration)
  return ptc_status_duration_;
}
inline void Perceptron::set_ptc_status_duration(::google::protobuf::int32 value) {
  
  ptc_status_duration_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_status_duration)
}

// repeated .nebulalink.perceptron3.PathPoint ptc_pathpoint_history = 36;
inline int Perceptron::ptc_pathpoint_history_size() const {
  return ptc_pathpoint_history_.size();
}
inline void Perceptron::clear_ptc_pathpoint_history() {
  ptc_pathpoint_history_.Clear();
}
inline ::nebulalink::perceptron3::PathPoint* Perceptron::mutable_ptc_pathpoint_history(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_pathpoint_history)
  return ptc_pathpoint_history_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPoint >*
Perceptron::mutable_ptc_pathpoint_history() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Perceptron.ptc_pathpoint_history)
  return &ptc_pathpoint_history_;
}
inline const ::nebulalink::perceptron3::PathPoint& Perceptron::ptc_pathpoint_history(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_pathpoint_history)
  return ptc_pathpoint_history_.Get(index);
}
inline ::nebulalink::perceptron3::PathPoint* Perceptron::add_ptc_pathpoint_history() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Perceptron.ptc_pathpoint_history)
  return ptc_pathpoint_history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PathPoint >&
Perceptron::ptc_pathpoint_history() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Perceptron.ptc_pathpoint_history)
  return ptc_pathpoint_history_;
}

// repeated .nebulalink.perceptron3.Planning_PB ptc_planning_list = 37;
inline int Perceptron::ptc_planning_list_size() const {
  return ptc_planning_list_.size();
}
inline void Perceptron::clear_ptc_planning_list() {
  ptc_planning_list_.Clear();
}
inline ::nebulalink::perceptron3::Planning_PB* Perceptron::mutable_ptc_planning_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_planning_list)
  return ptc_planning_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Planning_PB >*
Perceptron::mutable_ptc_planning_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Perceptron.ptc_planning_list)
  return &ptc_planning_list_;
}
inline const ::nebulalink::perceptron3::Planning_PB& Perceptron::ptc_planning_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_planning_list)
  return ptc_planning_list_.Get(index);
}
inline ::nebulalink::perceptron3::Planning_PB* Perceptron::add_ptc_planning_list() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Perceptron.ptc_planning_list)
  return ptc_planning_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Planning_PB >&
Perceptron::ptc_planning_list() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Perceptron.ptc_planning_list)
  return ptc_planning_list_;
}

// repeated .nebulalink.perceptron3.PointDesc ptc_polygonPoint = 38;
inline int Perceptron::ptc_polygonpoint_size() const {
  return ptc_polygonpoint_.size();
}
inline void Perceptron::clear_ptc_polygonpoint() {
  ptc_polygonpoint_.Clear();
}
inline ::nebulalink::perceptron3::PointDesc* Perceptron::mutable_ptc_polygonpoint(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_polygonPoint)
  return ptc_polygonpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
Perceptron::mutable_ptc_polygonpoint() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Perceptron.ptc_polygonPoint)
  return &ptc_polygonpoint_;
}
inline const ::nebulalink::perceptron3::PointDesc& Perceptron::ptc_polygonpoint(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_polygonPoint)
  return ptc_polygonpoint_.Get(index);
}
inline ::nebulalink::perceptron3::PointDesc* Perceptron::add_ptc_polygonpoint() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Perceptron.ptc_polygonPoint)
  return ptc_polygonpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
Perceptron::ptc_polygonpoint() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Perceptron.ptc_polygonPoint)
  return ptc_polygonpoint_;
}

// int32 ptc_satellite = 39;
inline void Perceptron::clear_ptc_satellite() {
  ptc_satellite_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_satellite() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_satellite)
  return ptc_satellite_;
}
inline void Perceptron::set_ptc_satellite(::google::protobuf::int32 value) {
  
  ptc_satellite_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_satellite)
}

// int32 ptc_regionid = 40;
inline void Perceptron::clear_ptc_regionid() {
  ptc_regionid_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_regionid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_regionid)
  return ptc_regionid_;
}
inline void Perceptron::set_ptc_regionid(::google::protobuf::int32 value) {
  
  ptc_regionid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_regionid)
}

// int32 ptc_nodeid = 41;
inline void Perceptron::clear_ptc_nodeid() {
  ptc_nodeid_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_nodeid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_nodeid)
  return ptc_nodeid_;
}
inline void Perceptron::set_ptc_nodeid(::google::protobuf::int32 value) {
  
  ptc_nodeid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_nodeid)
}

// int32 ptc_laneid = 42;
inline void Perceptron::clear_ptc_laneid() {
  ptc_laneid_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_laneid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_laneid)
  return ptc_laneid_;
}
inline void Perceptron::set_ptc_laneid(::google::protobuf::int32 value) {
  
  ptc_laneid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_laneid)
}

// string ptc_link_name = 43;
inline void Perceptron::clear_ptc_link_name() {
  ptc_link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perceptron::ptc_link_name() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_link_name)
  return ptc_link_name_.GetNoArena();
}
inline void Perceptron::set_ptc_link_name(const ::std::string& value) {
  
  ptc_link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_link_name)
}
#if LANG_CXX11
inline void Perceptron::set_ptc_link_name(::std::string&& value) {
  
  ptc_link_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Perceptron.ptc_link_name)
}
#endif
inline void Perceptron::set_ptc_link_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ptc_link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Perceptron.ptc_link_name)
}
inline void Perceptron::set_ptc_link_name(const char* value, size_t size) {
  
  ptc_link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Perceptron.ptc_link_name)
}
inline ::std::string* Perceptron::mutable_ptc_link_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.ptc_link_name)
  return ptc_link_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perceptron::release_ptc_link_name() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Perceptron.ptc_link_name)
  
  return ptc_link_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perceptron::set_allocated_ptc_link_name(::std::string* ptc_link_name) {
  if (ptc_link_name != NULL) {
    
  } else {
    
  }
  ptc_link_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ptc_link_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Perceptron.ptc_link_name)
}

// int32 ptc_link_width = 44;
inline void Perceptron::clear_ptc_link_width() {
  ptc_link_width_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_link_width() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_link_width)
  return ptc_link_width_;
}
inline void Perceptron::set_ptc_link_width(::google::protobuf::int32 value) {
  
  ptc_link_width_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_link_width)
}

// int32 ptc_veh_plate_type = 45;
inline void Perceptron::clear_ptc_veh_plate_type() {
  ptc_veh_plate_type_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_veh_plate_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_veh_plate_type)
  return ptc_veh_plate_type_;
}
inline void Perceptron::set_ptc_veh_plate_type(::google::protobuf::int32 value) {
  
  ptc_veh_plate_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_veh_plate_type)
}

// int32 ptc_veh_plate_color = 46;
inline void Perceptron::clear_ptc_veh_plate_color() {
  ptc_veh_plate_color_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_veh_plate_color() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_veh_plate_color)
  return ptc_veh_plate_color_;
}
inline void Perceptron::set_ptc_veh_plate_color(::google::protobuf::int32 value) {
  
  ptc_veh_plate_color_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_veh_plate_color)
}

// int32 ptc_veh_color = 47;
inline void Perceptron::clear_ptc_veh_color() {
  ptc_veh_color_ = 0;
}
inline ::google::protobuf::int32 Perceptron::ptc_veh_color() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.ptc_veh_color)
  return ptc_veh_color_;
}
inline void Perceptron::set_ptc_veh_color(::google::protobuf::int32 value) {
  
  ptc_veh_color_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Perceptron.ptc_veh_color)
}

// repeated .nebulalink.perceptron3.Nebulalink_Extend nebula_extend = 48;
inline int Perceptron::nebula_extend_size() const {
  return nebula_extend_.size();
}
inline void Perceptron::clear_nebula_extend() {
  nebula_extend_.Clear();
}
inline ::nebulalink::perceptron3::Nebulalink_Extend* Perceptron::mutable_nebula_extend(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Perceptron.nebula_extend)
  return nebula_extend_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Nebulalink_Extend >*
Perceptron::mutable_nebula_extend() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Perceptron.nebula_extend)
  return &nebula_extend_;
}
inline const ::nebulalink::perceptron3::Nebulalink_Extend& Perceptron::nebula_extend(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Perceptron.nebula_extend)
  return nebula_extend_.Get(index);
}
inline ::nebulalink::perceptron3::Nebulalink_Extend* Perceptron::add_nebula_extend() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Perceptron.nebula_extend)
  return nebula_extend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Nebulalink_Extend >&
Perceptron::nebula_extend() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Perceptron.nebula_extend)
  return nebula_extend_;
}

// -------------------------------------------------------------------

// Obstacles

// int32 obstype = 1;
inline void Obstacles::clear_obstype() {
  obstype_ = 0;
}
inline ::google::protobuf::int32 Obstacles::obstype() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obstype)
  return obstype_;
}
inline void Obstacles::set_obstype(::google::protobuf::int32 value) {
  
  obstype_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obstype)
}

// int32 obstype_cfd = 2;
inline void Obstacles::clear_obstype_cfd() {
  obstype_cfd_ = 0;
}
inline ::google::protobuf::int32 Obstacles::obstype_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obstype_cfd)
  return obstype_cfd_;
}
inline void Obstacles::set_obstype_cfd(::google::protobuf::int32 value) {
  
  obstype_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obstype_cfd)
}

// int32 obsId = 3;
inline void Obstacles::clear_obsid() {
  obsid_ = 0;
}
inline ::google::protobuf::int32 Obstacles::obsid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obsId)
  return obsid_;
}
inline void Obstacles::set_obsid(::google::protobuf::int32 value) {
  
  obsid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obsId)
}

// int32 obs_source = 4;
inline void Obstacles::clear_obs_source() {
  obs_source_ = 0;
}
inline ::google::protobuf::int32 Obstacles::obs_source() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_source)
  return obs_source_;
}
inline void Obstacles::set_obs_source(::google::protobuf::int32 value) {
  
  obs_source_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_source)
}

// .nebulalink.perceptron3.TimeBase obs_time_stamp = 5;
inline bool Obstacles::has_obs_time_stamp() const {
  return this != internal_default_instance() && obs_time_stamp_ != NULL;
}
inline void Obstacles::clear_obs_time_stamp() {
  if (GetArenaNoVirtual() == NULL && obs_time_stamp_ != NULL) {
    delete obs_time_stamp_;
  }
  obs_time_stamp_ = NULL;
}
inline const ::nebulalink::perceptron3::TimeBase& Obstacles::_internal_obs_time_stamp() const {
  return *obs_time_stamp_;
}
inline const ::nebulalink::perceptron3::TimeBase& Obstacles::obs_time_stamp() const {
  const ::nebulalink::perceptron3::TimeBase* p = obs_time_stamp_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_time_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TimeBase*>(
      &::nebulalink::perceptron3::_TimeBase_default_instance_);
}
inline ::nebulalink::perceptron3::TimeBase* Obstacles::release_obs_time_stamp() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_time_stamp)
  
  ::nebulalink::perceptron3::TimeBase* temp = obs_time_stamp_;
  obs_time_stamp_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TimeBase* Obstacles::mutable_obs_time_stamp() {
  
  if (obs_time_stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(GetArenaNoVirtual());
    obs_time_stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_time_stamp)
  return obs_time_stamp_;
}
inline void Obstacles::set_allocated_obs_time_stamp(::nebulalink::perceptron3::TimeBase* obs_time_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_time_stamp_;
  }
  if (obs_time_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_time_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  obs_time_stamp_ = obs_time_stamp;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_time_stamp)
}

// .nebulalink.perceptron3.PointDesc obs_gps = 6;
inline bool Obstacles::has_obs_gps() const {
  return this != internal_default_instance() && obs_gps_ != NULL;
}
inline void Obstacles::clear_obs_gps() {
  if (GetArenaNoVirtual() == NULL && obs_gps_ != NULL) {
    delete obs_gps_;
  }
  obs_gps_ = NULL;
}
inline const ::nebulalink::perceptron3::PointDesc& Obstacles::_internal_obs_gps() const {
  return *obs_gps_;
}
inline const ::nebulalink::perceptron3::PointDesc& Obstacles::obs_gps() const {
  const ::nebulalink::perceptron3::PointDesc* p = obs_gps_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_gps)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointDesc*>(
      &::nebulalink::perceptron3::_PointDesc_default_instance_);
}
inline ::nebulalink::perceptron3::PointDesc* Obstacles::release_obs_gps() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_gps)
  
  ::nebulalink::perceptron3::PointDesc* temp = obs_gps_;
  obs_gps_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointDesc* Obstacles::mutable_obs_gps() {
  
  if (obs_gps_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointDesc>(GetArenaNoVirtual());
    obs_gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_gps)
  return obs_gps_;
}
inline void Obstacles::set_allocated_obs_gps(::nebulalink::perceptron3::PointDesc* obs_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_gps_;
  }
  if (obs_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_gps, submessage_arena);
    }
    
  } else {
    
  }
  obs_gps_ = obs_gps;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_gps)
}

// .nebulalink.perceptron3.PointGPS_CFD obs_gps_cfd = 7;
inline bool Obstacles::has_obs_gps_cfd() const {
  return this != internal_default_instance() && obs_gps_cfd_ != NULL;
}
inline void Obstacles::clear_obs_gps_cfd() {
  if (GetArenaNoVirtual() == NULL && obs_gps_cfd_ != NULL) {
    delete obs_gps_cfd_;
  }
  obs_gps_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& Obstacles::_internal_obs_gps_cfd() const {
  return *obs_gps_cfd_;
}
inline const ::nebulalink::perceptron3::PointGPS_CFD& Obstacles::obs_gps_cfd() const {
  const ::nebulalink::perceptron3::PointGPS_CFD* p = obs_gps_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_gps_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS_CFD*>(
      &::nebulalink::perceptron3::_PointGPS_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS_CFD* Obstacles::release_obs_gps_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_gps_cfd)
  
  ::nebulalink::perceptron3::PointGPS_CFD* temp = obs_gps_cfd_;
  obs_gps_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS_CFD* Obstacles::mutable_obs_gps_cfd() {
  
  if (obs_gps_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS_CFD>(GetArenaNoVirtual());
    obs_gps_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_gps_cfd)
  return obs_gps_cfd_;
}
inline void Obstacles::set_allocated_obs_gps_cfd(::nebulalink::perceptron3::PointGPS_CFD* obs_gps_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_gps_cfd_;
  }
  if (obs_gps_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_gps_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_gps_cfd, submessage_arena);
    }
    
  } else {
    
  }
  obs_gps_cfd_ = obs_gps_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_gps_cfd)
}

// float obs_speed = 8;
inline void Obstacles::clear_obs_speed() {
  obs_speed_ = 0;
}
inline float Obstacles::obs_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_speed)
  return obs_speed_;
}
inline void Obstacles::set_obs_speed(float value) {
  
  obs_speed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_speed)
}

// float obs_speed_cfd = 9;
inline void Obstacles::clear_obs_speed_cfd() {
  obs_speed_cfd_ = 0;
}
inline float Obstacles::obs_speed_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_speed_cfd)
  return obs_speed_cfd_;
}
inline void Obstacles::set_obs_speed_cfd(float value) {
  
  obs_speed_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_speed_cfd)
}

// float obs_heading = 10;
inline void Obstacles::clear_obs_heading() {
  obs_heading_ = 0;
}
inline float Obstacles::obs_heading() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_heading)
  return obs_heading_;
}
inline void Obstacles::set_obs_heading(float value) {
  
  obs_heading_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_heading)
}

// float obs_heading_cfd = 11;
inline void Obstacles::clear_obs_heading_cfd() {
  obs_heading_cfd_ = 0;
}
inline float Obstacles::obs_heading_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_heading_cfd)
  return obs_heading_cfd_;
}
inline void Obstacles::set_obs_heading_cfd(float value) {
  
  obs_heading_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_heading_cfd)
}

// float obs_verSpeed = 12;
inline void Obstacles::clear_obs_verspeed() {
  obs_verspeed_ = 0;
}
inline float Obstacles::obs_verspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_verSpeed)
  return obs_verspeed_;
}
inline void Obstacles::set_obs_verspeed(float value) {
  
  obs_verspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_verSpeed)
}

// float obs_verSpeed_cfd = 13;
inline void Obstacles::clear_obs_verspeed_cfd() {
  obs_verspeed_cfd_ = 0;
}
inline float Obstacles::obs_verspeed_cfd() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_verSpeed_cfd)
  return obs_verspeed_cfd_;
}
inline void Obstacles::set_obs_verspeed_cfd(float value) {
  
  obs_verspeed_cfd_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_verSpeed_cfd)
}

// .nebulalink.perceptron3.Acc4Way obs_accel_4way = 14;
inline bool Obstacles::has_obs_accel_4way() const {
  return this != internal_default_instance() && obs_accel_4way_ != NULL;
}
inline void Obstacles::clear_obs_accel_4way() {
  if (GetArenaNoVirtual() == NULL && obs_accel_4way_ != NULL) {
    delete obs_accel_4way_;
  }
  obs_accel_4way_ = NULL;
}
inline const ::nebulalink::perceptron3::Acc4Way& Obstacles::_internal_obs_accel_4way() const {
  return *obs_accel_4way_;
}
inline const ::nebulalink::perceptron3::Acc4Way& Obstacles::obs_accel_4way() const {
  const ::nebulalink::perceptron3::Acc4Way* p = obs_accel_4way_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_accel_4way)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::Acc4Way*>(
      &::nebulalink::perceptron3::_Acc4Way_default_instance_);
}
inline ::nebulalink::perceptron3::Acc4Way* Obstacles::release_obs_accel_4way() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_accel_4way)
  
  ::nebulalink::perceptron3::Acc4Way* temp = obs_accel_4way_;
  obs_accel_4way_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::Acc4Way* Obstacles::mutable_obs_accel_4way() {
  
  if (obs_accel_4way_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::Acc4Way>(GetArenaNoVirtual());
    obs_accel_4way_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_accel_4way)
  return obs_accel_4way_;
}
inline void Obstacles::set_allocated_obs_accel_4way(::nebulalink::perceptron3::Acc4Way* obs_accel_4way) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_accel_4way_;
  }
  if (obs_accel_4way) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_accel_4way = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_accel_4way, submessage_arena);
    }
    
  } else {
    
  }
  obs_accel_4way_ = obs_accel_4way;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_accel_4way)
}

// .nebulalink.perceptron3.TargetSize obs_size = 15;
inline bool Obstacles::has_obs_size() const {
  return this != internal_default_instance() && obs_size_ != NULL;
}
inline void Obstacles::clear_obs_size() {
  if (GetArenaNoVirtual() == NULL && obs_size_ != NULL) {
    delete obs_size_;
  }
  obs_size_ = NULL;
}
inline const ::nebulalink::perceptron3::TargetSize& Obstacles::_internal_obs_size() const {
  return *obs_size_;
}
inline const ::nebulalink::perceptron3::TargetSize& Obstacles::obs_size() const {
  const ::nebulalink::perceptron3::TargetSize* p = obs_size_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_size)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TargetSize*>(
      &::nebulalink::perceptron3::_TargetSize_default_instance_);
}
inline ::nebulalink::perceptron3::TargetSize* Obstacles::release_obs_size() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_size)
  
  ::nebulalink::perceptron3::TargetSize* temp = obs_size_;
  obs_size_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TargetSize* Obstacles::mutable_obs_size() {
  
  if (obs_size_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TargetSize>(GetArenaNoVirtual());
    obs_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_size)
  return obs_size_;
}
inline void Obstacles::set_allocated_obs_size(::nebulalink::perceptron3::TargetSize* obs_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_size_;
  }
  if (obs_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_size, submessage_arena);
    }
    
  } else {
    
  }
  obs_size_ = obs_size;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_size)
}

// .nebulalink.perceptron3.TargetSize_CFD obs_size_cfd = 16;
inline bool Obstacles::has_obs_size_cfd() const {
  return this != internal_default_instance() && obs_size_cfd_ != NULL;
}
inline void Obstacles::clear_obs_size_cfd() {
  if (GetArenaNoVirtual() == NULL && obs_size_cfd_ != NULL) {
    delete obs_size_cfd_;
  }
  obs_size_cfd_ = NULL;
}
inline const ::nebulalink::perceptron3::TargetSize_CFD& Obstacles::_internal_obs_size_cfd() const {
  return *obs_size_cfd_;
}
inline const ::nebulalink::perceptron3::TargetSize_CFD& Obstacles::obs_size_cfd() const {
  const ::nebulalink::perceptron3::TargetSize_CFD* p = obs_size_cfd_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_size_cfd)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TargetSize_CFD*>(
      &::nebulalink::perceptron3::_TargetSize_CFD_default_instance_);
}
inline ::nebulalink::perceptron3::TargetSize_CFD* Obstacles::release_obs_size_cfd() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Obstacles.obs_size_cfd)
  
  ::nebulalink::perceptron3::TargetSize_CFD* temp = obs_size_cfd_;
  obs_size_cfd_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TargetSize_CFD* Obstacles::mutable_obs_size_cfd() {
  
  if (obs_size_cfd_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TargetSize_CFD>(GetArenaNoVirtual());
    obs_size_cfd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_size_cfd)
  return obs_size_cfd_;
}
inline void Obstacles::set_allocated_obs_size_cfd(::nebulalink::perceptron3::TargetSize_CFD* obs_size_cfd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_size_cfd_;
  }
  if (obs_size_cfd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_size_cfd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_size_cfd, submessage_arena);
    }
    
  } else {
    
  }
  obs_size_cfd_ = obs_size_cfd;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Obstacles.obs_size_cfd)
}

// int32 obs_tracking = 17;
inline void Obstacles::clear_obs_tracking() {
  obs_tracking_ = 0;
}
inline ::google::protobuf::int32 Obstacles::obs_tracking() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_tracking)
  return obs_tracking_;
}
inline void Obstacles::set_obs_tracking(::google::protobuf::int32 value) {
  
  obs_tracking_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Obstacles.obs_tracking)
}

// repeated .nebulalink.perceptron3.PointDesc obs_polygonPoint = 18;
inline int Obstacles::obs_polygonpoint_size() const {
  return obs_polygonpoint_.size();
}
inline void Obstacles::clear_obs_polygonpoint() {
  obs_polygonpoint_.Clear();
}
inline ::nebulalink::perceptron3::PointDesc* Obstacles::mutable_obs_polygonpoint(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Obstacles.obs_polygonPoint)
  return obs_polygonpoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >*
Obstacles::mutable_obs_polygonpoint() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Obstacles.obs_polygonPoint)
  return &obs_polygonpoint_;
}
inline const ::nebulalink::perceptron3::PointDesc& Obstacles::obs_polygonpoint(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Obstacles.obs_polygonPoint)
  return obs_polygonpoint_.Get(index);
}
inline ::nebulalink::perceptron3::PointDesc* Obstacles::add_obs_polygonpoint() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Obstacles.obs_polygonPoint)
  return obs_polygonpoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::PointDesc >&
Obstacles::obs_polygonpoint() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Obstacles.obs_polygonPoint)
  return obs_polygonpoint_;
}

// -------------------------------------------------------------------

// Eventlist

// int32 event_id = 1;
inline void Eventlist::clear_event_id() {
  event_id_ = 0;
}
inline ::google::protobuf::int32 Eventlist::event_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_id)
  return event_id_;
}
inline void Eventlist::set_event_id(::google::protobuf::int32 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_id)
}

// int32 event_status = 2;
inline void Eventlist::clear_event_status() {
  event_status_ = 0;
}
inline ::google::protobuf::int32 Eventlist::event_status() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_status)
  return event_status_;
}
inline void Eventlist::set_event_status(::google::protobuf::int32 value) {
  
  event_status_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_status)
}

// int32 event_type = 3;
inline void Eventlist::clear_event_type() {
  event_type_ = 0;
}
inline ::google::protobuf::int32 Eventlist::event_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_type)
  return event_type_;
}
inline void Eventlist::set_event_type(::google::protobuf::int32 value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_type)
}

// int32 rte_source = 4;
inline void Eventlist::clear_rte_source() {
  rte_source_ = 0;
}
inline ::google::protobuf::int32 Eventlist::rte_source() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.rte_source)
  return rte_source_;
}
inline void Eventlist::set_rte_source(::google::protobuf::int32 value) {
  
  rte_source_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.rte_source)
}

// .nebulalink.perceptron3.PointGPS event_gps = 5;
inline bool Eventlist::has_event_gps() const {
  return this != internal_default_instance() && event_gps_ != NULL;
}
inline void Eventlist::clear_event_gps() {
  if (GetArenaNoVirtual() == NULL && event_gps_ != NULL) {
    delete event_gps_;
  }
  event_gps_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS& Eventlist::_internal_event_gps() const {
  return *event_gps_;
}
inline const ::nebulalink::perceptron3::PointGPS& Eventlist::event_gps() const {
  const ::nebulalink::perceptron3::PointGPS* p = event_gps_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_gps)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS*>(
      &::nebulalink::perceptron3::_PointGPS_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS* Eventlist::release_event_gps() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Eventlist.event_gps)
  
  ::nebulalink::perceptron3::PointGPS* temp = event_gps_;
  event_gps_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS* Eventlist::mutable_event_gps() {
  
  if (event_gps_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(GetArenaNoVirtual());
    event_gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.event_gps)
  return event_gps_;
}
inline void Eventlist::set_allocated_event_gps(::nebulalink::perceptron3::PointGPS* event_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_gps_;
  }
  if (event_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_gps, submessage_arena);
    }
    
  } else {
    
  }
  event_gps_ = event_gps;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Eventlist.event_gps)
}

// float event_radius = 6;
inline void Eventlist::clear_event_radius() {
  event_radius_ = 0;
}
inline float Eventlist::event_radius() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_radius)
  return event_radius_;
}
inline void Eventlist::set_event_radius(float value) {
  
  event_radius_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_radius)
}

// string event_desc = 7;
inline void Eventlist::clear_event_desc() {
  event_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Eventlist::event_desc() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_desc)
  return event_desc_.GetNoArena();
}
inline void Eventlist::set_event_desc(const ::std::string& value) {
  
  event_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_desc)
}
#if LANG_CXX11
inline void Eventlist::set_event_desc(::std::string&& value) {
  
  event_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Eventlist.event_desc)
}
#endif
inline void Eventlist::set_event_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Eventlist.event_desc)
}
inline void Eventlist::set_event_desc(const char* value, size_t size) {
  
  event_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Eventlist.event_desc)
}
inline ::std::string* Eventlist::mutable_event_desc() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.event_desc)
  return event_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Eventlist::release_event_desc() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Eventlist.event_desc)
  
  return event_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Eventlist::set_allocated_event_desc(::std::string* event_desc) {
  if (event_desc != NULL) {
    
  } else {
    
  }
  event_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_desc);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Eventlist.event_desc)
}

// int32 event_priority = 8;
inline void Eventlist::clear_event_priority() {
  event_priority_ = 0;
}
inline ::google::protobuf::int32 Eventlist::event_priority() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_priority)
  return event_priority_;
}
inline void Eventlist::set_event_priority(::google::protobuf::int32 value) {
  
  event_priority_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_priority)
}

// repeated .nebulalink.perceptron3.RelateLinkDesc linklist = 9;
inline int Eventlist::linklist_size() const {
  return linklist_.size();
}
inline void Eventlist::clear_linklist() {
  linklist_.Clear();
}
inline ::nebulalink::perceptron3::RelateLinkDesc* Eventlist::mutable_linklist(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.linklist)
  return linklist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc >*
Eventlist::mutable_linklist() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Eventlist.linklist)
  return &linklist_;
}
inline const ::nebulalink::perceptron3::RelateLinkDesc& Eventlist::linklist(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.linklist)
  return linklist_.Get(index);
}
inline ::nebulalink::perceptron3::RelateLinkDesc* Eventlist::add_linklist() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Eventlist.linklist)
  return linklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelateLinkDesc >&
Eventlist::linklist() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Eventlist.linklist)
  return linklist_;
}

// repeated .nebulalink.perceptron3.RelatePathDesc pathlist = 10;
inline int Eventlist::pathlist_size() const {
  return pathlist_.size();
}
inline void Eventlist::clear_pathlist() {
  pathlist_.Clear();
}
inline ::nebulalink::perceptron3::RelatePathDesc* Eventlist::mutable_pathlist(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.pathlist)
  return pathlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelatePathDesc >*
Eventlist::mutable_pathlist() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.Eventlist.pathlist)
  return &pathlist_;
}
inline const ::nebulalink::perceptron3::RelatePathDesc& Eventlist::pathlist(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.pathlist)
  return pathlist_.Get(index);
}
inline ::nebulalink::perceptron3::RelatePathDesc* Eventlist::add_pathlist() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.Eventlist.pathlist)
  return pathlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::RelatePathDesc >&
Eventlist::pathlist() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.Eventlist.pathlist)
  return pathlist_;
}

// int32 event_confid = 11;
inline void Eventlist::clear_event_confid() {
  event_confid_ = 0;
}
inline ::google::protobuf::int32 Eventlist::event_confid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_confid)
  return event_confid_;
}
inline void Eventlist::set_event_confid(::google::protobuf::int32 value) {
  
  event_confid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Eventlist.event_confid)
}

// .nebulalink.perceptron3.TimeBase event_timestamp_start = 12;
inline bool Eventlist::has_event_timestamp_start() const {
  return this != internal_default_instance() && event_timestamp_start_ != NULL;
}
inline void Eventlist::clear_event_timestamp_start() {
  if (GetArenaNoVirtual() == NULL && event_timestamp_start_ != NULL) {
    delete event_timestamp_start_;
  }
  event_timestamp_start_ = NULL;
}
inline const ::nebulalink::perceptron3::TimeBase& Eventlist::_internal_event_timestamp_start() const {
  return *event_timestamp_start_;
}
inline const ::nebulalink::perceptron3::TimeBase& Eventlist::event_timestamp_start() const {
  const ::nebulalink::perceptron3::TimeBase* p = event_timestamp_start_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_timestamp_start)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TimeBase*>(
      &::nebulalink::perceptron3::_TimeBase_default_instance_);
}
inline ::nebulalink::perceptron3::TimeBase* Eventlist::release_event_timestamp_start() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Eventlist.event_timestamp_start)
  
  ::nebulalink::perceptron3::TimeBase* temp = event_timestamp_start_;
  event_timestamp_start_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TimeBase* Eventlist::mutable_event_timestamp_start() {
  
  if (event_timestamp_start_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(GetArenaNoVirtual());
    event_timestamp_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.event_timestamp_start)
  return event_timestamp_start_;
}
inline void Eventlist::set_allocated_event_timestamp_start(::nebulalink::perceptron3::TimeBase* event_timestamp_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_timestamp_start_;
  }
  if (event_timestamp_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_timestamp_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_timestamp_start, submessage_arena);
    }
    
  } else {
    
  }
  event_timestamp_start_ = event_timestamp_start;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Eventlist.event_timestamp_start)
}

// .nebulalink.perceptron3.TimeBase event_timestamp_end = 13;
inline bool Eventlist::has_event_timestamp_end() const {
  return this != internal_default_instance() && event_timestamp_end_ != NULL;
}
inline void Eventlist::clear_event_timestamp_end() {
  if (GetArenaNoVirtual() == NULL && event_timestamp_end_ != NULL) {
    delete event_timestamp_end_;
  }
  event_timestamp_end_ = NULL;
}
inline const ::nebulalink::perceptron3::TimeBase& Eventlist::_internal_event_timestamp_end() const {
  return *event_timestamp_end_;
}
inline const ::nebulalink::perceptron3::TimeBase& Eventlist::event_timestamp_end() const {
  const ::nebulalink::perceptron3::TimeBase* p = event_timestamp_end_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Eventlist.event_timestamp_end)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::TimeBase*>(
      &::nebulalink::perceptron3::_TimeBase_default_instance_);
}
inline ::nebulalink::perceptron3::TimeBase* Eventlist::release_event_timestamp_end() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Eventlist.event_timestamp_end)
  
  ::nebulalink::perceptron3::TimeBase* temp = event_timestamp_end_;
  event_timestamp_end_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::TimeBase* Eventlist::mutable_event_timestamp_end() {
  
  if (event_timestamp_end_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::TimeBase>(GetArenaNoVirtual());
    event_timestamp_end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Eventlist.event_timestamp_end)
  return event_timestamp_end_;
}
inline void Eventlist::set_allocated_event_timestamp_end(::nebulalink::perceptron3::TimeBase* event_timestamp_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_timestamp_end_;
  }
  if (event_timestamp_end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_timestamp_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_timestamp_end, submessage_arena);
    }
    
  } else {
    
  }
  event_timestamp_end_ = event_timestamp_end;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Eventlist.event_timestamp_end)
}

// -------------------------------------------------------------------

// Heartlist

// int32 device_status = 1;
inline void Heartlist::clear_device_status() {
  device_status_ = 0;
}
inline ::google::protobuf::int32 Heartlist::device_status() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.device_status)
  return device_status_;
}
inline void Heartlist::set_device_status(::google::protobuf::int32 value) {
  
  device_status_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.device_status)
}

// string err_device_id = 2;
inline void Heartlist::clear_err_device_id() {
  err_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Heartlist::err_device_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_device_id)
  return err_device_id_.GetNoArena();
}
inline void Heartlist::set_err_device_id(const ::std::string& value) {
  
  err_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_device_id)
}
#if LANG_CXX11
inline void Heartlist::set_err_device_id(::std::string&& value) {
  
  err_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Heartlist.err_device_id)
}
#endif
inline void Heartlist::set_err_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Heartlist.err_device_id)
}
inline void Heartlist::set_err_device_id(const char* value, size_t size) {
  
  err_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Heartlist.err_device_id)
}
inline ::std::string* Heartlist::mutable_err_device_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Heartlist.err_device_id)
  return err_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Heartlist::release_err_device_id() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Heartlist.err_device_id)
  
  return err_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Heartlist::set_allocated_err_device_id(::std::string* err_device_id) {
  if (err_device_id != NULL) {
    
  } else {
    
  }
  err_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_device_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Heartlist.err_device_id)
}

// int32 err_code = 3;
inline void Heartlist::clear_err_code() {
  err_code_ = 0;
}
inline ::google::protobuf::int32 Heartlist::err_code() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_code)
  return err_code_;
}
inline void Heartlist::set_err_code(::google::protobuf::int32 value) {
  
  err_code_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_code)
}

// int64 heart_time = 4;
inline void Heartlist::clear_heart_time() {
  heart_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Heartlist::heart_time() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.heart_time)
  return heart_time_;
}
inline void Heartlist::set_heart_time(::google::protobuf::int64 value) {
  
  heart_time_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.heart_time)
}

// string err_desc = 5;
inline void Heartlist::clear_err_desc() {
  err_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Heartlist::err_desc() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_desc)
  return err_desc_.GetNoArena();
}
inline void Heartlist::set_err_desc(const ::std::string& value) {
  
  err_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_desc)
}
#if LANG_CXX11
inline void Heartlist::set_err_desc(::std::string&& value) {
  
  err_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Heartlist.err_desc)
}
#endif
inline void Heartlist::set_err_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Heartlist.err_desc)
}
inline void Heartlist::set_err_desc(const char* value, size_t size) {
  
  err_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Heartlist.err_desc)
}
inline ::std::string* Heartlist::mutable_err_desc() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Heartlist.err_desc)
  return err_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Heartlist::release_err_desc() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Heartlist.err_desc)
  
  return err_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Heartlist::set_allocated_err_desc(::std::string* err_desc) {
  if (err_desc != NULL) {
    
  } else {
    
  }
  err_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_desc);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Heartlist.err_desc)
}

// int32 err_level = 6;
inline void Heartlist::clear_err_level() {
  err_level_ = 0;
}
inline ::google::protobuf::int32 Heartlist::err_level() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_level)
  return err_level_;
}
inline void Heartlist::set_err_level(::google::protobuf::int32 value) {
  
  err_level_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_level)
}

// int32 err_device_type = 7;
inline void Heartlist::clear_err_device_type() {
  err_device_type_ = 0;
}
inline ::google::protobuf::int32 Heartlist::err_device_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_device_type)
  return err_device_type_;
}
inline void Heartlist::set_err_device_type(::google::protobuf::int32 value) {
  
  err_device_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_device_type)
}

// string err_device_version = 8;
inline void Heartlist::clear_err_device_version() {
  err_device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Heartlist::err_device_version() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.err_device_version)
  return err_device_version_.GetNoArena();
}
inline void Heartlist::set_err_device_version(const ::std::string& value) {
  
  err_device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.err_device_version)
}
#if LANG_CXX11
inline void Heartlist::set_err_device_version(::std::string&& value) {
  
  err_device_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.Heartlist.err_device_version)
}
#endif
inline void Heartlist::set_err_device_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.Heartlist.err_device_version)
}
inline void Heartlist::set_err_device_version(const char* value, size_t size) {
  
  err_device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.Heartlist.err_device_version)
}
inline ::std::string* Heartlist::mutable_err_device_version() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.Heartlist.err_device_version)
  return err_device_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Heartlist::release_err_device_version() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.Heartlist.err_device_version)
  
  return err_device_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Heartlist::set_allocated_err_device_version(::std::string* err_device_version) {
  if (err_device_version != NULL) {
    
  } else {
    
  }
  err_device_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_device_version);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.Heartlist.err_device_version)
}

// float device_temp = 9;
inline void Heartlist::clear_device_temp() {
  device_temp_ = 0;
}
inline float Heartlist::device_temp() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.Heartlist.device_temp)
  return device_temp_;
}
inline void Heartlist::set_device_temp(float value) {
  
  device_temp_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.Heartlist.device_temp)
}

// -------------------------------------------------------------------

// LaneJamSenseParams

// string lane_id = 1;
inline void LaneJamSenseParams::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaneJamSenseParams::lane_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneJamSenseParams::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
}
#if LANG_CXX11
inline void LaneJamSenseParams::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
}
#endif
inline void LaneJamSenseParams::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
}
inline void LaneJamSenseParams::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
}
inline ::std::string* LaneJamSenseParams::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneJamSenseParams::release_lane_id() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneJamSenseParams::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LaneJamSenseParams.lane_id)
}

// int32 lane_types = 2;
inline void LaneJamSenseParams::clear_lane_types() {
  lane_types_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_types() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_types)
  return lane_types_;
}
inline void LaneJamSenseParams::set_lane_types(::google::protobuf::int32 value) {
  
  lane_types_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_types)
}

// float lane_sense_len = 3;
inline void LaneJamSenseParams::clear_lane_sense_len() {
  lane_sense_len_ = 0;
}
inline float LaneJamSenseParams::lane_sense_len() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_sense_len)
  return lane_sense_len_;
}
inline void LaneJamSenseParams::set_lane_sense_len(float value) {
  
  lane_sense_len_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_sense_len)
}

// int32 lane_direction = 4;
inline void LaneJamSenseParams::clear_lane_direction() {
  lane_direction_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_direction() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_direction)
  return lane_direction_;
}
inline void LaneJamSenseParams::set_lane_direction(::google::protobuf::int32 value) {
  
  lane_direction_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_direction)
}

// float lane_avg_speed = 5;
inline void LaneJamSenseParams::clear_lane_avg_speed() {
  lane_avg_speed_ = 0;
}
inline float LaneJamSenseParams::lane_avg_speed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_avg_speed)
  return lane_avg_speed_;
}
inline void LaneJamSenseParams::set_lane_avg_speed(float value) {
  
  lane_avg_speed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_avg_speed)
}

// int32 lane_veh_num = 6;
inline void LaneJamSenseParams::clear_lane_veh_num() {
  lane_veh_num_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_veh_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_veh_num)
  return lane_veh_num_;
}
inline void LaneJamSenseParams::set_lane_veh_num(::google::protobuf::int32 value) {
  
  lane_veh_num_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_veh_num)
}

// float lane_space_occupancy = 7;
inline void LaneJamSenseParams::clear_lane_space_occupancy() {
  lane_space_occupancy_ = 0;
}
inline float LaneJamSenseParams::lane_space_occupancy() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_space_occupancy)
  return lane_space_occupancy_;
}
inline void LaneJamSenseParams::set_lane_space_occupancy(float value) {
  
  lane_space_occupancy_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_space_occupancy)
}

// int32 lane_queue_len = 8;
inline void LaneJamSenseParams::clear_lane_queue_len() {
  lane_queue_len_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_queue_len() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_queue_len)
  return lane_queue_len_;
}
inline void LaneJamSenseParams::set_lane_queue_len(::google::protobuf::int32 value) {
  
  lane_queue_len_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_queue_len)
}

// int32 lane_count_time = 9;
inline void LaneJamSenseParams::clear_lane_count_time() {
  lane_count_time_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_count_time() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_count_time)
  return lane_count_time_;
}
inline void LaneJamSenseParams::set_lane_count_time(::google::protobuf::int32 value) {
  
  lane_count_time_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_count_time)
}

// int32 lane_count_flow = 10;
inline void LaneJamSenseParams::clear_lane_count_flow() {
  lane_count_flow_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_count_flow() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_count_flow)
  return lane_count_flow_;
}
inline void LaneJamSenseParams::set_lane_count_flow(::google::protobuf::int32 value) {
  
  lane_count_flow_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_count_flow)
}

// bool lane_is_count = 11;
inline void LaneJamSenseParams::clear_lane_is_count() {
  lane_is_count_ = false;
}
inline bool LaneJamSenseParams::lane_is_count() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_is_count)
  return lane_is_count_;
}
inline void LaneJamSenseParams::set_lane_is_count(bool value) {
  
  lane_is_count_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_is_count)
}

// int32 lane_ave_distance = 12;
inline void LaneJamSenseParams::clear_lane_ave_distance() {
  lane_ave_distance_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_ave_distance() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_ave_distance)
  return lane_ave_distance_;
}
inline void LaneJamSenseParams::set_lane_ave_distance(::google::protobuf::int32 value) {
  
  lane_ave_distance_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_ave_distance)
}

// int32 lane_cur_distance = 13;
inline void LaneJamSenseParams::clear_lane_cur_distance() {
  lane_cur_distance_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_cur_distance() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_cur_distance)
  return lane_cur_distance_;
}
inline void LaneJamSenseParams::set_lane_cur_distance(::google::protobuf::int32 value) {
  
  lane_cur_distance_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_cur_distance)
}

// float lane_time_occupancy = 14;
inline void LaneJamSenseParams::clear_lane_time_occupancy() {
  lane_time_occupancy_ = 0;
}
inline float LaneJamSenseParams::lane_time_occupancy() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_time_occupancy)
  return lane_time_occupancy_;
}
inline void LaneJamSenseParams::set_lane_time_occupancy(float value) {
  
  lane_time_occupancy_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_time_occupancy)
}

// .nebulalink.perceptron3.InfoEntreLineValues lane_entre_info = 15;
inline bool LaneJamSenseParams::has_lane_entre_info() const {
  return this != internal_default_instance() && lane_entre_info_ != NULL;
}
inline void LaneJamSenseParams::clear_lane_entre_info() {
  if (GetArenaNoVirtual() == NULL && lane_entre_info_ != NULL) {
    delete lane_entre_info_;
  }
  lane_entre_info_ = NULL;
}
inline const ::nebulalink::perceptron3::InfoEntreLineValues& LaneJamSenseParams::_internal_lane_entre_info() const {
  return *lane_entre_info_;
}
inline const ::nebulalink::perceptron3::InfoEntreLineValues& LaneJamSenseParams::lane_entre_info() const {
  const ::nebulalink::perceptron3::InfoEntreLineValues* p = lane_entre_info_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_entre_info)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::InfoEntreLineValues*>(
      &::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_);
}
inline ::nebulalink::perceptron3::InfoEntreLineValues* LaneJamSenseParams::release_lane_entre_info() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LaneJamSenseParams.lane_entre_info)
  
  ::nebulalink::perceptron3::InfoEntreLineValues* temp = lane_entre_info_;
  lane_entre_info_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::InfoEntreLineValues* LaneJamSenseParams::mutable_lane_entre_info() {
  
  if (lane_entre_info_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::InfoEntreLineValues>(GetArenaNoVirtual());
    lane_entre_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LaneJamSenseParams.lane_entre_info)
  return lane_entre_info_;
}
inline void LaneJamSenseParams::set_allocated_lane_entre_info(::nebulalink::perceptron3::InfoEntreLineValues* lane_entre_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_entre_info_;
  }
  if (lane_entre_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_entre_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_entre_info, submessage_arena);
    }
    
  } else {
    
  }
  lane_entre_info_ = lane_entre_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LaneJamSenseParams.lane_entre_info)
}

// .nebulalink.perceptron3.InfoEndLineValues lane_end_info = 16;
inline bool LaneJamSenseParams::has_lane_end_info() const {
  return this != internal_default_instance() && lane_end_info_ != NULL;
}
inline void LaneJamSenseParams::clear_lane_end_info() {
  if (GetArenaNoVirtual() == NULL && lane_end_info_ != NULL) {
    delete lane_end_info_;
  }
  lane_end_info_ = NULL;
}
inline const ::nebulalink::perceptron3::InfoEndLineValues& LaneJamSenseParams::_internal_lane_end_info() const {
  return *lane_end_info_;
}
inline const ::nebulalink::perceptron3::InfoEndLineValues& LaneJamSenseParams::lane_end_info() const {
  const ::nebulalink::perceptron3::InfoEndLineValues* p = lane_end_info_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_end_info)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::InfoEndLineValues*>(
      &::nebulalink::perceptron3::_InfoEndLineValues_default_instance_);
}
inline ::nebulalink::perceptron3::InfoEndLineValues* LaneJamSenseParams::release_lane_end_info() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LaneJamSenseParams.lane_end_info)
  
  ::nebulalink::perceptron3::InfoEndLineValues* temp = lane_end_info_;
  lane_end_info_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::InfoEndLineValues* LaneJamSenseParams::mutable_lane_end_info() {
  
  if (lane_end_info_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::InfoEndLineValues>(GetArenaNoVirtual());
    lane_end_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LaneJamSenseParams.lane_end_info)
  return lane_end_info_;
}
inline void LaneJamSenseParams::set_allocated_lane_end_info(::nebulalink::perceptron3::InfoEndLineValues* lane_end_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_end_info_;
  }
  if (lane_end_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_end_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_end_info, submessage_arena);
    }
    
  } else {
    
  }
  lane_end_info_ = lane_end_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LaneJamSenseParams.lane_end_info)
}

// int32 lane_num = 17;
inline void LaneJamSenseParams::clear_lane_num() {
  lane_num_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_num)
  return lane_num_;
}
inline void LaneJamSenseParams::set_lane_num(::google::protobuf::int32 value) {
  
  lane_num_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_num)
}

// int32 lane_no = 18;
inline void LaneJamSenseParams::clear_lane_no() {
  lane_no_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_no() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_no)
  return lane_no_;
}
inline void LaneJamSenseParams::set_lane_no(::google::protobuf::int32 value) {
  
  lane_no_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_no)
}

// int32 lane_peron_volume = 19;
inline void LaneJamSenseParams::clear_lane_peron_volume() {
  lane_peron_volume_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_peron_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_peron_volume)
  return lane_peron_volume_;
}
inline void LaneJamSenseParams::set_lane_peron_volume(::google::protobuf::int32 value) {
  
  lane_peron_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_peron_volume)
}

// int32 lane_no_motor_volume = 20;
inline void LaneJamSenseParams::clear_lane_no_motor_volume() {
  lane_no_motor_volume_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_no_motor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_no_motor_volume)
  return lane_no_motor_volume_;
}
inline void LaneJamSenseParams::set_lane_no_motor_volume(::google::protobuf::int32 value) {
  
  lane_no_motor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_no_motor_volume)
}

// int32 lane_minmotor_volume = 21;
inline void LaneJamSenseParams::clear_lane_minmotor_volume() {
  lane_minmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_minmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_minmotor_volume)
  return lane_minmotor_volume_;
}
inline void LaneJamSenseParams::set_lane_minmotor_volume(::google::protobuf::int32 value) {
  
  lane_minmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_minmotor_volume)
}

// int32 lane_medmotor_volume = 22;
inline void LaneJamSenseParams::clear_lane_medmotor_volume() {
  lane_medmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_medmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_medmotor_volume)
  return lane_medmotor_volume_;
}
inline void LaneJamSenseParams::set_lane_medmotor_volume(::google::protobuf::int32 value) {
  
  lane_medmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_medmotor_volume)
}

// int32 lane_maxmotor_volume = 23;
inline void LaneJamSenseParams::clear_lane_maxmotor_volume() {
  lane_maxmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_maxmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_maxmotor_volume)
  return lane_maxmotor_volume_;
}
inline void LaneJamSenseParams::set_lane_maxmotor_volume(::google::protobuf::int32 value) {
  
  lane_maxmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_maxmotor_volume)
}

// int32 lane_pcu = 24;
inline void LaneJamSenseParams::clear_lane_pcu() {
  lane_pcu_ = 0;
}
inline ::google::protobuf::int32 LaneJamSenseParams::lane_pcu() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_pcu)
  return lane_pcu_;
}
inline void LaneJamSenseParams::set_lane_pcu(::google::protobuf::int32 value) {
  
  lane_pcu_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_pcu)
}

// float lane_avspeed = 25;
inline void LaneJamSenseParams::clear_lane_avspeed() {
  lane_avspeed_ = 0;
}
inline float LaneJamSenseParams::lane_avspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_avspeed)
  return lane_avspeed_;
}
inline void LaneJamSenseParams::set_lane_avspeed(float value) {
  
  lane_avspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_avspeed)
}

// float lane_headway = 26;
inline void LaneJamSenseParams::clear_lane_headway() {
  lane_headway_ = 0;
}
inline float LaneJamSenseParams::lane_headway() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_headway)
  return lane_headway_;
}
inline void LaneJamSenseParams::set_lane_headway(float value) {
  
  lane_headway_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_headway)
}

// float lane_gap = 27;
inline void LaneJamSenseParams::clear_lane_gap() {
  lane_gap_ = 0;
}
inline float LaneJamSenseParams::lane_gap() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_gap)
  return lane_gap_;
}
inline void LaneJamSenseParams::set_lane_gap(float value) {
  
  lane_gap_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_gap)
}

// float lane_avdistance = 28;
inline void LaneJamSenseParams::clear_lane_avdistance() {
  lane_avdistance_ = 0;
}
inline float LaneJamSenseParams::lane_avdistance() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_avdistance)
  return lane_avdistance_;
}
inline void LaneJamSenseParams::set_lane_avdistance(float value) {
  
  lane_avdistance_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_avdistance)
}

// float lane_avstop = 29;
inline void LaneJamSenseParams::clear_lane_avstop() {
  lane_avstop_ = 0;
}
inline float LaneJamSenseParams::lane_avstop() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_avstop)
  return lane_avstop_;
}
inline void LaneJamSenseParams::set_lane_avstop(float value) {
  
  lane_avstop_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_avstop)
}

// float lane_speed85 = 30;
inline void LaneJamSenseParams::clear_lane_speed85() {
  lane_speed85_ = 0;
}
inline float LaneJamSenseParams::lane_speed85() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_speed85)
  return lane_speed85_;
}
inline void LaneJamSenseParams::set_lane_speed85(float value) {
  
  lane_speed85_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_speed85)
}

// float lane_queueLength = 31;
inline void LaneJamSenseParams::clear_lane_queuelength() {
  lane_queuelength_ = 0;
}
inline float LaneJamSenseParams::lane_queuelength() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_queueLength)
  return lane_queuelength_;
}
inline void LaneJamSenseParams::set_lane_queuelength(float value) {
  
  lane_queuelength_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_queueLength)
}

// float lane_stopline = 32;
inline void LaneJamSenseParams::clear_lane_stopline() {
  lane_stopline_ = 0;
}
inline float LaneJamSenseParams::lane_stopline() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LaneJamSenseParams.lane_stopline)
  return lane_stopline_;
}
inline void LaneJamSenseParams::set_lane_stopline(float value) {
  
  lane_stopline_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LaneJamSenseParams.lane_stopline)
}

// -------------------------------------------------------------------

// LinkJamSenseParams

// string link_id = 1;
inline void LinkJamSenseParams::clear_link_id() {
  link_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkJamSenseParams::link_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_id)
  return link_id_.GetNoArena();
}
inline void LinkJamSenseParams::set_link_id(const ::std::string& value) {
  
  link_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_id)
}
#if LANG_CXX11
inline void LinkJamSenseParams::set_link_id(::std::string&& value) {
  
  link_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.LinkJamSenseParams.link_id)
}
#endif
inline void LinkJamSenseParams::set_link_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.LinkJamSenseParams.link_id)
}
inline void LinkJamSenseParams::set_link_id(const char* value, size_t size) {
  
  link_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.LinkJamSenseParams.link_id)
}
inline ::std::string* LinkJamSenseParams::mutable_link_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_id)
  return link_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkJamSenseParams::release_link_id() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_id)
  
  return link_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkJamSenseParams::set_allocated_link_id(::std::string* link_id) {
  if (link_id != NULL) {
    
  } else {
    
  }
  link_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_id)
}

// float link_len = 2;
inline void LinkJamSenseParams::clear_link_len() {
  link_len_ = 0;
}
inline float LinkJamSenseParams::link_len() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_len)
  return link_len_;
}
inline void LinkJamSenseParams::set_link_len(float value) {
  
  link_len_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_len)
}

// float link_avgspeed = 3;
inline void LinkJamSenseParams::clear_link_avgspeed() {
  link_avgspeed_ = 0;
}
inline float LinkJamSenseParams::link_avgspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_avgspeed)
  return link_avgspeed_;
}
inline void LinkJamSenseParams::set_link_avgspeed(float value) {
  
  link_avgspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_avgspeed)
}

// int32 link_veh_num = 4;
inline void LinkJamSenseParams::clear_link_veh_num() {
  link_veh_num_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_veh_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_veh_num)
  return link_veh_num_;
}
inline void LinkJamSenseParams::set_link_veh_num(::google::protobuf::int32 value) {
  
  link_veh_num_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_veh_num)
}

// int32 link_type = 5;
inline void LinkJamSenseParams::clear_link_type() {
  link_type_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_type() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_type)
  return link_type_;
}
inline void LinkJamSenseParams::set_link_type(::google::protobuf::int32 value) {
  
  link_type_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_type)
}

// int32 link_direction = 6;
inline void LinkJamSenseParams::clear_link_direction() {
  link_direction_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_direction() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_direction)
  return link_direction_;
}
inline void LinkJamSenseParams::set_link_direction(::google::protobuf::int32 value) {
  
  link_direction_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_direction)
}

// float link_space_occupancy = 7;
inline void LinkJamSenseParams::clear_link_space_occupancy() {
  link_space_occupancy_ = 0;
}
inline float LinkJamSenseParams::link_space_occupancy() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_space_occupancy)
  return link_space_occupancy_;
}
inline void LinkJamSenseParams::set_link_space_occupancy(float value) {
  
  link_space_occupancy_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_space_occupancy)
}

// float link_time_occupancy = 8;
inline void LinkJamSenseParams::clear_link_time_occupancy() {
  link_time_occupancy_ = 0;
}
inline float LinkJamSenseParams::link_time_occupancy() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_time_occupancy)
  return link_time_occupancy_;
}
inline void LinkJamSenseParams::set_link_time_occupancy(float value) {
  
  link_time_occupancy_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_time_occupancy)
}

// int32 link_count_time = 9;
inline void LinkJamSenseParams::clear_link_count_time() {
  link_count_time_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_count_time() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_count_time)
  return link_count_time_;
}
inline void LinkJamSenseParams::set_link_count_time(::google::protobuf::int32 value) {
  
  link_count_time_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_count_time)
}

// int32 link_count_flow = 10;
inline void LinkJamSenseParams::clear_link_count_flow() {
  link_count_flow_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_count_flow() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_count_flow)
  return link_count_flow_;
}
inline void LinkJamSenseParams::set_link_count_flow(::google::protobuf::int32 value) {
  
  link_count_flow_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_count_flow)
}

// bool link_is_count = 11;
inline void LinkJamSenseParams::clear_link_is_count() {
  link_is_count_ = false;
}
inline bool LinkJamSenseParams::link_is_count() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_is_count)
  return link_is_count_;
}
inline void LinkJamSenseParams::set_link_is_count(bool value) {
  
  link_is_count_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_is_count)
}

// .nebulalink.perceptron3.InfoEntreLineValues link_entre_info = 12;
inline bool LinkJamSenseParams::has_link_entre_info() const {
  return this != internal_default_instance() && link_entre_info_ != NULL;
}
inline void LinkJamSenseParams::clear_link_entre_info() {
  if (GetArenaNoVirtual() == NULL && link_entre_info_ != NULL) {
    delete link_entre_info_;
  }
  link_entre_info_ = NULL;
}
inline const ::nebulalink::perceptron3::InfoEntreLineValues& LinkJamSenseParams::_internal_link_entre_info() const {
  return *link_entre_info_;
}
inline const ::nebulalink::perceptron3::InfoEntreLineValues& LinkJamSenseParams::link_entre_info() const {
  const ::nebulalink::perceptron3::InfoEntreLineValues* p = link_entre_info_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_entre_info)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::InfoEntreLineValues*>(
      &::nebulalink::perceptron3::_InfoEntreLineValues_default_instance_);
}
inline ::nebulalink::perceptron3::InfoEntreLineValues* LinkJamSenseParams::release_link_entre_info() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_entre_info)
  
  ::nebulalink::perceptron3::InfoEntreLineValues* temp = link_entre_info_;
  link_entre_info_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::InfoEntreLineValues* LinkJamSenseParams::mutable_link_entre_info() {
  
  if (link_entre_info_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::InfoEntreLineValues>(GetArenaNoVirtual());
    link_entre_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_entre_info)
  return link_entre_info_;
}
inline void LinkJamSenseParams::set_allocated_link_entre_info(::nebulalink::perceptron3::InfoEntreLineValues* link_entre_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete link_entre_info_;
  }
  if (link_entre_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      link_entre_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_entre_info, submessage_arena);
    }
    
  } else {
    
  }
  link_entre_info_ = link_entre_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_entre_info)
}

// .nebulalink.perceptron3.InfoEndLineValues link_end_info = 13;
inline bool LinkJamSenseParams::has_link_end_info() const {
  return this != internal_default_instance() && link_end_info_ != NULL;
}
inline void LinkJamSenseParams::clear_link_end_info() {
  if (GetArenaNoVirtual() == NULL && link_end_info_ != NULL) {
    delete link_end_info_;
  }
  link_end_info_ = NULL;
}
inline const ::nebulalink::perceptron3::InfoEndLineValues& LinkJamSenseParams::_internal_link_end_info() const {
  return *link_end_info_;
}
inline const ::nebulalink::perceptron3::InfoEndLineValues& LinkJamSenseParams::link_end_info() const {
  const ::nebulalink::perceptron3::InfoEndLineValues* p = link_end_info_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_end_info)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::InfoEndLineValues*>(
      &::nebulalink::perceptron3::_InfoEndLineValues_default_instance_);
}
inline ::nebulalink::perceptron3::InfoEndLineValues* LinkJamSenseParams::release_link_end_info() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_end_info)
  
  ::nebulalink::perceptron3::InfoEndLineValues* temp = link_end_info_;
  link_end_info_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::InfoEndLineValues* LinkJamSenseParams::mutable_link_end_info() {
  
  if (link_end_info_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::InfoEndLineValues>(GetArenaNoVirtual());
    link_end_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_end_info)
  return link_end_info_;
}
inline void LinkJamSenseParams::set_allocated_link_end_info(::nebulalink::perceptron3::InfoEndLineValues* link_end_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete link_end_info_;
  }
  if (link_end_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      link_end_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_end_info, submessage_arena);
    }
    
  } else {
    
  }
  link_end_info_ = link_end_info;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_end_info)
}

// string link_deviceid = 14;
inline void LinkJamSenseParams::clear_link_deviceid() {
  link_deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkJamSenseParams::link_deviceid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
  return link_deviceid_.GetNoArena();
}
inline void LinkJamSenseParams::set_link_deviceid(const ::std::string& value) {
  
  link_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
}
#if LANG_CXX11
inline void LinkJamSenseParams::set_link_deviceid(::std::string&& value) {
  
  link_deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
}
#endif
inline void LinkJamSenseParams::set_link_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
}
inline void LinkJamSenseParams::set_link_deviceid(const char* value, size_t size) {
  
  link_deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
}
inline ::std::string* LinkJamSenseParams::mutable_link_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
  return link_deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkJamSenseParams::release_link_deviceid() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
  
  return link_deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkJamSenseParams::set_allocated_link_deviceid(::std::string* link_deviceid) {
  if (link_deviceid != NULL) {
    
  } else {
    
  }
  link_deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_deviceid);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_deviceid)
}

// int32 link_heading = 15;
inline void LinkJamSenseParams::clear_link_heading() {
  link_heading_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_heading() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_heading)
  return link_heading_;
}
inline void LinkJamSenseParams::set_link_heading(::google::protobuf::int32 value) {
  
  link_heading_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_heading)
}

// int32 link_phaseid = 16;
inline void LinkJamSenseParams::clear_link_phaseid() {
  link_phaseid_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_phaseid() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_phaseid)
  return link_phaseid_;
}
inline void LinkJamSenseParams::set_link_phaseid(::google::protobuf::int32 value) {
  
  link_phaseid_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_phaseid)
}

// string link_name = 17;
inline void LinkJamSenseParams::clear_link_name() {
  link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkJamSenseParams::link_name() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_name)
  return link_name_.GetNoArena();
}
inline void LinkJamSenseParams::set_link_name(const ::std::string& value) {
  
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_name)
}
#if LANG_CXX11
inline void LinkJamSenseParams::set_link_name(::std::string&& value) {
  
  link_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.LinkJamSenseParams.link_name)
}
#endif
inline void LinkJamSenseParams::set_link_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.LinkJamSenseParams.link_name)
}
inline void LinkJamSenseParams::set_link_name(const char* value, size_t size) {
  
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.LinkJamSenseParams.link_name)
}
inline ::std::string* LinkJamSenseParams::mutable_link_name() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_name)
  return link_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkJamSenseParams::release_link_name() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_name)
  
  return link_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkJamSenseParams::set_allocated_link_name(::std::string* link_name) {
  if (link_name != NULL) {
    
  } else {
    
  }
  link_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_name);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_name)
}

// int32 link_no = 18;
inline void LinkJamSenseParams::clear_link_no() {
  link_no_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_no() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_no)
  return link_no_;
}
inline void LinkJamSenseParams::set_link_no(::google::protobuf::int32 value) {
  
  link_no_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_no)
}

// .nebulalink.perceptron3.PointGPS link_gps = 19;
inline bool LinkJamSenseParams::has_link_gps() const {
  return this != internal_default_instance() && link_gps_ != NULL;
}
inline void LinkJamSenseParams::clear_link_gps() {
  if (GetArenaNoVirtual() == NULL && link_gps_ != NULL) {
    delete link_gps_;
  }
  link_gps_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS& LinkJamSenseParams::_internal_link_gps() const {
  return *link_gps_;
}
inline const ::nebulalink::perceptron3::PointGPS& LinkJamSenseParams::link_gps() const {
  const ::nebulalink::perceptron3::PointGPS* p = link_gps_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_gps)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS*>(
      &::nebulalink::perceptron3::_PointGPS_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS* LinkJamSenseParams::release_link_gps() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.LinkJamSenseParams.link_gps)
  
  ::nebulalink::perceptron3::PointGPS* temp = link_gps_;
  link_gps_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS* LinkJamSenseParams::mutable_link_gps() {
  
  if (link_gps_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(GetArenaNoVirtual());
    link_gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.link_gps)
  return link_gps_;
}
inline void LinkJamSenseParams::set_allocated_link_gps(::nebulalink::perceptron3::PointGPS* link_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete link_gps_;
  }
  if (link_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      link_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, link_gps, submessage_arena);
    }
    
  } else {
    
  }
  link_gps_ = link_gps;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.LinkJamSenseParams.link_gps)
}

// int32 link_measnum = 20;
inline void LinkJamSenseParams::clear_link_measnum() {
  link_measnum_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_measnum() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_measnum)
  return link_measnum_;
}
inline void LinkJamSenseParams::set_link_measnum(::google::protobuf::int32 value) {
  
  link_measnum_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_measnum)
}

// int32 link_num = 21;
inline void LinkJamSenseParams::clear_link_num() {
  link_num_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_num() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_num)
  return link_num_;
}
inline void LinkJamSenseParams::set_link_num(::google::protobuf::int32 value) {
  
  link_num_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_num)
}

// int32 link_motor_volume = 22;
inline void LinkJamSenseParams::clear_link_motor_volume() {
  link_motor_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_motor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_motor_volume)
  return link_motor_volume_;
}
inline void LinkJamSenseParams::set_link_motor_volume(::google::protobuf::int32 value) {
  
  link_motor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_motor_volume)
}

// int32 link_peron_volume = 23;
inline void LinkJamSenseParams::clear_link_peron_volume() {
  link_peron_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_peron_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_peron_volume)
  return link_peron_volume_;
}
inline void LinkJamSenseParams::set_link_peron_volume(::google::protobuf::int32 value) {
  
  link_peron_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_peron_volume)
}

// int32 link_no_motor_volume = 24;
inline void LinkJamSenseParams::clear_link_no_motor_volume() {
  link_no_motor_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_no_motor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_no_motor_volume)
  return link_no_motor_volume_;
}
inline void LinkJamSenseParams::set_link_no_motor_volume(::google::protobuf::int32 value) {
  
  link_no_motor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_no_motor_volume)
}

// int32 link_minmotor_volume = 25;
inline void LinkJamSenseParams::clear_link_minmotor_volume() {
  link_minmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_minmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_minmotor_volume)
  return link_minmotor_volume_;
}
inline void LinkJamSenseParams::set_link_minmotor_volume(::google::protobuf::int32 value) {
  
  link_minmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_minmotor_volume)
}

// int32 link_medmotor_volume = 26;
inline void LinkJamSenseParams::clear_link_medmotor_volume() {
  link_medmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_medmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_medmotor_volume)
  return link_medmotor_volume_;
}
inline void LinkJamSenseParams::set_link_medmotor_volume(::google::protobuf::int32 value) {
  
  link_medmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_medmotor_volume)
}

// int32 link_maxmotor_volume = 27;
inline void LinkJamSenseParams::clear_link_maxmotor_volume() {
  link_maxmotor_volume_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_maxmotor_volume() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_maxmotor_volume)
  return link_maxmotor_volume_;
}
inline void LinkJamSenseParams::set_link_maxmotor_volume(::google::protobuf::int32 value) {
  
  link_maxmotor_volume_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_maxmotor_volume)
}

// int32 link_pcu = 28;
inline void LinkJamSenseParams::clear_link_pcu() {
  link_pcu_ = 0;
}
inline ::google::protobuf::int32 LinkJamSenseParams::link_pcu() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_pcu)
  return link_pcu_;
}
inline void LinkJamSenseParams::set_link_pcu(::google::protobuf::int32 value) {
  
  link_pcu_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_pcu)
}

// float link_avspeed = 29;
inline void LinkJamSenseParams::clear_link_avspeed() {
  link_avspeed_ = 0;
}
inline float LinkJamSenseParams::link_avspeed() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_avspeed)
  return link_avspeed_;
}
inline void LinkJamSenseParams::set_link_avspeed(float value) {
  
  link_avspeed_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_avspeed)
}

// float link_time_occupany = 30;
inline void LinkJamSenseParams::clear_link_time_occupany() {
  link_time_occupany_ = 0;
}
inline float LinkJamSenseParams::link_time_occupany() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_time_occupany)
  return link_time_occupany_;
}
inline void LinkJamSenseParams::set_link_time_occupany(float value) {
  
  link_time_occupany_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_time_occupany)
}

// float link_headway = 31;
inline void LinkJamSenseParams::clear_link_headway() {
  link_headway_ = 0;
}
inline float LinkJamSenseParams::link_headway() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_headway)
  return link_headway_;
}
inline void LinkJamSenseParams::set_link_headway(float value) {
  
  link_headway_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_headway)
}

// float link_gap = 32;
inline void LinkJamSenseParams::clear_link_gap() {
  link_gap_ = 0;
}
inline float LinkJamSenseParams::link_gap() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_gap)
  return link_gap_;
}
inline void LinkJamSenseParams::set_link_gap(float value) {
  
  link_gap_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_gap)
}

// float link_avdistance = 33;
inline void LinkJamSenseParams::clear_link_avdistance() {
  link_avdistance_ = 0;
}
inline float LinkJamSenseParams::link_avdistance() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_avdistance)
  return link_avdistance_;
}
inline void LinkJamSenseParams::set_link_avdistance(float value) {
  
  link_avdistance_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_avdistance)
}

// float link_avstop = 34;
inline void LinkJamSenseParams::clear_link_avstop() {
  link_avstop_ = 0;
}
inline float LinkJamSenseParams::link_avstop() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_avstop)
  return link_avstop_;
}
inline void LinkJamSenseParams::set_link_avstop(float value) {
  
  link_avstop_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_avstop)
}

// float link_speed85 = 35;
inline void LinkJamSenseParams::clear_link_speed85() {
  link_speed85_ = 0;
}
inline float LinkJamSenseParams::link_speed85() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_speed85)
  return link_speed85_;
}
inline void LinkJamSenseParams::set_link_speed85(float value) {
  
  link_speed85_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_speed85)
}

// float link_queueLength = 36;
inline void LinkJamSenseParams::clear_link_queuelength() {
  link_queuelength_ = 0;
}
inline float LinkJamSenseParams::link_queuelength() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_queueLength)
  return link_queuelength_;
}
inline void LinkJamSenseParams::set_link_queuelength(float value) {
  
  link_queuelength_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_queueLength)
}

// float link_stopline = 37;
inline void LinkJamSenseParams::clear_link_stopline() {
  link_stopline_ = 0;
}
inline float LinkJamSenseParams::link_stopline() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_stopline)
  return link_stopline_;
}
inline void LinkJamSenseParams::set_link_stopline(float value) {
  
  link_stopline_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_stopline)
}

// float link_space_occupany = 38;
inline void LinkJamSenseParams::clear_link_space_occupany() {
  link_space_occupany_ = 0;
}
inline float LinkJamSenseParams::link_space_occupany() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.link_space_occupany)
  return link_space_occupany_;
}
inline void LinkJamSenseParams::set_link_space_occupany(float value) {
  
  link_space_occupany_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.LinkJamSenseParams.link_space_occupany)
}

// repeated .nebulalink.perceptron3.LaneJamSenseParams road_lanelist = 39;
inline int LinkJamSenseParams::road_lanelist_size() const {
  return road_lanelist_.size();
}
inline void LinkJamSenseParams::clear_road_lanelist() {
  road_lanelist_.Clear();
}
inline ::nebulalink::perceptron3::LaneJamSenseParams* LinkJamSenseParams::mutable_road_lanelist(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.LinkJamSenseParams.road_lanelist)
  return road_lanelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >*
LinkJamSenseParams::mutable_road_lanelist() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.LinkJamSenseParams.road_lanelist)
  return &road_lanelist_;
}
inline const ::nebulalink::perceptron3::LaneJamSenseParams& LinkJamSenseParams::road_lanelist(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.LinkJamSenseParams.road_lanelist)
  return road_lanelist_.Get(index);
}
inline ::nebulalink::perceptron3::LaneJamSenseParams* LinkJamSenseParams::add_road_lanelist() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.LinkJamSenseParams.road_lanelist)
  return road_lanelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >&
LinkJamSenseParams::road_lanelist() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.LinkJamSenseParams.road_lanelist)
  return road_lanelist_;
}

// -------------------------------------------------------------------

// PerceptronSet

// string devide_id = 1;
inline void PerceptronSet::clear_devide_id() {
  devide_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PerceptronSet::devide_id() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.devide_id)
  return devide_id_.GetNoArena();
}
inline void PerceptronSet::set_devide_id(const ::std::string& value) {
  
  devide_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PerceptronSet.devide_id)
}
#if LANG_CXX11
inline void PerceptronSet::set_devide_id(::std::string&& value) {
  
  devide_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nebulalink.perceptron3.PerceptronSet.devide_id)
}
#endif
inline void PerceptronSet::set_devide_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devide_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nebulalink.perceptron3.PerceptronSet.devide_id)
}
inline void PerceptronSet::set_devide_id(const char* value, size_t size) {
  
  devide_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nebulalink.perceptron3.PerceptronSet.devide_id)
}
inline ::std::string* PerceptronSet::mutable_devide_id() {
  
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.devide_id)
  return devide_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerceptronSet::release_devide_id() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PerceptronSet.devide_id)
  
  return devide_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerceptronSet::set_allocated_devide_id(::std::string* devide_id) {
  if (devide_id != NULL) {
    
  } else {
    
  }
  devide_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devide_id);
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PerceptronSet.devide_id)
}

// bool devide_is_true = 2;
inline void PerceptronSet::clear_devide_is_true() {
  devide_is_true_ = false;
}
inline bool PerceptronSet::devide_is_true() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.devide_is_true)
  return devide_is_true_;
}
inline void PerceptronSet::set_devide_is_true(bool value) {
  
  devide_is_true_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PerceptronSet.devide_is_true)
}

// int64 time_stamp = 3;
inline void PerceptronSet::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PerceptronSet::time_stamp() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.time_stamp)
  return time_stamp_;
}
inline void PerceptronSet::set_time_stamp(::google::protobuf::int64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PerceptronSet.time_stamp)
}

// int32 number_frame = 4;
inline void PerceptronSet::clear_number_frame() {
  number_frame_ = 0;
}
inline ::google::protobuf::int32 PerceptronSet::number_frame() const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.number_frame)
  return number_frame_;
}
inline void PerceptronSet::set_number_frame(::google::protobuf::int32 value) {
  
  number_frame_ = value;
  // @@protoc_insertion_point(field_set:nebulalink.perceptron3.PerceptronSet.number_frame)
}

// .nebulalink.perceptron3.PointGPS perception_gps = 5;
inline bool PerceptronSet::has_perception_gps() const {
  return this != internal_default_instance() && perception_gps_ != NULL;
}
inline void PerceptronSet::clear_perception_gps() {
  if (GetArenaNoVirtual() == NULL && perception_gps_ != NULL) {
    delete perception_gps_;
  }
  perception_gps_ = NULL;
}
inline const ::nebulalink::perceptron3::PointGPS& PerceptronSet::_internal_perception_gps() const {
  return *perception_gps_;
}
inline const ::nebulalink::perceptron3::PointGPS& PerceptronSet::perception_gps() const {
  const ::nebulalink::perceptron3::PointGPS* p = perception_gps_;
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.perception_gps)
  return p != NULL ? *p : *reinterpret_cast<const ::nebulalink::perceptron3::PointGPS*>(
      &::nebulalink::perceptron3::_PointGPS_default_instance_);
}
inline ::nebulalink::perceptron3::PointGPS* PerceptronSet::release_perception_gps() {
  // @@protoc_insertion_point(field_release:nebulalink.perceptron3.PerceptronSet.perception_gps)
  
  ::nebulalink::perceptron3::PointGPS* temp = perception_gps_;
  perception_gps_ = NULL;
  return temp;
}
inline ::nebulalink::perceptron3::PointGPS* PerceptronSet::mutable_perception_gps() {
  
  if (perception_gps_ == NULL) {
    auto* p = CreateMaybeMessage<::nebulalink::perceptron3::PointGPS>(GetArenaNoVirtual());
    perception_gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.perception_gps)
  return perception_gps_;
}
inline void PerceptronSet::set_allocated_perception_gps(::nebulalink::perceptron3::PointGPS* perception_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete perception_gps_;
  }
  if (perception_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      perception_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, perception_gps, submessage_arena);
    }
    
  } else {
    
  }
  perception_gps_ = perception_gps;
  // @@protoc_insertion_point(field_set_allocated:nebulalink.perceptron3.PerceptronSet.perception_gps)
}

// repeated .nebulalink.perceptron3.Perceptron perceptron = 6;
inline int PerceptronSet::perceptron_size() const {
  return perceptron_.size();
}
inline void PerceptronSet::clear_perceptron() {
  perceptron_.Clear();
}
inline ::nebulalink::perceptron3::Perceptron* PerceptronSet::mutable_perceptron(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.perceptron)
  return perceptron_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >*
PerceptronSet::mutable_perceptron() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.perceptron)
  return &perceptron_;
}
inline const ::nebulalink::perceptron3::Perceptron& PerceptronSet::perceptron(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.perceptron)
  return perceptron_.Get(index);
}
inline ::nebulalink::perceptron3::Perceptron* PerceptronSet::add_perceptron() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.perceptron)
  return perceptron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Perceptron >&
PerceptronSet::perceptron() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.perceptron)
  return perceptron_;
}

// repeated .nebulalink.perceptron3.LaneJamSenseParams lane_jam_sense_params = 7;
inline int PerceptronSet::lane_jam_sense_params_size() const {
  return lane_jam_sense_params_.size();
}
inline void PerceptronSet::clear_lane_jam_sense_params() {
  lane_jam_sense_params_.Clear();
}
inline ::nebulalink::perceptron3::LaneJamSenseParams* PerceptronSet::mutable_lane_jam_sense_params(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.lane_jam_sense_params)
  return lane_jam_sense_params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >*
PerceptronSet::mutable_lane_jam_sense_params() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.lane_jam_sense_params)
  return &lane_jam_sense_params_;
}
inline const ::nebulalink::perceptron3::LaneJamSenseParams& PerceptronSet::lane_jam_sense_params(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.lane_jam_sense_params)
  return lane_jam_sense_params_.Get(index);
}
inline ::nebulalink::perceptron3::LaneJamSenseParams* PerceptronSet::add_lane_jam_sense_params() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.lane_jam_sense_params)
  return lane_jam_sense_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LaneJamSenseParams >&
PerceptronSet::lane_jam_sense_params() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.lane_jam_sense_params)
  return lane_jam_sense_params_;
}

// repeated .nebulalink.perceptron3.LinkJamSenseParams link_jam_sense_params = 8;
inline int PerceptronSet::link_jam_sense_params_size() const {
  return link_jam_sense_params_.size();
}
inline void PerceptronSet::clear_link_jam_sense_params() {
  link_jam_sense_params_.Clear();
}
inline ::nebulalink::perceptron3::LinkJamSenseParams* PerceptronSet::mutable_link_jam_sense_params(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.link_jam_sense_params)
  return link_jam_sense_params_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >*
PerceptronSet::mutable_link_jam_sense_params() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.link_jam_sense_params)
  return &link_jam_sense_params_;
}
inline const ::nebulalink::perceptron3::LinkJamSenseParams& PerceptronSet::link_jam_sense_params(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.link_jam_sense_params)
  return link_jam_sense_params_.Get(index);
}
inline ::nebulalink::perceptron3::LinkJamSenseParams* PerceptronSet::add_link_jam_sense_params() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.link_jam_sense_params)
  return link_jam_sense_params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::LinkJamSenseParams >&
PerceptronSet::link_jam_sense_params() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.link_jam_sense_params)
  return link_jam_sense_params_;
}

// repeated .nebulalink.perceptron3.OnLineValues on_line_values = 9;
inline int PerceptronSet::on_line_values_size() const {
  return on_line_values_.size();
}
inline void PerceptronSet::clear_on_line_values() {
  on_line_values_.Clear();
}
inline ::nebulalink::perceptron3::OnLineValues* PerceptronSet::mutable_on_line_values(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.on_line_values)
  return on_line_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::OnLineValues >*
PerceptronSet::mutable_on_line_values() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.on_line_values)
  return &on_line_values_;
}
inline const ::nebulalink::perceptron3::OnLineValues& PerceptronSet::on_line_values(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.on_line_values)
  return on_line_values_.Get(index);
}
inline ::nebulalink::perceptron3::OnLineValues* PerceptronSet::add_on_line_values() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.on_line_values)
  return on_line_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::OnLineValues >&
PerceptronSet::on_line_values() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.on_line_values)
  return on_line_values_;
}

// repeated .nebulalink.perceptron3.FrameArray frame_array = 10;
inline int PerceptronSet::frame_array_size() const {
  return frame_array_.size();
}
inline void PerceptronSet::clear_frame_array() {
  frame_array_.Clear();
}
inline ::nebulalink::perceptron3::FrameArray* PerceptronSet::mutable_frame_array(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.frame_array)
  return frame_array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::FrameArray >*
PerceptronSet::mutable_frame_array() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.frame_array)
  return &frame_array_;
}
inline const ::nebulalink::perceptron3::FrameArray& PerceptronSet::frame_array(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.frame_array)
  return frame_array_.Get(index);
}
inline ::nebulalink::perceptron3::FrameArray* PerceptronSet::add_frame_array() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.frame_array)
  return frame_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::FrameArray >&
PerceptronSet::frame_array() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.frame_array)
  return frame_array_;
}

// repeated .nebulalink.perceptron3.Eventlist event_list = 11;
inline int PerceptronSet::event_list_size() const {
  return event_list_.size();
}
inline void PerceptronSet::clear_event_list() {
  event_list_.Clear();
}
inline ::nebulalink::perceptron3::Eventlist* PerceptronSet::mutable_event_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.event_list)
  return event_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Eventlist >*
PerceptronSet::mutable_event_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.event_list)
  return &event_list_;
}
inline const ::nebulalink::perceptron3::Eventlist& PerceptronSet::event_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.event_list)
  return event_list_.Get(index);
}
inline ::nebulalink::perceptron3::Eventlist* PerceptronSet::add_event_list() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.event_list)
  return event_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Eventlist >&
PerceptronSet::event_list() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.event_list)
  return event_list_;
}

// repeated .nebulalink.perceptron3.Heartlist heart_list = 12;
inline int PerceptronSet::heart_list_size() const {
  return heart_list_.size();
}
inline void PerceptronSet::clear_heart_list() {
  heart_list_.Clear();
}
inline ::nebulalink::perceptron3::Heartlist* PerceptronSet::mutable_heart_list(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.heart_list)
  return heart_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Heartlist >*
PerceptronSet::mutable_heart_list() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.heart_list)
  return &heart_list_;
}
inline const ::nebulalink::perceptron3::Heartlist& PerceptronSet::heart_list(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.heart_list)
  return heart_list_.Get(index);
}
inline ::nebulalink::perceptron3::Heartlist* PerceptronSet::add_heart_list() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.heart_list)
  return heart_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Heartlist >&
PerceptronSet::heart_list() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.heart_list)
  return heart_list_;
}

// repeated .nebulalink.perceptron3.DetectorRegion polygon = 13;
inline int PerceptronSet::polygon_size() const {
  return polygon_.size();
}
inline void PerceptronSet::clear_polygon() {
  polygon_.Clear();
}
inline ::nebulalink::perceptron3::DetectorRegion* PerceptronSet::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.polygon)
  return polygon_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::DetectorRegion >*
PerceptronSet::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.polygon)
  return &polygon_;
}
inline const ::nebulalink::perceptron3::DetectorRegion& PerceptronSet::polygon(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.polygon)
  return polygon_.Get(index);
}
inline ::nebulalink::perceptron3::DetectorRegion* PerceptronSet::add_polygon() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.polygon)
  return polygon_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::DetectorRegion >&
PerceptronSet::polygon() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.polygon)
  return polygon_;
}

// repeated .nebulalink.perceptron3.Obstacles obstacle = 14;
inline int PerceptronSet::obstacle_size() const {
  return obstacle_.size();
}
inline void PerceptronSet::clear_obstacle() {
  obstacle_.Clear();
}
inline ::nebulalink::perceptron3::Obstacles* PerceptronSet::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.obstacle)
  return obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Obstacles >*
PerceptronSet::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.obstacle)
  return &obstacle_;
}
inline const ::nebulalink::perceptron3::Obstacles& PerceptronSet::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.obstacle)
  return obstacle_.Get(index);
}
inline ::nebulalink::perceptron3::Obstacles* PerceptronSet::add_obstacle() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.obstacle)
  return obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::Obstacles >&
PerceptronSet::obstacle() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.obstacle)
  return obstacle_;
}

// repeated .nebulalink.perceptron3.V2XOBUs v2x_obus = 15;
inline int PerceptronSet::v2x_obus_size() const {
  return v2x_obus_.size();
}
inline void PerceptronSet::clear_v2x_obus() {
  v2x_obus_.Clear();
}
inline ::nebulalink::perceptron3::V2XOBUs* PerceptronSet::mutable_v2x_obus(int index) {
  // @@protoc_insertion_point(field_mutable:nebulalink.perceptron3.PerceptronSet.v2x_obus)
  return v2x_obus_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::V2XOBUs >*
PerceptronSet::mutable_v2x_obus() {
  // @@protoc_insertion_point(field_mutable_list:nebulalink.perceptron3.PerceptronSet.v2x_obus)
  return &v2x_obus_;
}
inline const ::nebulalink::perceptron3::V2XOBUs& PerceptronSet::v2x_obus(int index) const {
  // @@protoc_insertion_point(field_get:nebulalink.perceptron3.PerceptronSet.v2x_obus)
  return v2x_obus_.Get(index);
}
inline ::nebulalink::perceptron3::V2XOBUs* PerceptronSet::add_v2x_obus() {
  // @@protoc_insertion_point(field_add:nebulalink.perceptron3.PerceptronSet.v2x_obus)
  return v2x_obus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nebulalink::perceptron3::V2XOBUs >&
PerceptronSet::v2x_obus() const {
  // @@protoc_insertion_point(field_list:nebulalink.perceptron3.PerceptronSet.v2x_obus)
  return v2x_obus_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perceptron3
}  // namespace nebulalink

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nebulalink::perceptron3::DetectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nebulalink::perceptron3::DetectorType>() {
  return ::nebulalink::perceptron3::DetectorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nebulalink_2eperceptron3_2e0_2e5_2eproto
