# generated from rosidl_generator_py/resource/_idl.py.em
# with input from perception_ros2_msg:msg/LidarFrameMsg.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_LidarFrameMsg(type):
    """Metaclass of message 'LidarFrameMsg'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('perception_ros2_msg')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'perception_ros2_msg.msg.LidarFrameMsg')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__lidar_frame_msg
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__lidar_frame_msg
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__lidar_frame_msg
            cls._TYPE_SUPPORT = module.type_support_msg__msg__lidar_frame_msg
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__lidar_frame_msg

            from perception_ros2_msg.msg import FreeSpaceInfos
            if FreeSpaceInfos.__class__._TYPE_SUPPORT is None:
                FreeSpaceInfos.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Indices
            if Indices.__class__._TYPE_SUPPORT is None:
                Indices.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Lanes
            if Lanes.__class__._TYPE_SUPPORT is None:
                Lanes.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Objects
            if Objects.__class__._TYPE_SUPPORT is None:
                Objects.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Point3d
            if Point3d.__class__._TYPE_SUPPORT is None:
                Point3d.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Point4f
            if Point4f.__class__._TYPE_SUPPORT is None:
                Point4f.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Pose
            if Pose.__class__._TYPE_SUPPORT is None:
                Pose.__class__.__import_type_support__()

            from perception_ros2_msg.msg import PoseMap
            if PoseMap.__class__._TYPE_SUPPORT is None:
                PoseMap.__class__.__import_type_support__()

            from perception_ros2_msg.msg import RoadEdges
            if RoadEdges.__class__._TYPE_SUPPORT is None:
                RoadEdges.__class__.__import_type_support__()

            from std_msgs.msg import Bool
            if Bool.__class__._TYPE_SUPPORT is None:
                Bool.__class__.__import_type_support__()

            from std_msgs.msg import Float64
            if Float64.__class__._TYPE_SUPPORT is None:
                Float64.__class__.__import_type_support__()

            from std_msgs.msg import Int32
            if Int32.__class__._TYPE_SUPPORT is None:
                Int32.__class__.__import_type_support__()

            from std_msgs.msg import String
            if String.__class__._TYPE_SUPPORT is None:
                String.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class LidarFrameMsg(metaclass=Metaclass_LidarFrameMsg):
    """Message class 'LidarFrameMsg'."""

    __slots__ = [
        '_frame_id',
        '_timestamp',
        '_global_pose',
        '_gps_origin',
        '_status_pose_map',
        '_status',
        '_valid_indices',
        '_objects',
        '_has_pointcloud',
        '_scan_pointcloud',
        '_has_attention_objects',
        '_attention_objects',
        '_has_freespace',
        '_freespace_infos',
        '_has_lanes',
        '_lanes',
        '_has_roadedges',
        '_roadedges',
        '_has_sematice_indices',
        '_non_ground_indices',
        '_ground_indices',
        '_background_indices',
    ]

    _fields_and_field_types = {
        'frame_id': 'std_msgs/String',
        'timestamp': 'std_msgs/Float64',
        'global_pose': 'perception_ros2_msg/Pose',
        'gps_origin': 'perception_ros2_msg/Point3d',
        'status_pose_map': 'perception_ros2_msg/PoseMap',
        'status': 'std_msgs/Int32',
        'valid_indices': 'perception_ros2_msg/Indices',
        'objects': 'perception_ros2_msg/Objects',
        'has_pointcloud': 'std_msgs/Bool',
        'scan_pointcloud': 'sequence<perception_ros2_msg/Point4f>',
        'has_attention_objects': 'std_msgs/Bool',
        'attention_objects': 'perception_ros2_msg/Objects',
        'has_freespace': 'std_msgs/Bool',
        'freespace_infos': 'perception_ros2_msg/FreeSpaceInfos',
        'has_lanes': 'std_msgs/Bool',
        'lanes': 'perception_ros2_msg/Lanes',
        'has_roadedges': 'std_msgs/Bool',
        'roadedges': 'perception_ros2_msg/RoadEdges',
        'has_sematice_indices': 'std_msgs/Bool',
        'non_ground_indices': 'perception_ros2_msg/Indices',
        'ground_indices': 'perception_ros2_msg/Indices',
        'background_indices': 'perception_ros2_msg/Indices',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'String'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float64'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Pose'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3d'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'PoseMap'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Indices'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Objects'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point4f')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Objects'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'FreeSpaceInfos'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Lanes'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'RoadEdges'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Indices'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Indices'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Indices'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import String
        self.frame_id = kwargs.get('frame_id', String())
        from std_msgs.msg import Float64
        self.timestamp = kwargs.get('timestamp', Float64())
        from perception_ros2_msg.msg import Pose
        self.global_pose = kwargs.get('global_pose', Pose())
        from perception_ros2_msg.msg import Point3d
        self.gps_origin = kwargs.get('gps_origin', Point3d())
        from perception_ros2_msg.msg import PoseMap
        self.status_pose_map = kwargs.get('status_pose_map', PoseMap())
        from std_msgs.msg import Int32
        self.status = kwargs.get('status', Int32())
        from perception_ros2_msg.msg import Indices
        self.valid_indices = kwargs.get('valid_indices', Indices())
        from perception_ros2_msg.msg import Objects
        self.objects = kwargs.get('objects', Objects())
        from std_msgs.msg import Bool
        self.has_pointcloud = kwargs.get('has_pointcloud', Bool())
        self.scan_pointcloud = kwargs.get('scan_pointcloud', [])
        from std_msgs.msg import Bool
        self.has_attention_objects = kwargs.get('has_attention_objects', Bool())
        from perception_ros2_msg.msg import Objects
        self.attention_objects = kwargs.get('attention_objects', Objects())
        from std_msgs.msg import Bool
        self.has_freespace = kwargs.get('has_freespace', Bool())
        from perception_ros2_msg.msg import FreeSpaceInfos
        self.freespace_infos = kwargs.get('freespace_infos', FreeSpaceInfos())
        from std_msgs.msg import Bool
        self.has_lanes = kwargs.get('has_lanes', Bool())
        from perception_ros2_msg.msg import Lanes
        self.lanes = kwargs.get('lanes', Lanes())
        from std_msgs.msg import Bool
        self.has_roadedges = kwargs.get('has_roadedges', Bool())
        from perception_ros2_msg.msg import RoadEdges
        self.roadedges = kwargs.get('roadedges', RoadEdges())
        from std_msgs.msg import Bool
        self.has_sematice_indices = kwargs.get('has_sematice_indices', Bool())
        from perception_ros2_msg.msg import Indices
        self.non_ground_indices = kwargs.get('non_ground_indices', Indices())
        from perception_ros2_msg.msg import Indices
        self.ground_indices = kwargs.get('ground_indices', Indices())
        from perception_ros2_msg.msg import Indices
        self.background_indices = kwargs.get('background_indices', Indices())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.frame_id != other.frame_id:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.global_pose != other.global_pose:
            return False
        if self.gps_origin != other.gps_origin:
            return False
        if self.status_pose_map != other.status_pose_map:
            return False
        if self.status != other.status:
            return False
        if self.valid_indices != other.valid_indices:
            return False
        if self.objects != other.objects:
            return False
        if self.has_pointcloud != other.has_pointcloud:
            return False
        if self.scan_pointcloud != other.scan_pointcloud:
            return False
        if self.has_attention_objects != other.has_attention_objects:
            return False
        if self.attention_objects != other.attention_objects:
            return False
        if self.has_freespace != other.has_freespace:
            return False
        if self.freespace_infos != other.freespace_infos:
            return False
        if self.has_lanes != other.has_lanes:
            return False
        if self.lanes != other.lanes:
            return False
        if self.has_roadedges != other.has_roadedges:
            return False
        if self.roadedges != other.roadedges:
            return False
        if self.has_sematice_indices != other.has_sematice_indices:
            return False
        if self.non_ground_indices != other.non_ground_indices:
            return False
        if self.ground_indices != other.ground_indices:
            return False
        if self.background_indices != other.background_indices:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def frame_id(self):
        """Message field 'frame_id'."""
        return self._frame_id

    @frame_id.setter
    def frame_id(self, value):
        if __debug__:
            from std_msgs.msg import String
            assert \
                isinstance(value, String), \
                "The 'frame_id' field must be a sub message of type 'String'"
        self._frame_id = value

    @property
    def timestamp(self):
        """Message field 'timestamp'."""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if __debug__:
            from std_msgs.msg import Float64
            assert \
                isinstance(value, Float64), \
                "The 'timestamp' field must be a sub message of type 'Float64'"
        self._timestamp = value

    @property
    def global_pose(self):
        """Message field 'global_pose'."""
        return self._global_pose

    @global_pose.setter
    def global_pose(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Pose
            assert \
                isinstance(value, Pose), \
                "The 'global_pose' field must be a sub message of type 'Pose'"
        self._global_pose = value

    @property
    def gps_origin(self):
        """Message field 'gps_origin'."""
        return self._gps_origin

    @gps_origin.setter
    def gps_origin(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3d
            assert \
                isinstance(value, Point3d), \
                "The 'gps_origin' field must be a sub message of type 'Point3d'"
        self._gps_origin = value

    @property
    def status_pose_map(self):
        """Message field 'status_pose_map'."""
        return self._status_pose_map

    @status_pose_map.setter
    def status_pose_map(self, value):
        if __debug__:
            from perception_ros2_msg.msg import PoseMap
            assert \
                isinstance(value, PoseMap), \
                "The 'status_pose_map' field must be a sub message of type 'PoseMap'"
        self._status_pose_map = value

    @property
    def status(self):
        """Message field 'status'."""
        return self._status

    @status.setter
    def status(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'status' field must be a sub message of type 'Int32'"
        self._status = value

    @property
    def valid_indices(self):
        """Message field 'valid_indices'."""
        return self._valid_indices

    @valid_indices.setter
    def valid_indices(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Indices
            assert \
                isinstance(value, Indices), \
                "The 'valid_indices' field must be a sub message of type 'Indices'"
        self._valid_indices = value

    @property
    def objects(self):
        """Message field 'objects'."""
        return self._objects

    @objects.setter
    def objects(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Objects
            assert \
                isinstance(value, Objects), \
                "The 'objects' field must be a sub message of type 'Objects'"
        self._objects = value

    @property
    def has_pointcloud(self):
        """Message field 'has_pointcloud'."""
        return self._has_pointcloud

    @has_pointcloud.setter
    def has_pointcloud(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_pointcloud' field must be a sub message of type 'Bool'"
        self._has_pointcloud = value

    @property
    def scan_pointcloud(self):
        """Message field 'scan_pointcloud'."""
        return self._scan_pointcloud

    @scan_pointcloud.setter
    def scan_pointcloud(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point4f
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Point4f) for v in value) and
                 True), \
                "The 'scan_pointcloud' field must be a set or sequence and each value of type 'Point4f'"
        self._scan_pointcloud = value

    @property
    def has_attention_objects(self):
        """Message field 'has_attention_objects'."""
        return self._has_attention_objects

    @has_attention_objects.setter
    def has_attention_objects(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_attention_objects' field must be a sub message of type 'Bool'"
        self._has_attention_objects = value

    @property
    def attention_objects(self):
        """Message field 'attention_objects'."""
        return self._attention_objects

    @attention_objects.setter
    def attention_objects(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Objects
            assert \
                isinstance(value, Objects), \
                "The 'attention_objects' field must be a sub message of type 'Objects'"
        self._attention_objects = value

    @property
    def has_freespace(self):
        """Message field 'has_freespace'."""
        return self._has_freespace

    @has_freespace.setter
    def has_freespace(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_freespace' field must be a sub message of type 'Bool'"
        self._has_freespace = value

    @property
    def freespace_infos(self):
        """Message field 'freespace_infos'."""
        return self._freespace_infos

    @freespace_infos.setter
    def freespace_infos(self, value):
        if __debug__:
            from perception_ros2_msg.msg import FreeSpaceInfos
            assert \
                isinstance(value, FreeSpaceInfos), \
                "The 'freespace_infos' field must be a sub message of type 'FreeSpaceInfos'"
        self._freespace_infos = value

    @property
    def has_lanes(self):
        """Message field 'has_lanes'."""
        return self._has_lanes

    @has_lanes.setter
    def has_lanes(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_lanes' field must be a sub message of type 'Bool'"
        self._has_lanes = value

    @property
    def lanes(self):
        """Message field 'lanes'."""
        return self._lanes

    @lanes.setter
    def lanes(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Lanes
            assert \
                isinstance(value, Lanes), \
                "The 'lanes' field must be a sub message of type 'Lanes'"
        self._lanes = value

    @property
    def has_roadedges(self):
        """Message field 'has_roadedges'."""
        return self._has_roadedges

    @has_roadedges.setter
    def has_roadedges(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_roadedges' field must be a sub message of type 'Bool'"
        self._has_roadedges = value

    @property
    def roadedges(self):
        """Message field 'roadedges'."""
        return self._roadedges

    @roadedges.setter
    def roadedges(self, value):
        if __debug__:
            from perception_ros2_msg.msg import RoadEdges
            assert \
                isinstance(value, RoadEdges), \
                "The 'roadedges' field must be a sub message of type 'RoadEdges'"
        self._roadedges = value

    @property
    def has_sematice_indices(self):
        """Message field 'has_sematice_indices'."""
        return self._has_sematice_indices

    @has_sematice_indices.setter
    def has_sematice_indices(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'has_sematice_indices' field must be a sub message of type 'Bool'"
        self._has_sematice_indices = value

    @property
    def non_ground_indices(self):
        """Message field 'non_ground_indices'."""
        return self._non_ground_indices

    @non_ground_indices.setter
    def non_ground_indices(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Indices
            assert \
                isinstance(value, Indices), \
                "The 'non_ground_indices' field must be a sub message of type 'Indices'"
        self._non_ground_indices = value

    @property
    def ground_indices(self):
        """Message field 'ground_indices'."""
        return self._ground_indices

    @ground_indices.setter
    def ground_indices(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Indices
            assert \
                isinstance(value, Indices), \
                "The 'ground_indices' field must be a sub message of type 'Indices'"
        self._ground_indices = value

    @property
    def background_indices(self):
        """Message field 'background_indices'."""
        return self._background_indices

    @background_indices.setter
    def background_indices(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Indices
            assert \
                isinstance(value, Indices), \
                "The 'background_indices' field must be a sub message of type 'Indices'"
        self._background_indices = value
