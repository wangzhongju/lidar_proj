# generated from rosidl_generator_py/resource/_idl.py.em
# with input from perception_ros2_msg:msg/SupplementInfo.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_SupplementInfo(type):
    """Metaclass of message 'SupplementInfo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('perception_ros2_msg')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'perception_ros2_msg.msg.SupplementInfo')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__supplement_info
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__supplement_info
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__supplement_info
            cls._TYPE_SUPPORT = module.type_support_msg__msg__supplement_info
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__supplement_info

            from perception_ros2_msg.msg import Point3d
            if Point3d.__class__._TYPE_SUPPORT is None:
                Point3d.__class__.__import_type_support__()

            from perception_ros2_msg.msg import Point3f
            if Point3f.__class__._TYPE_SUPPORT is None:
                Point3f.__class__.__import_type_support__()

            from std_msgs.msg import Bool
            if Bool.__class__._TYPE_SUPPORT is None:
                Bool.__class__.__import_type_support__()

            from std_msgs.msg import Float32
            if Float32.__class__._TYPE_SUPPORT is None:
                Float32.__class__.__import_type_support__()

            from std_msgs.msg import Int32
            if Int32.__class__._TYPE_SUPPORT is None:
                Int32.__class__.__import_type_support__()

            from std_msgs.msg import UInt32
            if UInt32.__class__._TYPE_SUPPORT is None:
                UInt32.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class SupplementInfo(metaclass=Metaclass_SupplementInfo):
    """Message class 'SupplementInfo'."""

    __slots__ = [
        '_unique_id',
        '_polygon',
        '_left_point_index',
        '_right_point_index',
        '_cloud_indices',
        '_latent_types',
        '_size_type',
        '_mode',
        '_in_roi',
        '_tracking_state',
        '_geo_center',
        '_geo_size',
        '_trajectory',
        '_history_velocity',
        '_history_type',
        '_gps_mode',
        '_gps_info',
    ]

    _fields_and_field_types = {
        'unique_id': 'std_msgs/UInt32',
        'polygon': 'sequence<perception_ros2_msg/Point3f>',
        'left_point_index': 'std_msgs/Int32',
        'right_point_index': 'std_msgs/Int32',
        'cloud_indices': 'sequence<std_msgs/Int32>',
        'latent_types': 'sequence<std_msgs/Float32>',
        'size_type': 'std_msgs/Int32',
        'mode': 'std_msgs/Int32',
        'in_roi': 'std_msgs/Bool',
        'tracking_state': 'std_msgs/Int32',
        'geo_center': 'perception_ros2_msg/Point3f',
        'geo_size': 'perception_ros2_msg/Point3f',
        'trajectory': 'sequence<perception_ros2_msg/Point3f>',
        'history_velocity': 'sequence<perception_ros2_msg/Point3f>',
        'history_type': 'sequence<std_msgs/Int32>',
        'gps_mode': 'std_msgs/Int32',
        'gps_info': 'perception_ros2_msg/Point3d',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'UInt32'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Bool'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32')),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3d'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import UInt32
        self.unique_id = kwargs.get('unique_id', UInt32())
        self.polygon = kwargs.get('polygon', [])
        from std_msgs.msg import Int32
        self.left_point_index = kwargs.get('left_point_index', Int32())
        from std_msgs.msg import Int32
        self.right_point_index = kwargs.get('right_point_index', Int32())
        self.cloud_indices = kwargs.get('cloud_indices', [])
        self.latent_types = kwargs.get('latent_types', [])
        from std_msgs.msg import Int32
        self.size_type = kwargs.get('size_type', Int32())
        from std_msgs.msg import Int32
        self.mode = kwargs.get('mode', Int32())
        from std_msgs.msg import Bool
        self.in_roi = kwargs.get('in_roi', Bool())
        from std_msgs.msg import Int32
        self.tracking_state = kwargs.get('tracking_state', Int32())
        from perception_ros2_msg.msg import Point3f
        self.geo_center = kwargs.get('geo_center', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.geo_size = kwargs.get('geo_size', Point3f())
        self.trajectory = kwargs.get('trajectory', [])
        self.history_velocity = kwargs.get('history_velocity', [])
        self.history_type = kwargs.get('history_type', [])
        from std_msgs.msg import Int32
        self.gps_mode = kwargs.get('gps_mode', Int32())
        from perception_ros2_msg.msg import Point3d
        self.gps_info = kwargs.get('gps_info', Point3d())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.unique_id != other.unique_id:
            return False
        if self.polygon != other.polygon:
            return False
        if self.left_point_index != other.left_point_index:
            return False
        if self.right_point_index != other.right_point_index:
            return False
        if self.cloud_indices != other.cloud_indices:
            return False
        if self.latent_types != other.latent_types:
            return False
        if self.size_type != other.size_type:
            return False
        if self.mode != other.mode:
            return False
        if self.in_roi != other.in_roi:
            return False
        if self.tracking_state != other.tracking_state:
            return False
        if self.geo_center != other.geo_center:
            return False
        if self.geo_size != other.geo_size:
            return False
        if self.trajectory != other.trajectory:
            return False
        if self.history_velocity != other.history_velocity:
            return False
        if self.history_type != other.history_type:
            return False
        if self.gps_mode != other.gps_mode:
            return False
        if self.gps_info != other.gps_info:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def unique_id(self):
        """Message field 'unique_id'."""
        return self._unique_id

    @unique_id.setter
    def unique_id(self, value):
        if __debug__:
            from std_msgs.msg import UInt32
            assert \
                isinstance(value, UInt32), \
                "The 'unique_id' field must be a sub message of type 'UInt32'"
        self._unique_id = value

    @property
    def polygon(self):
        """Message field 'polygon'."""
        return self._polygon

    @polygon.setter
    def polygon(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Point3f) for v in value) and
                 True), \
                "The 'polygon' field must be a set or sequence and each value of type 'Point3f'"
        self._polygon = value

    @property
    def left_point_index(self):
        """Message field 'left_point_index'."""
        return self._left_point_index

    @left_point_index.setter
    def left_point_index(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'left_point_index' field must be a sub message of type 'Int32'"
        self._left_point_index = value

    @property
    def right_point_index(self):
        """Message field 'right_point_index'."""
        return self._right_point_index

    @right_point_index.setter
    def right_point_index(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'right_point_index' field must be a sub message of type 'Int32'"
        self._right_point_index = value

    @property
    def cloud_indices(self):
        """Message field 'cloud_indices'."""
        return self._cloud_indices

    @cloud_indices.setter
    def cloud_indices(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Int32) for v in value) and
                 True), \
                "The 'cloud_indices' field must be a set or sequence and each value of type 'Int32'"
        self._cloud_indices = value

    @property
    def latent_types(self):
        """Message field 'latent_types'."""
        return self._latent_types

    @latent_types.setter
    def latent_types(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Float32) for v in value) and
                 True), \
                "The 'latent_types' field must be a set or sequence and each value of type 'Float32'"
        self._latent_types = value

    @property
    def size_type(self):
        """Message field 'size_type'."""
        return self._size_type

    @size_type.setter
    def size_type(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'size_type' field must be a sub message of type 'Int32'"
        self._size_type = value

    @property
    def mode(self):
        """Message field 'mode'."""
        return self._mode

    @mode.setter
    def mode(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'mode' field must be a sub message of type 'Int32'"
        self._mode = value

    @property
    def in_roi(self):
        """Message field 'in_roi'."""
        return self._in_roi

    @in_roi.setter
    def in_roi(self, value):
        if __debug__:
            from std_msgs.msg import Bool
            assert \
                isinstance(value, Bool), \
                "The 'in_roi' field must be a sub message of type 'Bool'"
        self._in_roi = value

    @property
    def tracking_state(self):
        """Message field 'tracking_state'."""
        return self._tracking_state

    @tracking_state.setter
    def tracking_state(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'tracking_state' field must be a sub message of type 'Int32'"
        self._tracking_state = value

    @property
    def geo_center(self):
        """Message field 'geo_center'."""
        return self._geo_center

    @geo_center.setter
    def geo_center(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'geo_center' field must be a sub message of type 'Point3f'"
        self._geo_center = value

    @property
    def geo_size(self):
        """Message field 'geo_size'."""
        return self._geo_size

    @geo_size.setter
    def geo_size(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'geo_size' field must be a sub message of type 'Point3f'"
        self._geo_size = value

    @property
    def trajectory(self):
        """Message field 'trajectory'."""
        return self._trajectory

    @trajectory.setter
    def trajectory(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Point3f) for v in value) and
                 True), \
                "The 'trajectory' field must be a set or sequence and each value of type 'Point3f'"
        self._trajectory = value

    @property
    def history_velocity(self):
        """Message field 'history_velocity'."""
        return self._history_velocity

    @history_velocity.setter
    def history_velocity(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Point3f) for v in value) and
                 True), \
                "The 'history_velocity' field must be a set or sequence and each value of type 'Point3f'"
        self._history_velocity = value

    @property
    def history_type(self):
        """Message field 'history_type'."""
        return self._history_type

    @history_type.setter
    def history_type(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, Int32) for v in value) and
                 True), \
                "The 'history_type' field must be a set or sequence and each value of type 'Int32'"
        self._history_type = value

    @property
    def gps_mode(self):
        """Message field 'gps_mode'."""
        return self._gps_mode

    @gps_mode.setter
    def gps_mode(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'gps_mode' field must be a sub message of type 'Int32'"
        self._gps_mode = value

    @property
    def gps_info(self):
        """Message field 'gps_info'."""
        return self._gps_info

    @gps_info.setter
    def gps_info(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3d
            assert \
                isinstance(value, Point3d), \
                "The 'gps_info' field must be a sub message of type 'Point3d'"
        self._gps_info = value
