# generated from rosidl_generator_py/resource/_idl.py.em
# with input from perception_ros2_msg:msg/CoreInfo.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_CoreInfo(type):
    """Metaclass of message 'CoreInfo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('perception_ros2_msg')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'perception_ros2_msg.msg.CoreInfo')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__core_info
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__core_info
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__core_info
            cls._TYPE_SUPPORT = module.type_support_msg__msg__core_info
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__core_info

            from perception_ros2_msg.msg import Point3f
            if Point3f.__class__._TYPE_SUPPORT is None:
                Point3f.__class__.__import_type_support__()

            from std_msgs.msg import Float32
            if Float32.__class__._TYPE_SUPPORT is None:
                Float32.__class__.__import_type_support__()

            from std_msgs.msg import Float64
            if Float64.__class__._TYPE_SUPPORT is None:
                Float64.__class__.__import_type_support__()

            from std_msgs.msg import Int32
            if Int32.__class__._TYPE_SUPPORT is None:
                Int32.__class__.__import_type_support__()

            from std_msgs.msg import String
            if String.__class__._TYPE_SUPPORT is None:
                String.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class CoreInfo(metaclass=Metaclass_CoreInfo):
    """Message class 'CoreInfo'."""

    __slots__ = [
        '_timestamp',
        '_frame_id',
        '_priority_id',
        '_exist_confidence',
        '_center',
        '_center_cov',
        '_size',
        '_size_cov',
        '_direction',
        '_direction_cov',
        '_type',
        '_type_confidence',
        '_attention_type',
        '_motion_state',
        '_lane_pos',
        '_tracker_id',
        '_age',
        '_velocity',
        '_relative_velocity',
        '_velocity_cov',
        '_relative_velocity_cov',
        '_acceleration',
        '_acceleration_cov',
        '_angle_velocity',
        '_angle_velocity_cov',
        '_angle_acceleration',
        '_angle_acceleration_cov',
        '_anchor',
        '_nearest_point',
    ]

    _fields_and_field_types = {
        'timestamp': 'std_msgs/Float32',
        'frame_id': 'std_msgs/String',
        'priority_id': 'std_msgs/Int32',
        'exist_confidence': 'std_msgs/Float32',
        'center': 'perception_ros2_msg/Point3f',
        'center_cov': 'perception_ros2_msg/Point3f',
        'size': 'perception_ros2_msg/Point3f',
        'size_cov': 'perception_ros2_msg/Point3f',
        'direction': 'perception_ros2_msg/Point3f',
        'direction_cov': 'perception_ros2_msg/Point3f',
        'type': 'std_msgs/Int32',
        'type_confidence': 'std_msgs/Float32',
        'attention_type': 'std_msgs/Int32',
        'motion_state': 'std_msgs/Int32',
        'lane_pos': 'std_msgs/Int32',
        'tracker_id': 'std_msgs/Int32',
        'age': 'std_msgs/Float64',
        'velocity': 'perception_ros2_msg/Point3f',
        'relative_velocity': 'perception_ros2_msg/Point3f',
        'velocity_cov': 'perception_ros2_msg/Point3f',
        'relative_velocity_cov': 'perception_ros2_msg/Point3f',
        'acceleration': 'perception_ros2_msg/Point3f',
        'acceleration_cov': 'perception_ros2_msg/Point3f',
        'angle_velocity': 'std_msgs/Float32',
        'angle_velocity_cov': 'std_msgs/Float32',
        'angle_acceleration': 'std_msgs/Float32',
        'angle_acceleration_cov': 'std_msgs/Float32',
        'anchor': 'perception_ros2_msg/Point3f',
        'nearest_point': 'perception_ros2_msg/Point3f',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'String'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Int32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float64'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Float32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['perception_ros2_msg', 'msg'], 'Point3f'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Float32
        self.timestamp = kwargs.get('timestamp', Float32())
        from std_msgs.msg import String
        self.frame_id = kwargs.get('frame_id', String())
        from std_msgs.msg import Int32
        self.priority_id = kwargs.get('priority_id', Int32())
        from std_msgs.msg import Float32
        self.exist_confidence = kwargs.get('exist_confidence', Float32())
        from perception_ros2_msg.msg import Point3f
        self.center = kwargs.get('center', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.center_cov = kwargs.get('center_cov', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.size = kwargs.get('size', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.size_cov = kwargs.get('size_cov', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.direction = kwargs.get('direction', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.direction_cov = kwargs.get('direction_cov', Point3f())
        from std_msgs.msg import Int32
        self.type = kwargs.get('type', Int32())
        from std_msgs.msg import Float32
        self.type_confidence = kwargs.get('type_confidence', Float32())
        from std_msgs.msg import Int32
        self.attention_type = kwargs.get('attention_type', Int32())
        from std_msgs.msg import Int32
        self.motion_state = kwargs.get('motion_state', Int32())
        from std_msgs.msg import Int32
        self.lane_pos = kwargs.get('lane_pos', Int32())
        from std_msgs.msg import Int32
        self.tracker_id = kwargs.get('tracker_id', Int32())
        from std_msgs.msg import Float64
        self.age = kwargs.get('age', Float64())
        from perception_ros2_msg.msg import Point3f
        self.velocity = kwargs.get('velocity', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.relative_velocity = kwargs.get('relative_velocity', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.velocity_cov = kwargs.get('velocity_cov', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.relative_velocity_cov = kwargs.get('relative_velocity_cov', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.acceleration = kwargs.get('acceleration', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.acceleration_cov = kwargs.get('acceleration_cov', Point3f())
        from std_msgs.msg import Float32
        self.angle_velocity = kwargs.get('angle_velocity', Float32())
        from std_msgs.msg import Float32
        self.angle_velocity_cov = kwargs.get('angle_velocity_cov', Float32())
        from std_msgs.msg import Float32
        self.angle_acceleration = kwargs.get('angle_acceleration', Float32())
        from std_msgs.msg import Float32
        self.angle_acceleration_cov = kwargs.get('angle_acceleration_cov', Float32())
        from perception_ros2_msg.msg import Point3f
        self.anchor = kwargs.get('anchor', Point3f())
        from perception_ros2_msg.msg import Point3f
        self.nearest_point = kwargs.get('nearest_point', Point3f())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.frame_id != other.frame_id:
            return False
        if self.priority_id != other.priority_id:
            return False
        if self.exist_confidence != other.exist_confidence:
            return False
        if self.center != other.center:
            return False
        if self.center_cov != other.center_cov:
            return False
        if self.size != other.size:
            return False
        if self.size_cov != other.size_cov:
            return False
        if self.direction != other.direction:
            return False
        if self.direction_cov != other.direction_cov:
            return False
        if self.type != other.type:
            return False
        if self.type_confidence != other.type_confidence:
            return False
        if self.attention_type != other.attention_type:
            return False
        if self.motion_state != other.motion_state:
            return False
        if self.lane_pos != other.lane_pos:
            return False
        if self.tracker_id != other.tracker_id:
            return False
        if self.age != other.age:
            return False
        if self.velocity != other.velocity:
            return False
        if self.relative_velocity != other.relative_velocity:
            return False
        if self.velocity_cov != other.velocity_cov:
            return False
        if self.relative_velocity_cov != other.relative_velocity_cov:
            return False
        if self.acceleration != other.acceleration:
            return False
        if self.acceleration_cov != other.acceleration_cov:
            return False
        if self.angle_velocity != other.angle_velocity:
            return False
        if self.angle_velocity_cov != other.angle_velocity_cov:
            return False
        if self.angle_acceleration != other.angle_acceleration:
            return False
        if self.angle_acceleration_cov != other.angle_acceleration_cov:
            return False
        if self.anchor != other.anchor:
            return False
        if self.nearest_point != other.nearest_point:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def timestamp(self):
        """Message field 'timestamp'."""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'timestamp' field must be a sub message of type 'Float32'"
        self._timestamp = value

    @property
    def frame_id(self):
        """Message field 'frame_id'."""
        return self._frame_id

    @frame_id.setter
    def frame_id(self, value):
        if __debug__:
            from std_msgs.msg import String
            assert \
                isinstance(value, String), \
                "The 'frame_id' field must be a sub message of type 'String'"
        self._frame_id = value

    @property
    def priority_id(self):
        """Message field 'priority_id'."""
        return self._priority_id

    @priority_id.setter
    def priority_id(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'priority_id' field must be a sub message of type 'Int32'"
        self._priority_id = value

    @property
    def exist_confidence(self):
        """Message field 'exist_confidence'."""
        return self._exist_confidence

    @exist_confidence.setter
    def exist_confidence(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'exist_confidence' field must be a sub message of type 'Float32'"
        self._exist_confidence = value

    @property
    def center(self):
        """Message field 'center'."""
        return self._center

    @center.setter
    def center(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'center' field must be a sub message of type 'Point3f'"
        self._center = value

    @property
    def center_cov(self):
        """Message field 'center_cov'."""
        return self._center_cov

    @center_cov.setter
    def center_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'center_cov' field must be a sub message of type 'Point3f'"
        self._center_cov = value

    @property
    def size(self):
        """Message field 'size'."""
        return self._size

    @size.setter
    def size(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'size' field must be a sub message of type 'Point3f'"
        self._size = value

    @property
    def size_cov(self):
        """Message field 'size_cov'."""
        return self._size_cov

    @size_cov.setter
    def size_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'size_cov' field must be a sub message of type 'Point3f'"
        self._size_cov = value

    @property
    def direction(self):
        """Message field 'direction'."""
        return self._direction

    @direction.setter
    def direction(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'direction' field must be a sub message of type 'Point3f'"
        self._direction = value

    @property
    def direction_cov(self):
        """Message field 'direction_cov'."""
        return self._direction_cov

    @direction_cov.setter
    def direction_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'direction_cov' field must be a sub message of type 'Point3f'"
        self._direction_cov = value

    @property  # noqa: A003
    def type(self):
        """Message field 'type'."""
        return self._type

    @type.setter  # noqa: A003
    def type(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'type' field must be a sub message of type 'Int32'"
        self._type = value

    @property
    def type_confidence(self):
        """Message field 'type_confidence'."""
        return self._type_confidence

    @type_confidence.setter
    def type_confidence(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'type_confidence' field must be a sub message of type 'Float32'"
        self._type_confidence = value

    @property
    def attention_type(self):
        """Message field 'attention_type'."""
        return self._attention_type

    @attention_type.setter
    def attention_type(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'attention_type' field must be a sub message of type 'Int32'"
        self._attention_type = value

    @property
    def motion_state(self):
        """Message field 'motion_state'."""
        return self._motion_state

    @motion_state.setter
    def motion_state(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'motion_state' field must be a sub message of type 'Int32'"
        self._motion_state = value

    @property
    def lane_pos(self):
        """Message field 'lane_pos'."""
        return self._lane_pos

    @lane_pos.setter
    def lane_pos(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'lane_pos' field must be a sub message of type 'Int32'"
        self._lane_pos = value

    @property
    def tracker_id(self):
        """Message field 'tracker_id'."""
        return self._tracker_id

    @tracker_id.setter
    def tracker_id(self, value):
        if __debug__:
            from std_msgs.msg import Int32
            assert \
                isinstance(value, Int32), \
                "The 'tracker_id' field must be a sub message of type 'Int32'"
        self._tracker_id = value

    @property
    def age(self):
        """Message field 'age'."""
        return self._age

    @age.setter
    def age(self, value):
        if __debug__:
            from std_msgs.msg import Float64
            assert \
                isinstance(value, Float64), \
                "The 'age' field must be a sub message of type 'Float64'"
        self._age = value

    @property
    def velocity(self):
        """Message field 'velocity'."""
        return self._velocity

    @velocity.setter
    def velocity(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'velocity' field must be a sub message of type 'Point3f'"
        self._velocity = value

    @property
    def relative_velocity(self):
        """Message field 'relative_velocity'."""
        return self._relative_velocity

    @relative_velocity.setter
    def relative_velocity(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'relative_velocity' field must be a sub message of type 'Point3f'"
        self._relative_velocity = value

    @property
    def velocity_cov(self):
        """Message field 'velocity_cov'."""
        return self._velocity_cov

    @velocity_cov.setter
    def velocity_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'velocity_cov' field must be a sub message of type 'Point3f'"
        self._velocity_cov = value

    @property
    def relative_velocity_cov(self):
        """Message field 'relative_velocity_cov'."""
        return self._relative_velocity_cov

    @relative_velocity_cov.setter
    def relative_velocity_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'relative_velocity_cov' field must be a sub message of type 'Point3f'"
        self._relative_velocity_cov = value

    @property
    def acceleration(self):
        """Message field 'acceleration'."""
        return self._acceleration

    @acceleration.setter
    def acceleration(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'acceleration' field must be a sub message of type 'Point3f'"
        self._acceleration = value

    @property
    def acceleration_cov(self):
        """Message field 'acceleration_cov'."""
        return self._acceleration_cov

    @acceleration_cov.setter
    def acceleration_cov(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'acceleration_cov' field must be a sub message of type 'Point3f'"
        self._acceleration_cov = value

    @property
    def angle_velocity(self):
        """Message field 'angle_velocity'."""
        return self._angle_velocity

    @angle_velocity.setter
    def angle_velocity(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'angle_velocity' field must be a sub message of type 'Float32'"
        self._angle_velocity = value

    @property
    def angle_velocity_cov(self):
        """Message field 'angle_velocity_cov'."""
        return self._angle_velocity_cov

    @angle_velocity_cov.setter
    def angle_velocity_cov(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'angle_velocity_cov' field must be a sub message of type 'Float32'"
        self._angle_velocity_cov = value

    @property
    def angle_acceleration(self):
        """Message field 'angle_acceleration'."""
        return self._angle_acceleration

    @angle_acceleration.setter
    def angle_acceleration(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'angle_acceleration' field must be a sub message of type 'Float32'"
        self._angle_acceleration = value

    @property
    def angle_acceleration_cov(self):
        """Message field 'angle_acceleration_cov'."""
        return self._angle_acceleration_cov

    @angle_acceleration_cov.setter
    def angle_acceleration_cov(self, value):
        if __debug__:
            from std_msgs.msg import Float32
            assert \
                isinstance(value, Float32), \
                "The 'angle_acceleration_cov' field must be a sub message of type 'Float32'"
        self._angle_acceleration_cov = value

    @property
    def anchor(self):
        """Message field 'anchor'."""
        return self._anchor

    @anchor.setter
    def anchor(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'anchor' field must be a sub message of type 'Point3f'"
        self._anchor = value

    @property
    def nearest_point(self):
        """Message field 'nearest_point'."""
        return self._nearest_point

    @nearest_point.setter
    def nearest_point(self, value):
        if __debug__:
            from perception_ros2_msg.msg import Point3f
            assert \
                isinstance(value, Point3f), \
                "The 'nearest_point' field must be a sub message of type 'Point3f'"
        self._nearest_point = value
