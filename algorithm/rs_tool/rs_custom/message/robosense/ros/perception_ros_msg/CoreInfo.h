// Generated by gencpp from file perception_ros_msg/CoreInfo.msg
// DO NOT EDIT!


#ifndef PERCEPTION_ROS_MSG_MESSAGE_COREINFO_H
#define PERCEPTION_ROS_MSG_MESSAGE_COREINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float64.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>

namespace perception_ros_msg
{
template <class ContainerAllocator>
struct CoreInfo_
{
  typedef CoreInfo_<ContainerAllocator> Type;

  CoreInfo_()
    : timestamp()
    , priority_id()
    , exist_confidence()
    , center()
    , center_cov()
    , size()
    , size_cov()
    , direction()
    , direction_cov()
    , type()
    , type_confidence()
    , attention_type()
    , motion_state()
    , lane_pos()
    , trakcer_id()
    , age()
    , velocity()
    , velocity_cov()
    , acceleration()
    , acceleration_cov()
    , angle_velocity()
    , angle_velocity_cov()
    , angle_acceleration()
    , angle_acceleration_cov()
    , anchor()
    , nearest_point()  {
    }
  CoreInfo_(const ContainerAllocator& _alloc)
    : timestamp(_alloc)
    , priority_id(_alloc)
    , exist_confidence(_alloc)
    , center(_alloc)
    , center_cov(_alloc)
    , size(_alloc)
    , size_cov(_alloc)
    , direction(_alloc)
    , direction_cov(_alloc)
    , type(_alloc)
    , type_confidence(_alloc)
    , attention_type(_alloc)
    , motion_state(_alloc)
    , lane_pos(_alloc)
    , trakcer_id(_alloc)
    , age(_alloc)
    , velocity(_alloc)
    , velocity_cov(_alloc)
    , acceleration(_alloc)
    , acceleration_cov(_alloc)
    , angle_velocity(_alloc)
    , angle_velocity_cov(_alloc)
    , angle_acceleration(_alloc)
    , angle_acceleration_cov(_alloc)
    , anchor(_alloc)
    , nearest_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _priority_id_type;
  _priority_id_type priority_id;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _exist_confidence_type;
  _exist_confidence_type exist_confidence;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _center_cov_type;
  _center_cov_type center_cov;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _size_cov_type;
  _size_cov_type size_cov;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _direction_cov_type;
  _direction_cov_type direction_cov;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _type_confidence_type;
  _type_confidence_type type_confidence;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _attention_type_type;
  _attention_type_type attention_type;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _motion_state_type;
  _motion_state_type motion_state;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _lane_pos_type;
  _lane_pos_type lane_pos;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _trakcer_id_type;
  _trakcer_id_type trakcer_id;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _age_type;
  _age_type age;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _velocity_cov_type;
  _velocity_cov_type velocity_cov;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _acceleration_cov_type;
  _acceleration_cov_type acceleration_cov;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _angle_velocity_type;
  _angle_velocity_type angle_velocity;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _angle_velocity_cov_type;
  _angle_velocity_cov_type angle_velocity_cov;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _angle_acceleration_type;
  _angle_acceleration_type angle_acceleration;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _angle_acceleration_cov_type;
  _angle_acceleration_cov_type angle_acceleration_cov;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _anchor_type;
  _anchor_type anchor;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _nearest_point_type;
  _nearest_point_type nearest_point;





  typedef boost::shared_ptr< ::perception_ros_msg::CoreInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_ros_msg::CoreInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CoreInfo_

typedef ::perception_ros_msg::CoreInfo_<std::allocator<void> > CoreInfo;

typedef boost::shared_ptr< ::perception_ros_msg::CoreInfo > CoreInfoPtr;
typedef boost::shared_ptr< ::perception_ros_msg::CoreInfo const> CoreInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_ros_msg::CoreInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_ros_msg::CoreInfo_<ContainerAllocator1> & lhs, const ::perception_ros_msg::CoreInfo_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.priority_id == rhs.priority_id &&
    lhs.exist_confidence == rhs.exist_confidence &&
    lhs.center == rhs.center &&
    lhs.center_cov == rhs.center_cov &&
    lhs.size == rhs.size &&
    lhs.size_cov == rhs.size_cov &&
    lhs.direction == rhs.direction &&
    lhs.direction_cov == rhs.direction_cov &&
    lhs.type == rhs.type &&
    lhs.type_confidence == rhs.type_confidence &&
    lhs.attention_type == rhs.attention_type &&
    lhs.motion_state == rhs.motion_state &&
    lhs.lane_pos == rhs.lane_pos &&
    lhs.trakcer_id == rhs.trakcer_id &&
    lhs.age == rhs.age &&
    lhs.velocity == rhs.velocity &&
    lhs.velocity_cov == rhs.velocity_cov &&
    lhs.acceleration == rhs.acceleration &&
    lhs.acceleration_cov == rhs.acceleration_cov &&
    lhs.angle_velocity == rhs.angle_velocity &&
    lhs.angle_velocity_cov == rhs.angle_velocity_cov &&
    lhs.angle_acceleration == rhs.angle_acceleration &&
    lhs.angle_acceleration_cov == rhs.angle_acceleration_cov &&
    lhs.anchor == rhs.anchor &&
    lhs.nearest_point == rhs.nearest_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_ros_msg::CoreInfo_<ContainerAllocator1> & lhs, const ::perception_ros_msg::CoreInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_ros_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::CoreInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::CoreInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::CoreInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f0ff990bf278ab87b544233b3a79e70";
  }

  static const char* value(const ::perception_ros_msg::CoreInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f0ff990bf278ab8ULL;
  static const uint64_t static_value2 = 0x7b544233b3a79e70ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_ros_msg/CoreInfo";
  }

  static const char* value(const ::perception_ros_msg::CoreInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 timestamp\n"
"\n"
"std_msgs/Int32 priority_id\n"
"std_msgs/Float32 exist_confidence \n"
"Point3f          center \n"
"Point3f          center_cov \n"
"Point3f          size \n"
"Point3f          size_cov \n"
"Point3f          direction \n"
"Point3f          direction_cov         \n"
"std_msgs/Int32   type \n"
"std_msgs/Float32 type_confidence \n"
"std_msgs/Int32   attention_type \n"
"std_msgs/Int32   motion_state\n"
"std_msgs/Int32   lane_pos\n"
"std_msgs/Int32   trakcer_id \n"
"std_msgs/Float64 age \n"
"Point3f          velocity \n"
"Point3f          velocity_cov \n"
"Point3f          acceleration \n"
"Point3f          acceleration_cov \n"
"std_msgs/Float32 angle_velocity \n"
"std_msgs/Float32 angle_velocity_cov \n"
"std_msgs/Float32 angle_acceleration \n"
"std_msgs/Float32 angle_acceleration_cov  \n"
"Point3f          anchor \n"
"Point3f          nearest_point \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: perception_ros_msg/Point3f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
;
  }

  static const char* value(const ::perception_ros_msg::CoreInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.priority_id);
      stream.next(m.exist_confidence);
      stream.next(m.center);
      stream.next(m.center_cov);
      stream.next(m.size);
      stream.next(m.size_cov);
      stream.next(m.direction);
      stream.next(m.direction_cov);
      stream.next(m.type);
      stream.next(m.type_confidence);
      stream.next(m.attention_type);
      stream.next(m.motion_state);
      stream.next(m.lane_pos);
      stream.next(m.trakcer_id);
      stream.next(m.age);
      stream.next(m.velocity);
      stream.next(m.velocity_cov);
      stream.next(m.acceleration);
      stream.next(m.acceleration_cov);
      stream.next(m.angle_velocity);
      stream.next(m.angle_velocity_cov);
      stream.next(m.angle_acceleration);
      stream.next(m.angle_acceleration_cov);
      stream.next(m.anchor);
      stream.next(m.nearest_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CoreInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_ros_msg::CoreInfo_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.timestamp);
    s << indent << "priority_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.priority_id);
    s << indent << "exist_confidence: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.exist_confidence);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "center_cov: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.center_cov);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "size_cov: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.size_cov);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "direction_cov: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.direction_cov);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "type_confidence: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.type_confidence);
    s << indent << "attention_type: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.attention_type);
    s << indent << "motion_state: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.motion_state);
    s << indent << "lane_pos: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_pos);
    s << indent << "trakcer_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.trakcer_id);
    s << indent << "age: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.age);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "velocity_cov: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_cov);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "acceleration_cov: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration_cov);
    s << indent << "angle_velocity: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_velocity);
    s << indent << "angle_velocity_cov: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_velocity_cov);
    s << indent << "angle_acceleration: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_acceleration);
    s << indent << "angle_acceleration_cov: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_acceleration_cov);
    s << indent << "anchor: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.anchor);
    s << indent << "nearest_point: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.nearest_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_ROS_MSG_MESSAGE_COREINFO_H
