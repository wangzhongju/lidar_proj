// Generated by gencpp from file perception_ros_msg/SupplementInfo.msg
// DO NOT EDIT!


#ifndef PERCEPTION_ROS_MSG_MESSAGE_SUPPLEMENTINFO_H
#define PERCEPTION_ROS_MSG_MESSAGE_SUPPLEMENTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt32.h>
#include <perception_ros_msg/Point3f.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Int32.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <perception_ros_msg/Point3f.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <perception_ros_msg/Point3d.h>

namespace perception_ros_msg
{
template <class ContainerAllocator>
struct SupplementInfo_
{
  typedef SupplementInfo_<ContainerAllocator> Type;

  SupplementInfo_()
    : unique_id()
    , polygon()
    , left_point_index()
    , right_point_index()
    , cloud_indices()
    , latent_types()
    , size_type()
    , mode()
    , in_roi()
    , tracking_state()
    , geo_center()
    , geo_size()
    , trajectory()
    , history_velocity()
    , history_type()
    , gps_mode()
    , gps_info()  {
    }
  SupplementInfo_(const ContainerAllocator& _alloc)
    : unique_id(_alloc)
    , polygon(_alloc)
    , left_point_index(_alloc)
    , right_point_index(_alloc)
    , cloud_indices(_alloc)
    , latent_types(_alloc)
    , size_type(_alloc)
    , mode(_alloc)
    , in_roi(_alloc)
    , tracking_state(_alloc)
    , geo_center(_alloc)
    , geo_size(_alloc)
    , trajectory(_alloc)
    , history_velocity(_alloc)
    , history_type(_alloc)
    , gps_mode(_alloc)
    , gps_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _unique_id_type;
  _unique_id_type unique_id;

   typedef std::vector< ::perception_ros_msg::Point3f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_ros_msg::Point3f_<ContainerAllocator> >::other >  _polygon_type;
  _polygon_type polygon;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _left_point_index_type;
  _left_point_index_type left_point_index;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _right_point_index_type;
  _right_point_index_type right_point_index;

   typedef std::vector< ::std_msgs::Int32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Int32_<ContainerAllocator> >::other >  _cloud_indices_type;
  _cloud_indices_type cloud_indices;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _latent_types_type;
  _latent_types_type latent_types;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _size_type_type;
  _size_type_type size_type;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _mode_type;
  _mode_type mode;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _in_roi_type;
  _in_roi_type in_roi;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _tracking_state_type;
  _tracking_state_type tracking_state;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _geo_center_type;
  _geo_center_type geo_center;

   typedef  ::perception_ros_msg::Point3f_<ContainerAllocator>  _geo_size_type;
  _geo_size_type geo_size;

   typedef std::vector< ::perception_ros_msg::Point3f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_ros_msg::Point3f_<ContainerAllocator> >::other >  _trajectory_type;
  _trajectory_type trajectory;

   typedef std::vector< ::perception_ros_msg::Point3f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_ros_msg::Point3f_<ContainerAllocator> >::other >  _history_velocity_type;
  _history_velocity_type history_velocity;

   typedef std::vector< ::std_msgs::Int32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Int32_<ContainerAllocator> >::other >  _history_type_type;
  _history_type_type history_type;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _gps_mode_type;
  _gps_mode_type gps_mode;

   typedef  ::perception_ros_msg::Point3d_<ContainerAllocator>  _gps_info_type;
  _gps_info_type gps_info;





  typedef boost::shared_ptr< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SupplementInfo_

typedef ::perception_ros_msg::SupplementInfo_<std::allocator<void> > SupplementInfo;

typedef boost::shared_ptr< ::perception_ros_msg::SupplementInfo > SupplementInfoPtr;
typedef boost::shared_ptr< ::perception_ros_msg::SupplementInfo const> SupplementInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_ros_msg::SupplementInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_ros_msg::SupplementInfo_<ContainerAllocator1> & lhs, const ::perception_ros_msg::SupplementInfo_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.polygon == rhs.polygon &&
    lhs.left_point_index == rhs.left_point_index &&
    lhs.right_point_index == rhs.right_point_index &&
    lhs.cloud_indices == rhs.cloud_indices &&
    lhs.latent_types == rhs.latent_types &&
    lhs.size_type == rhs.size_type &&
    lhs.mode == rhs.mode &&
    lhs.in_roi == rhs.in_roi &&
    lhs.tracking_state == rhs.tracking_state &&
    lhs.geo_center == rhs.geo_center &&
    lhs.geo_size == rhs.geo_size &&
    lhs.trajectory == rhs.trajectory &&
    lhs.history_velocity == rhs.history_velocity &&
    lhs.history_type == rhs.history_type &&
    lhs.gps_mode == rhs.gps_mode &&
    lhs.gps_info == rhs.gps_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_ros_msg::SupplementInfo_<ContainerAllocator1> & lhs, const ::perception_ros_msg::SupplementInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_ros_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f732019e3813a01320832404d7727553";
  }

  static const char* value(const ::perception_ros_msg::SupplementInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf732019e3813a013ULL;
  static const uint64_t static_value2 = 0x20832404d7727553ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_ros_msg/SupplementInfo";
  }

  static const char* value(const ::perception_ros_msg::SupplementInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt32     unique_id\n"
"\n"
"Point3f[]           polygon\n"
"std_msgs/Int32      left_point_index \n"
"std_msgs/Int32      right_point_index \n"
"\n"
"std_msgs/Int32[]    cloud_indices\n"
"\n"
"std_msgs/Float32[]  latent_types\n"
"std_msgs/Int32      size_type \n"
"std_msgs/Int32      mode \n"
"std_msgs/Bool       in_roi \n"
"std_msgs/Int32      tracking_state\n"
"Point3f             geo_center \n"
"Point3f             geo_size \n"
"\n"
"\n"
"\n"
"Point3f[]           trajectory \n"
"Point3f[]           history_velocity\n"
"std_msgs/Int32[]    history_type \n"
"std_msgs/Int32      gps_mode \n"
"Point3d             gps_info \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: perception_ros_msg/Point3f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: perception_ros_msg/Point3d\n"
"std_msgs/Float64 x \n"
"std_msgs/Float64 y \n"
"std_msgs/Float64 z \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::perception_ros_msg::SupplementInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.polygon);
      stream.next(m.left_point_index);
      stream.next(m.right_point_index);
      stream.next(m.cloud_indices);
      stream.next(m.latent_types);
      stream.next(m.size_type);
      stream.next(m.mode);
      stream.next(m.in_roi);
      stream.next(m.tracking_state);
      stream.next(m.geo_center);
      stream.next(m.geo_size);
      stream.next(m.trajectory);
      stream.next(m.history_velocity);
      stream.next(m.history_type);
      stream.next(m.gps_mode);
      stream.next(m.gps_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SupplementInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_ros_msg::SupplementInfo_<ContainerAllocator>& v)
  {
    s << indent << "unique_id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.unique_id);
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon[i]);
    }
    s << indent << "left_point_index: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_point_index);
    s << indent << "right_point_index: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_point_index);
    s << indent << "cloud_indices[]" << std::endl;
    for (size_t i = 0; i < v.cloud_indices.size(); ++i)
    {
      s << indent << "  cloud_indices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "    ", v.cloud_indices[i]);
    }
    s << indent << "latent_types[]" << std::endl;
    for (size_t i = 0; i < v.latent_types.size(); ++i)
    {
      s << indent << "  latent_types[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.latent_types[i]);
    }
    s << indent << "size_type: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.size_type);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "in_roi: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.in_roi);
    s << indent << "tracking_state: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.tracking_state);
    s << indent << "geo_center: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_center);
    s << indent << "geo_size: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_size);
    s << indent << "trajectory[]" << std::endl;
    for (size_t i = 0; i < v.trajectory.size(); ++i)
    {
      s << indent << "  trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory[i]);
    }
    s << indent << "history_velocity[]" << std::endl;
    for (size_t i = 0; i < v.history_velocity.size(); ++i)
    {
      s << indent << "  history_velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_ros_msg::Point3f_<ContainerAllocator> >::stream(s, indent + "    ", v.history_velocity[i]);
    }
    s << indent << "history_type[]" << std::endl;
    for (size_t i = 0; i < v.history_type.size(); ++i)
    {
      s << indent << "  history_type[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "    ", v.history_type[i]);
    }
    s << indent << "gps_mode: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.gps_mode);
    s << indent << "gps_info: ";
    s << std::endl;
    Printer< ::perception_ros_msg::Point3d_<ContainerAllocator> >::stream(s, indent + "  ", v.gps_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_ROS_MSG_MESSAGE_SUPPLEMENTINFO_H
