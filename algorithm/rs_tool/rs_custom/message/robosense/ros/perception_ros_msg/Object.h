// Generated by gencpp from file perception_ros_msg/Object.msg
// DO NOT EDIT!


#ifndef PERCEPTION_ROS_MSG_MESSAGE_OBJECT_H
#define PERCEPTION_ROS_MSG_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_ros_msg/CoreInfo.h>
#include <std_msgs/Bool.h>
#include <perception_ros_msg/SupplementInfo.h>

namespace perception_ros_msg
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : coreinfo()
    , hassupplmentinfo()
    , supplementinfo()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : coreinfo(_alloc)
    , hassupplmentinfo(_alloc)
    , supplementinfo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::perception_ros_msg::CoreInfo_<ContainerAllocator>  _coreinfo_type;
  _coreinfo_type coreinfo;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _hassupplmentinfo_type;
  _hassupplmentinfo_type hassupplmentinfo;

   typedef  ::perception_ros_msg::SupplementInfo_<ContainerAllocator>  _supplementinfo_type;
  _supplementinfo_type supplementinfo;





  typedef boost::shared_ptr< ::perception_ros_msg::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_ros_msg::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::perception_ros_msg::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::perception_ros_msg::Object > ObjectPtr;
typedef boost::shared_ptr< ::perception_ros_msg::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_ros_msg::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_ros_msg::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_ros_msg::Object_<ContainerAllocator1> & lhs, const ::perception_ros_msg::Object_<ContainerAllocator2> & rhs)
{
  return lhs.coreinfo == rhs.coreinfo &&
    lhs.hassupplmentinfo == rhs.hassupplmentinfo &&
    lhs.supplementinfo == rhs.supplementinfo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_ros_msg::Object_<ContainerAllocator1> & lhs, const ::perception_ros_msg::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_ros_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_ros_msg::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_ros_msg::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_ros_msg::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_ros_msg::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58769107fb9619969bdc416c42341c77";
  }

  static const char* value(const ::perception_ros_msg::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58769107fb961996ULL;
  static const uint64_t static_value2 = 0x9bdc416c42341c77ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_ros_msg::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_ros_msg/Object";
  }

  static const char* value(const ::perception_ros_msg::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_ros_msg::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CoreInfo coreinfo\n"
"std_msgs/Bool  hassupplmentinfo \n"
"SupplementInfo supplementinfo \n"
"\n"
"================================================================================\n"
"MSG: perception_ros_msg/CoreInfo\n"
"std_msgs/Float64 timestamp\n"
"\n"
"std_msgs/Int32 priority_id\n"
"std_msgs/Float32 exist_confidence \n"
"Point3f          center \n"
"Point3f          center_cov \n"
"Point3f          size \n"
"Point3f          size_cov \n"
"Point3f          direction \n"
"Point3f          direction_cov         \n"
"std_msgs/Int32   type \n"
"std_msgs/Float32 type_confidence \n"
"std_msgs/Int32   attention_type \n"
"std_msgs/Int32   motion_state\n"
"std_msgs/Int32   lane_pos\n"
"std_msgs/Int32   trakcer_id \n"
"std_msgs/Float64 age \n"
"Point3f          velocity \n"
"Point3f          velocity_cov \n"
"Point3f          acceleration \n"
"Point3f          acceleration_cov \n"
"std_msgs/Float32 angle_velocity \n"
"std_msgs/Float32 angle_velocity_cov \n"
"std_msgs/Float32 angle_acceleration \n"
"std_msgs/Float32 angle_acceleration_cov  \n"
"Point3f          anchor \n"
"Point3f          nearest_point \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: perception_ros_msg/Point3f\n"
"std_msgs/Float32 x \n"
"std_msgs/Float32 y \n"
"std_msgs/Float32 z \n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: perception_ros_msg/SupplementInfo\n"
"std_msgs/UInt32     unique_id\n"
"\n"
"Point3f[]           polygon\n"
"std_msgs/Int32      left_point_index \n"
"std_msgs/Int32      right_point_index \n"
"\n"
"std_msgs/Int32[]    cloud_indices\n"
"\n"
"std_msgs/Float32[]  latent_types\n"
"std_msgs/Int32      size_type \n"
"std_msgs/Int32      mode \n"
"std_msgs/Bool       in_roi \n"
"std_msgs/Int32      tracking_state\n"
"Point3f             geo_center \n"
"Point3f             geo_size \n"
"\n"
"\n"
"\n"
"Point3f[]           trajectory \n"
"Point3f[]           history_velocity\n"
"std_msgs/Int32[]    history_type \n"
"std_msgs/Int32      gps_mode \n"
"Point3d             gps_info \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: perception_ros_msg/Point3d\n"
"std_msgs/Float64 x \n"
"std_msgs/Float64 y \n"
"std_msgs/Float64 z \n"
;
  }

  static const char* value(const ::perception_ros_msg::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_ros_msg::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coreinfo);
      stream.next(m.hassupplmentinfo);
      stream.next(m.supplementinfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_ros_msg::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_ros_msg::Object_<ContainerAllocator>& v)
  {
    s << indent << "coreinfo: ";
    s << std::endl;
    Printer< ::perception_ros_msg::CoreInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.coreinfo);
    s << indent << "hassupplmentinfo: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.hassupplmentinfo);
    s << indent << "supplementinfo: ";
    s << std::endl;
    Printer< ::perception_ros_msg::SupplementInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.supplementinfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_ROS_MSG_MESSAGE_OBJECT_H
