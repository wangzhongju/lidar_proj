// Generated by gencpp from file perception_msg/Pos320Nav.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSG_MESSAGE_POS320NAV_H
#define PERCEPTION_MSG_MESSAGE_POS320NAV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msg
{
template <class ContainerAllocator>
struct Pos320Nav_
{
  typedef Pos320Nav_<ContainerAllocator> Type;

  Pos320Nav_()
    : header()
    , int_mode(0)
    , week_num(0)
    , week_ms(0)
    , satellite_num(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_ground(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , acceleration_north(0)
    , acceleration_east(0)
    , acceleration_ground(0)
    , angular_velocity_roll(0)
    , angular_velocity_pitch(0)
    , angular_velocity_yaw(0)
    , nav_state(0)  {
    }
  Pos320Nav_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , int_mode(0)
    , week_num(0)
    , week_ms(0)
    , satellite_num(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_north(0.0)
    , velocity_east(0.0)
    , velocity_ground(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , acceleration_north(0)
    , acceleration_east(0)
    , acceleration_ground(0)
    , angular_velocity_roll(0)
    , angular_velocity_pitch(0)
    , angular_velocity_yaw(0)
    , nav_state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _int_mode_type;
  _int_mode_type int_mode;

   typedef uint16_t _week_num_type;
  _week_num_type week_num;

   typedef uint32_t _week_ms_type;
  _week_ms_type week_ms;

   typedef uint8_t _satellite_num_type;
  _satellite_num_type satellite_num;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _velocity_north_type;
  _velocity_north_type velocity_north;

   typedef float _velocity_east_type;
  _velocity_east_type velocity_east;

   typedef float _velocity_ground_type;
  _velocity_ground_type velocity_ground;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int16_t _acceleration_north_type;
  _acceleration_north_type acceleration_north;

   typedef int16_t _acceleration_east_type;
  _acceleration_east_type acceleration_east;

   typedef int16_t _acceleration_ground_type;
  _acceleration_ground_type acceleration_ground;

   typedef int16_t _angular_velocity_roll_type;
  _angular_velocity_roll_type angular_velocity_roll;

   typedef int16_t _angular_velocity_pitch_type;
  _angular_velocity_pitch_type angular_velocity_pitch;

   typedef int16_t _angular_velocity_yaw_type;
  _angular_velocity_yaw_type angular_velocity_yaw;

   typedef uint8_t _nav_state_type;
  _nav_state_type nav_state;



  enum {
    GNSS_MODE_SPP = 0u,
    GNSS_MODE_RTK_FLOAT = 1u,
    GNSS_MODE_RTK_FIXED = 2u,
    GNSS_MODE_NO_GNSS = 3u,
  };


  typedef boost::shared_ptr< ::perception_msg::Pos320Nav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msg::Pos320Nav_<ContainerAllocator> const> ConstPtr;

}; // struct Pos320Nav_

typedef ::perception_msg::Pos320Nav_<std::allocator<void> > Pos320Nav;

typedef boost::shared_ptr< ::perception_msg::Pos320Nav > Pos320NavPtr;
typedef boost::shared_ptr< ::perception_msg::Pos320Nav const> Pos320NavConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msg::Pos320Nav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msg::Pos320Nav_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'perception_msg': ['/home/brookswu/documents/shangqi/shangqi/perception_msg/src/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msg::Pos320Nav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msg::Pos320Nav_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msg::Pos320Nav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msg::Pos320Nav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msg::Pos320Nav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msg::Pos320Nav_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msg::Pos320Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ab148fe75b8b7b0550241bc5315a57a";
  }

  static const char* value(const ::perception_msg::Pos320Nav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ab148fe75b8b7b0ULL;
  static const uint64_t static_value2 = 0x550241bc5315a57aULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msg::Pos320Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msg/Pos320Nav";
  }

  static const char* value(const ::perception_msg::Pos320Nav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msg::Pos320Nav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "################################################################################\n\
#\n\
# Pos320 Navigation data\n\
#\n\
# Description:\n\
#   Interface for describing the Navigation data from sensor Pos320\n\
#\n\
#\n\
#\n\
################################################################################\n\
\n\
# ROS Header(Time stamp and seq id)\n\
Header  header\n\
\n\
# composition mode, 0 -- tight composition 1 -- loose composition\n\
uint8   int_mode\n\
\n\
# gps time, week num\n\
uint16  week_num\n\
\n\
# [ms] gps time, million seconds in current week\n\
uint32  week_ms\n\
\n\
# the number of satellite\n\
uint8   satellite_num\n\
\n\
# gps latitude\n\
float64 latitude\n\
\n\
# gps longitude\n\
float64 longitude\n\
\n\
# gps altitude\n\
float32 altitude\n\
\n\
# [m/s] velocity to north direction\n\
float32 velocity_north\n\
\n\
# [m/s] velocity to east direction\n\
float32 velocity_east\n\
\n\
# [m/s] velocity to ground direction\n\
float32 velocity_ground\n\
\n\
# [deg] roll angle\n\
float32 roll\n\
\n\
# [deg] pitch angle\n\
float32 pitch\n\
\n\
# [deg] yaw angle [0,360)\n\
#         0(360)\n\
#           ^\n\
#           N\n\
#  270 < W     E > 90\n\
#           S\n\
#           v\n\
#          180\n\
float32 yaw\n\
\n\
# [0.01 m/s^2]  acceleration to north direction\n\
int16   acceleration_north\n\
\n\
# [0.01 m/s^2]  acceleration to east direction\n\
int16   acceleration_east\n\
\n\
# [0.01 m/s^2]  acceleration to ground direction\n\
int16   acceleration_ground\n\
\n\
# [0.01 deg/s] angular velocity of roll angle\n\
int16   angular_velocity_roll\n\
\n\
# [0.01 deg/s] angular velocity of pitch angle\n\
int16   angular_velocity_pitch\n\
\n\
# [0.01 deg/s] angular velocity of yaw angle\n\
int16   angular_velocity_yaw\n\
\n\
# the state of pos32 navigation output\n\
# 8 bits in nav_state:\n\
# [1][2][3][4][5][6][7][8]\n\
# bits in [1][2] == 0 --> the current cacluation state is mechanical\n\
# bits in [1][2] != 0 --> the current cacluation state is composition\n\
# bits in [3][4][5][6][7][8] --> GNSS mode, [GNSS_MODE*] (see enum for details)\n\
uint8   nav_state\n\
\n\
uint8   GNSS_MODE_SPP       = 0\n\
uint8   GNSS_MODE_RTK_FLOAT = 1\n\
uint8   GNSS_MODE_RTK_FIXED = 2\n\
uint8   GNSS_MODE_NO_GNSS   = 3\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msg::Pos320Nav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msg::Pos320Nav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.int_mode);
      stream.next(m.week_num);
      stream.next(m.week_ms);
      stream.next(m.satellite_num);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.velocity_north);
      stream.next(m.velocity_east);
      stream.next(m.velocity_ground);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.acceleration_north);
      stream.next(m.acceleration_east);
      stream.next(m.acceleration_ground);
      stream.next(m.angular_velocity_roll);
      stream.next(m.angular_velocity_pitch);
      stream.next(m.angular_velocity_yaw);
      stream.next(m.nav_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pos320Nav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msg::Pos320Nav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msg::Pos320Nav_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "int_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.int_mode);
    s << indent << "week_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week_num);
    s << indent << "week_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week_ms);
    s << indent << "satellite_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellite_num);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "velocity_north: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_north);
    s << indent << "velocity_east: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_east);
    s << indent << "velocity_ground: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_ground);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "acceleration_north: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_north);
    s << indent << "acceleration_east: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_east);
    s << indent << "acceleration_ground: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acceleration_ground);
    s << indent << "angular_velocity_roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angular_velocity_roll);
    s << indent << "angular_velocity_pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angular_velocity_pitch);
    s << indent << "angular_velocity_yaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angular_velocity_yaw);
    s << indent << "nav_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSG_MESSAGE_POS320NAV_H
