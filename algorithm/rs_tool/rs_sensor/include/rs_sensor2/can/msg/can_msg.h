// Generated by gencpp from file perception_msg/can_msg.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSG_MESSAGE_CAN_MSG_H
#define PERCEPTION_MSG_MESSAGE_CAN_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace perception_msg
{
template <class ContainerAllocator>
struct can_msg_
{
  typedef can_msg_<ContainerAllocator> Type;

  can_msg_()
    : header()
    , vehicle_type()
    , can_id()
    , can_dlc()
    , can_data()  {
    }
  can_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_type(_alloc)
    , can_id(_alloc)
    , can_dlc(_alloc)
    , can_data()  {
  (void)_alloc;
      can_data.assign( ::std_msgs::UInt8_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::String_<ContainerAllocator>  _vehicle_type_type;
  _vehicle_type_type vehicle_type;

   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _can_id_type;
  _can_id_type can_id;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _can_dlc_type;
  _can_dlc_type can_dlc;

   typedef boost::array< ::std_msgs::UInt8_<ContainerAllocator> , 64>  _can_data_type;
  _can_data_type can_data;





  typedef boost::shared_ptr< ::perception_msg::can_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msg::can_msg_<ContainerAllocator> const> ConstPtr;

}; // struct can_msg_

typedef ::perception_msg::can_msg_<std::allocator<void> > can_msg;

typedef boost::shared_ptr< ::perception_msg::can_msg > can_msgPtr;
typedef boost::shared_ptr< ::perception_msg::can_msg const> can_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msg::can_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msg::can_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'perception_msg': ['/home/hsw1/can_ros_message/collect/perception_msg/src/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msg::can_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msg::can_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msg::can_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msg::can_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msg::can_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msg::can_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msg::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33ce3e067e07f9910ab88dc05c31aa89";
  }

  static const char* value(const ::perception_msg::can_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33ce3e067e07f991ULL;
  static const uint64_t static_value2 = 0x0ab88dc05c31aa89ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msg::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msg/can_msg";
  }

  static const char* value(const ::perception_msg::can_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msg::can_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header    header \n\
std_msgs/String    vehicle_type \n\
std_msgs/UInt32    can_id\n\
std_msgs/UInt8     can_dlc\n\
std_msgs/UInt8[64] can_data \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt32\n\
uint32 data\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
";
  }

  static const char* value(const ::perception_msg::can_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msg::can_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_type);
      stream.next(m.can_id);
      stream.next(m.can_dlc);
      stream.next(m.can_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct can_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msg::can_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msg::can_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_type);
    s << indent << "can_id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.can_id);
    s << indent << "can_dlc: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.can_dlc);
    s << indent << "can_data[]" << std::endl;
    for (size_t i = 0; i < v.can_data.size(); ++i)
    {
      s << indent << "  can_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "    ", v.can_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSG_MESSAGE_CAN_MSG_H
